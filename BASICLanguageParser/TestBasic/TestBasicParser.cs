//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Stephen\source\repos\BASICLanguageParser\BASICLanguageParser.Grammar\TestBasic.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BASICLanguageParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class TestBasicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FORSTMT=1, NEXTSTMT=2, VARIABLELISTNUMBER=3, GO=4, GOTO=5, GOTO_NUM=6, 
		TO=7, TO_NUM=8, GOSUB=9, GOSUB_NUM=10, SUB=11, SUB_NUM=12, ON=13, RETURN=14, 
		IF=15, THEN=16, THEN_NUM=17, THEN_NUM_ELSE=18, ELSE=19, ELSE_NUM=20, FOR=21, 
		STEP=22, STEP_NUM=23, LET=24, AND=25, OR=26, NOT=27, EQ=28, ADDITION=29, 
		SUBTRACTION=30, MULTIPLICATION=31, DIVISION=32, COLON=33, COMMA=34, LPAREN=35, 
		RPAREN=36, EXPONENT=37, NEQ=38, GTE=39, LTE=40, LT=41, GT=42, VARIABLE_STRING_ARRAY=43, 
		VARIABLE_NUMBER_ARRAY=44, VARIABLE_STRING=45, VARIABLE_NUMBER=46, DIGIT_SEQUENCE=47, 
		NUMBER=48, COMMENT_BLOCK=49, STRINGLITERAL=50, SKIP_=51, EOL=52;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_statement = 2, RULE_ongotonumstmt = 3, 
		RULE_ongotostmt = 4, RULE_ongosubnumstmt = 5, RULE_ongosubstmt = 6, RULE_gotonumstmt = 7, 
		RULE_gotostmt = 8, RULE_gosubnumstmt = 9, RULE_gosubstmt = 10, RULE_returnstmt = 11, 
		RULE_ifthenelsestmt = 12, RULE_ifthenelsenumstmt = 13, RULE_ifthenstmt = 14, 
		RULE_ifnumelsenumstmt = 15, RULE_ifnumstmt = 16, RULE_ifstmt = 17, RULE_forstmt = 18, 
		RULE_nextstmt = 19, RULE_letstmt = 20, RULE_expression = 21, RULE_characterExpression = 22, 
		RULE_relationalExpression = 23, RULE_relationalOperator = 24, RULE_logicalOperator = 25;
	public static readonly string[] ruleNames = {
		"prog", "line", "statement", "ongotonumstmt", "ongotostmt", "ongosubnumstmt", 
		"ongosubstmt", "gotonumstmt", "gotostmt", "gosubnumstmt", "gosubstmt", 
		"returnstmt", "ifthenelsestmt", "ifthenelsenumstmt", "ifthenstmt", "ifnumelsenumstmt", 
		"ifnumstmt", "ifstmt", "forstmt", "nextstmt", "letstmt", "expression", 
		"characterExpression", "relationalExpression", "relationalOperator", "logicalOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'GO'", "'GOTO'", null, "'TO'", null, "'GOSUB'", 
		null, "'SUB'", null, "'ON'", "'RETURN'", "'IF'", "'THEN'", null, null, 
		"'ELSE'", null, "'FOR'", "'STEP'", null, "'LET'", "'AND'", "'OR'", "'NOT'", 
		"'='", "'+'", "'-'", "'*'", "'/'", "':'", "','", "'('", "')'", "'^'", 
		null, null, null, "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FORSTMT", "NEXTSTMT", "VARIABLELISTNUMBER", "GO", "GOTO", "GOTO_NUM", 
		"TO", "TO_NUM", "GOSUB", "GOSUB_NUM", "SUB", "SUB_NUM", "ON", "RETURN", 
		"IF", "THEN", "THEN_NUM", "THEN_NUM_ELSE", "ELSE", "ELSE_NUM", "FOR", 
		"STEP", "STEP_NUM", "LET", "AND", "OR", "NOT", "EQ", "ADDITION", "SUBTRACTION", 
		"MULTIPLICATION", "DIVISION", "COLON", "COMMA", "LPAREN", "RPAREN", "EXPONENT", 
		"NEQ", "GTE", "LTE", "LT", "GT", "VARIABLE_STRING_ARRAY", "VARIABLE_NUMBER_ARRAY", 
		"VARIABLE_STRING", "VARIABLE_NUMBER", "DIGIT_SEQUENCE", "NUMBER", "COMMENT_BLOCK", 
		"STRINGLITERAL", "SKIP_", "EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TestBasic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TestBasicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TestBasicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TestBasicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TestBasicParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 52;
				line();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT_SEQUENCE );
			State = 57;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(TestBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(TestBasicParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TestBasicParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT_BLOCK() { return GetTokens(TestBasicParser.COMMENT_BLOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_BLOCK(int i) {
			return GetToken(TestBasicParser.COMMENT_BLOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(TestBasicParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(TestBasicParser.COLON, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(DIGIT_SEQUENCE);
			State = 62;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORSTMT:
			case NEXTSTMT:
			case GO:
			case GOTO:
			case GOTO_NUM:
			case GOSUB:
			case GOSUB_NUM:
			case ON:
			case RETURN:
			case IF:
			case LET:
			case VARIABLE_STRING_ARRAY:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER:
				{
				State = 60;
				statement();
				}
				break;
			case COMMENT_BLOCK:
				{
				State = 61;
				Match(COMMENT_BLOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 64;
				Match(COLON);
				State = 67;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FORSTMT:
				case NEXTSTMT:
				case GO:
				case GOTO:
				case GOTO_NUM:
				case GOSUB:
				case GOSUB_NUM:
				case ON:
				case RETURN:
				case IF:
				case LET:
				case VARIABLE_STRING_ARRAY:
				case VARIABLE_NUMBER_ARRAY:
				case VARIABLE_STRING:
				case VARIABLE_NUMBER:
					{
					State = 65;
					statement();
					}
					break;
				case COMMENT_BLOCK:
					{
					State = 66;
					Match(COMMENT_BLOCK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==EOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GotonumstmtContext gotonumstmt() {
			return GetRuleContext<GotonumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotostmtContext gotostmt() {
			return GetRuleContext<GotostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GosubnumstmtContext gosubnumstmt() {
			return GetRuleContext<GosubnumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GosubstmtContext gosubstmt() {
			return GetRuleContext<GosubstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OngotonumstmtContext ongotonumstmt() {
			return GetRuleContext<OngotonumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OngotostmtContext ongotostmt() {
			return GetRuleContext<OngotostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OngosubnumstmtContext ongosubnumstmt() {
			return GetRuleContext<OngosubnumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OngosubstmtContext ongosubstmt() {
			return GetRuleContext<OngosubstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstmtContext returnstmt() {
			return GetRuleContext<ReturnstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfthenelsestmtContext ifthenelsestmt() {
			return GetRuleContext<IfthenelsestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfthenelsenumstmtContext ifthenelsenumstmt() {
			return GetRuleContext<IfthenelsenumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfthenstmtContext ifthenstmt() {
			return GetRuleContext<IfthenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfnumelsenumstmtContext ifnumelsenumstmt() {
			return GetRuleContext<IfnumelsenumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfnumstmtContext ifnumstmt() {
			return GetRuleContext<IfnumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForstmtContext forstmt() {
			return GetRuleContext<ForstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NextstmtContext nextstmt() {
			return GetRuleContext<NextstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetstmtContext letstmt() {
			return GetRuleContext<LetstmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76;
				gotonumstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77;
				gotostmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 78;
				gosubnumstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 79;
				gosubstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 80;
				ongotonumstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 81;
				ongotostmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 82;
				ongosubnumstmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 83;
				ongosubstmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 84;
				returnstmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 85;
				ifthenelsestmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 86;
				ifthenelsenumstmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 87;
				ifthenstmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 88;
				ifnumelsenumstmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 89;
				ifnumstmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 90;
				ifstmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 91;
				forstmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 92;
				nextstmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 93;
				letstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngotonumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TestBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO_NUM() { return GetToken(TestBasicParser.GOTO_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(TestBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_NUM() { return GetToken(TestBasicParser.TO_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TestBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TestBasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(TestBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(TestBasicParser.DIGIT_SEQUENCE, i);
		}
		public OngotonumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongotonumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterOngotonumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitOngotonumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngotonumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngotonumstmtContext ongotonumstmt() {
		OngotonumstmtContext _localctx = new OngotonumstmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_ongotonumstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(ON);
			State = 97;
			expression(0);
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GOTO_NUM:
				{
				State = 98;
				Match(GOTO_NUM);
				}
				break;
			case GO:
				{
				State = 99;
				Match(GO);
				State = 100;
				Match(TO_NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 103;
				Match(COMMA);
				State = 104;
				Match(DIGIT_SEQUENCE);
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TestBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(TestBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(TestBasicParser.DIGIT_SEQUENCE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(TestBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TestBasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(TestBasicParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TestBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TestBasicParser.COMMA, i);
		}
		public OngotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterOngotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitOngotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngotostmtContext ongotostmt() {
		OngotostmtContext _localctx = new OngotostmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_ongotostmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(ON);
			State = 111;
			expression(0);
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GO:
				{
				State = 112;
				Match(GO);
				State = 113;
				Match(TO);
				}
				break;
			case GOTO:
				{
				State = 114;
				Match(GOTO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 117;
			Match(DIGIT_SEQUENCE);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 118;
				Match(COMMA);
				State = 119;
				Match(DIGIT_SEQUENCE);
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngosubnumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TestBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOSUB_NUM() { return GetToken(TestBasicParser.GOSUB_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(TestBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_NUM() { return GetToken(TestBasicParser.SUB_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TestBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TestBasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(TestBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(TestBasicParser.DIGIT_SEQUENCE, i);
		}
		public OngosubnumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongosubnumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterOngosubnumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitOngosubnumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngosubnumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngosubnumstmtContext ongosubnumstmt() {
		OngosubnumstmtContext _localctx = new OngosubnumstmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_ongosubnumstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(ON);
			State = 126;
			expression(0);
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GOSUB_NUM:
				{
				State = 127;
				Match(GOSUB_NUM);
				}
				break;
			case GO:
				{
				State = 128;
				Match(GO);
				State = 129;
				Match(SUB_NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 132;
				Match(COMMA);
				State = 133;
				Match(DIGIT_SEQUENCE);
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(TestBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(TestBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(TestBasicParser.DIGIT_SEQUENCE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(TestBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(TestBasicParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOSUB() { return GetToken(TestBasicParser.GOSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TestBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TestBasicParser.COMMA, i);
		}
		public OngosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterOngosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitOngosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngosubstmtContext ongosubstmt() {
		OngosubstmtContext _localctx = new OngosubstmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_ongosubstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(ON);
			State = 140;
			expression(0);
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GO:
				{
				State = 141;
				Match(GO);
				State = 142;
				Match(SUB);
				}
				break;
			case GOSUB:
				{
				State = 143;
				Match(GOSUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 146;
			Match(DIGIT_SEQUENCE);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 147;
				Match(COMMA);
				State = 148;
				Match(DIGIT_SEQUENCE);
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotonumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO_NUM() { return GetToken(TestBasicParser.GOTO_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(TestBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_NUM() { return GetToken(TestBasicParser.TO_NUM, 0); }
		public GotonumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotonumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterGotonumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitGotonumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotonumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotonumstmtContext gotonumstmt() {
		GotonumstmtContext _localctx = new GotonumstmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_gotonumstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GOTO_NUM:
				{
				State = 154;
				Match(GOTO_NUM);
				}
				break;
			case GO:
				{
				{
				State = 155;
				Match(GO);
				State = 156;
				Match(TO_NUM);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(TestBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(TestBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TestBasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(TestBasicParser.GOTO, 0); }
		public GotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotostmtContext gotostmt() {
		GotostmtContext _localctx = new GotostmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_gotostmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GO:
				{
				State = 159;
				Match(GO);
				State = 160;
				Match(TO);
				}
				break;
			case GOTO:
				{
				State = 161;
				Match(GOTO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 164;
			Match(DIGIT_SEQUENCE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubnumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOSUB_NUM() { return GetToken(TestBasicParser.GOSUB_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(TestBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_NUM() { return GetToken(TestBasicParser.SUB_NUM, 0); }
		public GosubnumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubnumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterGosubnumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitGosubnumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGosubnumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GosubnumstmtContext gosubnumstmt() {
		GosubnumstmtContext _localctx = new GosubnumstmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_gosubnumstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GOSUB_NUM:
				{
				State = 166;
				Match(GOSUB_NUM);
				}
				break;
			case GO:
				{
				{
				State = 167;
				Match(GO);
				State = 168;
				Match(SUB_NUM);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(TestBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(TestBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(TestBasicParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOSUB() { return GetToken(TestBasicParser.GOSUB, 0); }
		public GosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GosubstmtContext gosubstmt() {
		GosubstmtContext _localctx = new GosubstmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_gosubstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GO:
				{
				State = 171;
				Match(GO);
				State = 172;
				Match(SUB);
				}
				break;
			case GOSUB:
				{
				State = 173;
				Match(GOSUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 176;
			Match(DIGIT_SEQUENCE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TestBasicParser.RETURN, 0); }
		public ReturnstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterReturnstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitReturnstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstmtContext returnstmt() {
		ReturnstmtContext _localctx = new ReturnstmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_returnstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfthenelsestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TestBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(TestBasicParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TestBasicParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(TestBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(TestBasicParser.DIGIT_SEQUENCE, i);
		}
		public IfthenelsestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifthenelsestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterIfthenelsestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitIfthenelsestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfthenelsestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfthenelsestmtContext ifthenelsestmt() {
		IfthenelsestmtContext _localctx = new IfthenelsestmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifthenelsestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(IF);
			State = 181;
			relationalExpression(0);
			State = 182;
			Match(THEN);
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORSTMT:
			case NEXTSTMT:
			case GO:
			case GOTO:
			case GOTO_NUM:
			case GOSUB:
			case GOSUB_NUM:
			case ON:
			case RETURN:
			case IF:
			case LET:
			case VARIABLE_STRING_ARRAY:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER:
				{
				State = 183;
				statement();
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 184;
				Match(DIGIT_SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 187;
			Match(ELSE);
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORSTMT:
			case NEXTSTMT:
			case GO:
			case GOTO:
			case GOTO_NUM:
			case GOSUB:
			case GOSUB_NUM:
			case ON:
			case RETURN:
			case IF:
			case LET:
			case VARIABLE_STRING_ARRAY:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER:
				{
				State = 188;
				statement();
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 189;
				Match(DIGIT_SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfthenelsenumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TestBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(TestBasicParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_NUM() { return GetToken(TestBasicParser.ELSE_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(TestBasicParser.DIGIT_SEQUENCE, 0); }
		public IfthenelsenumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifthenelsenumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterIfthenelsenumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitIfthenelsenumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfthenelsenumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfthenelsenumstmtContext ifthenelsenumstmt() {
		IfthenelsenumstmtContext _localctx = new IfthenelsenumstmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifthenelsenumstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(IF);
			State = 193;
			relationalExpression(0);
			State = 194;
			Match(THEN);
			State = 197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORSTMT:
			case NEXTSTMT:
			case GO:
			case GOTO:
			case GOTO_NUM:
			case GOSUB:
			case GOSUB_NUM:
			case ON:
			case RETURN:
			case IF:
			case LET:
			case VARIABLE_STRING_ARRAY:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER:
				{
				State = 195;
				statement();
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 196;
				Match(DIGIT_SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 199;
			Match(ELSE_NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfthenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TestBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(TestBasicParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(TestBasicParser.DIGIT_SEQUENCE, 0); }
		public IfthenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifthenstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterIfthenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitIfthenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfthenstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfthenstmtContext ifthenstmt() {
		IfthenstmtContext _localctx = new IfthenstmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifthenstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(IF);
			State = 202;
			relationalExpression(0);
			State = 203;
			Match(THEN);
			State = 206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORSTMT:
			case NEXTSTMT:
			case GO:
			case GOTO:
			case GOTO_NUM:
			case GOSUB:
			case GOSUB_NUM:
			case ON:
			case RETURN:
			case IF:
			case LET:
			case VARIABLE_STRING_ARRAY:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER:
				{
				State = 204;
				statement();
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 205;
				Match(DIGIT_SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfnumelsenumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TestBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_NUM_ELSE() { return GetToken(TestBasicParser.THEN_NUM_ELSE, 0); }
		public IfnumelsenumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifnumelsenumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterIfnumelsenumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitIfnumelsenumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfnumelsenumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfnumelsenumstmtContext ifnumelsenumstmt() {
		IfnumelsenumstmtContext _localctx = new IfnumelsenumstmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifnumelsenumstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(IF);
			State = 209;
			relationalExpression(0);
			{
			State = 210;
			Match(THEN_NUM_ELSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfnumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TestBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_NUM() { return GetToken(TestBasicParser.THEN_NUM, 0); }
		public IfnumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifnumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterIfnumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitIfnumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfnumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfnumstmtContext ifnumstmt() {
		IfnumstmtContext _localctx = new IfnumstmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifnumstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(IF);
			State = 213;
			relationalExpression(0);
			{
			State = 214;
			Match(THEN_NUM);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TestBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(TestBasicParser.DIGIT_SEQUENCE, 0); }
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(IF);
			State = 217;
			relationalExpression(0);
			State = 218;
			Match(DIGIT_SEQUENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORSTMT() { return GetToken(TestBasicParser.FORSTMT, 0); }
		public ForstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterForstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitForstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstmtContext forstmt() {
		ForstmtContext _localctx = new ForstmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_forstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(FORSTMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXTSTMT() { return GetToken(TestBasicParser.NEXTSTMT, 0); }
		public NextstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterNextstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitNextstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextstmtContext nextstmt() {
		NextstmtContext _localctx = new NextstmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_nextstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(NEXTSTMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(TestBasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext characterExpression() {
			return GetRuleContext<CharacterExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING_ARRAY() { return GetToken(TestBasicParser.VARIABLE_STRING_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING() { return GetToken(TestBasicParser.VARIABLE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(TestBasicParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY() { return GetToken(TestBasicParser.VARIABLE_NUMBER_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER() { return GetToken(TestBasicParser.VARIABLE_NUMBER, 0); }
		public LetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetstmtContext letstmt() {
		LetstmtContext _localctx = new LetstmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_letstmt);
		int _la;
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LET) {
					{
					State = 224;
					Match(LET);
					}
				}

				State = 227;
				_la = TokenStream.LA(1);
				if ( !(_la==VARIABLE_STRING_ARRAY || _la==VARIABLE_STRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 228;
				Match(EQ);
				State = 229;
				characterExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LET) {
					{
					State = 230;
					Match(LET);
					}
				}

				State = 233;
				_la = TokenStream.LA(1);
				if ( !(_la==VARIABLE_NUMBER_ARRAY || _la==VARIABLE_NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 234;
				Match(EQ);
				State = 235;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITION() { return GetToken(TestBasicParser.ADDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACTION() { return GetToken(TestBasicParser.SUBTRACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY() { return GetToken(TestBasicParser.VARIABLE_NUMBER_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER() { return GetToken(TestBasicParser.VARIABLE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(TestBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TestBasicParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(TestBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(TestBasicParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATION() { return GetToken(TestBasicParser.MULTIPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(TestBasicParser.DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPONENT() { return GetToken(TestBasicParser.EXPONENT, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADDITION:
			case SUBTRACTION:
				{
				{
				State = 239;
				_la = TokenStream.LA(1);
				if ( !(_la==ADDITION || _la==SUBTRACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 240;
				expression(0);
				}
				}
				break;
			case VARIABLE_NUMBER_ARRAY:
				{
				State = 241;
				Match(VARIABLE_NUMBER_ARRAY);
				}
				break;
			case VARIABLE_NUMBER:
				{
				State = 242;
				Match(VARIABLE_NUMBER);
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 243;
				Match(DIGIT_SEQUENCE);
				}
				break;
			case NUMBER:
				{
				State = 244;
				Match(NUMBER);
				}
				break;
			case LPAREN:
				{
				State = 245;
				Match(LPAREN);
				State = 246;
				expression(0);
				State = 247;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 262;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 260;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 251;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 252;
						_la = TokenStream.LA(1);
						if ( !(_la==MULTIPLICATION || _la==DIVISION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 253;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 254;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 255;
						_la = TokenStream.LA(1);
						if ( !(_la==ADDITION || _la==SUBTRACTION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 256;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 257;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						{
						State = 258;
						Match(EXPONENT);
						State = 259;
						expression(0);
						}
						}
						break;
					}
					} 
				}
				State = 264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CharacterExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING_ARRAY() { return GetToken(TestBasicParser.VARIABLE_STRING_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING() { return GetToken(TestBasicParser.VARIABLE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY() { return GetToken(TestBasicParser.VARIABLE_NUMBER_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER() { return GetToken(TestBasicParser.VARIABLE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(TestBasicParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(TestBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext[] characterExpression() {
			return GetRuleContexts<CharacterExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext characterExpression(int i) {
			return GetRuleContext<CharacterExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(TestBasicParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITION() { return GetToken(TestBasicParser.ADDITION, 0); }
		public CharacterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterCharacterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitCharacterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterExpressionContext characterExpression() {
		return characterExpression(0);
	}

	private CharacterExpressionContext characterExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CharacterExpressionContext _localctx = new CharacterExpressionContext(Context, _parentState);
		CharacterExpressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_characterExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_STRING_ARRAY:
				{
				State = 266;
				Match(VARIABLE_STRING_ARRAY);
				}
				break;
			case VARIABLE_STRING:
				{
				State = 267;
				Match(VARIABLE_STRING);
				}
				break;
			case VARIABLE_NUMBER_ARRAY:
				{
				State = 268;
				Match(VARIABLE_NUMBER_ARRAY);
				}
				break;
			case VARIABLE_NUMBER:
				{
				State = 269;
				Match(VARIABLE_NUMBER);
				}
				break;
			case STRINGLITERAL:
				{
				State = 270;
				Match(STRINGLITERAL);
				}
				break;
			case LPAREN:
				{
				State = 271;
				Match(LPAREN);
				State = 272;
				characterExpression(0);
				State = 273;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 282;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CharacterExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_characterExpression);
					State = 277;
					if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
					State = 278;
					Match(ADDITION);
					State = 279;
					characterExpression(8);
					}
					} 
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TestBasicParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext[] characterExpression() {
			return GetRuleContexts<CharacterExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext characterExpression(int i) {
			return GetRuleContext<CharacterExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(TestBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(TestBasicParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				{
				State = 286;
				Match(NOT);
				State = 287;
				relationalExpression(0);
				}
				}
				break;
			case 2:
				{
				State = 288;
				expression(0);
				State = 289;
				relationalOperator();
				State = 290;
				expression(0);
				}
				break;
			case 3:
				{
				State = 292;
				characterExpression(0);
				State = 293;
				relationalOperator();
				State = 294;
				characterExpression(0);
				}
				break;
			case 4:
				{
				State = 296;
				Match(LPAREN);
				State = 297;
				relationalExpression(0);
				State = 298;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 308;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RelationalExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
					State = 302;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 303;
					logicalOperator();
					State = 304;
					relationalExpression(6);
					}
					} 
				}
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(TestBasicParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(TestBasicParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(TestBasicParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(TestBasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(TestBasicParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(TestBasicParser.GT, 0); }
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NEQ) | (1L << GTE) | (1L << LTE) | (1L << LT) | (1L << GT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TestBasicParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TestBasicParser.OR, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 50, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 22: return characterExpression_sempred((CharacterExpressionContext)_localctx, predIndex);
		case 23: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		}
		return true;
	}
	private bool characterExpression_sempred(CharacterExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 7);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x36', '\x13E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\x6', '\x2', '\x38', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x39', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x41', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x46', '\n', 
		'\x3', '\a', '\x3', 'H', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'K', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x61', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'h', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'l', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', 'o', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'v', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', '{', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '~', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x85', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', '\x89', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\x8C', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x93', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', '\x98', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\x9B', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\xA0', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\xA5', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\xAC', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\xB1', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xBC', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xC1', '\n', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xC8', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xD1', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x5', '\x16', '\xE4', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\xEA', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\xEF', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\xFC', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\a', '\x17', '\x107', '\n', '\x17', '\f', '\x17', '\xE', '\x17', 
		'\x10A', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x116', '\n', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x11B', '\n', '\x18', '\f', 
		'\x18', '\xE', '\x18', '\x11E', '\v', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x12F', '\n', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', 
		'\x19', '\x135', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x138', '\v', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x2', '\x5', ',', '.', '\x30', '\x1C', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x2', '\t', '\x3', '\x3', '\x36', '\x36', '\x4', '\x2', '-', '-', '/', 
		'/', '\x4', '\x2', '.', '.', '\x30', '\x30', '\x3', '\x2', '\x1F', ' ', 
		'\x3', '\x2', '!', '\"', '\x4', '\x2', '\x1E', '\x1E', '(', ',', '\x3', 
		'\x2', '\x1B', '\x1C', '\x2', '\x15D', '\x2', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '=', '\x3', '\x2', '\x2', '\x2', '\x6', '`', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x62', '\x3', '\x2', '\x2', '\x2', '\n', 'p', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x7F', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x10', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\xA4', '\x3', '\x2', '\x2', '\x2', '\x14', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xB0', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xC2', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xD2', '\x3', '\x2', '\x2', '\x2', '\"', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xDA', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '(', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xEE', '\x3', '\x2', '\x2', '\x2', ',', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x115', '\x3', '\x2', '\x2', '\x2', '\x30', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\x5', '\x4', 
		'\x3', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\a', '\x2', '\x2', '\x3', '<', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '=', '@', '\a', '\x31', '\x2', '\x2', '>', '\x41', '\x5', 
		'\x6', '\x4', '\x2', '?', '\x41', '\a', '\x33', '\x2', '\x2', '@', '>', 
		'\x3', '\x2', '\x2', '\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', '\a', '#', '\x2', '\x2', 
		'\x43', '\x46', '\x5', '\x6', '\x4', '\x2', '\x44', '\x46', '\a', '\x33', 
		'\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\x42', '\x3', '\x2', '\x2', '\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 
		'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 
		'J', 'L', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\t', '\x2', '\x2', '\x2', 'M', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'N', '\x61', '\x5', '\x10', '\t', '\x2', 'O', '\x61', '\x5', '\x12', 
		'\n', '\x2', 'P', '\x61', '\x5', '\x14', '\v', '\x2', 'Q', '\x61', '\x5', 
		'\x16', '\f', '\x2', 'R', '\x61', '\x5', '\b', '\x5', '\x2', 'S', '\x61', 
		'\x5', '\n', '\x6', '\x2', 'T', '\x61', '\x5', '\f', '\a', '\x2', 'U', 
		'\x61', '\x5', '\xE', '\b', '\x2', 'V', '\x61', '\x5', '\x18', '\r', '\x2', 
		'W', '\x61', '\x5', '\x1A', '\xE', '\x2', 'X', '\x61', '\x5', '\x1C', 
		'\xF', '\x2', 'Y', '\x61', '\x5', '\x1E', '\x10', '\x2', 'Z', '\x61', 
		'\x5', ' ', '\x11', '\x2', '[', '\x61', '\x5', '\"', '\x12', '\x2', '\\', 
		'\x61', '\x5', '$', '\x13', '\x2', ']', '\x61', '\x5', '&', '\x14', '\x2', 
		'^', '\x61', '\x5', '(', '\x15', '\x2', '_', '\x61', '\x5', '*', '\x16', 
		'\x2', '`', 'N', '\x3', '\x2', '\x2', '\x2', '`', 'O', '\x3', '\x2', '\x2', 
		'\x2', '`', 'P', '\x3', '\x2', '\x2', '\x2', '`', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '`', 'R', '\x3', '\x2', '\x2', '\x2', '`', 'S', '\x3', '\x2', '\x2', 
		'\x2', '`', 'T', '\x3', '\x2', '\x2', '\x2', '`', 'U', '\x3', '\x2', '\x2', 
		'\x2', '`', 'V', '\x3', '\x2', '\x2', '\x2', '`', 'W', '\x3', '\x2', '\x2', 
		'\x2', '`', 'X', '\x3', '\x2', '\x2', '\x2', '`', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '`', 'Z', '\x3', '\x2', '\x2', '\x2', '`', '[', '\x3', '\x2', '\x2', 
		'\x2', '`', '\\', '\x3', '\x2', '\x2', '\x2', '`', ']', '\x3', '\x2', 
		'\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\a', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\a', '\xF', '\x2', '\x2', '\x63', 'g', '\x5', ',', '\x17', '\x2', '\x64', 
		'h', '\a', '\b', '\x2', '\x2', '\x65', '\x66', '\a', '\x6', '\x2', '\x2', 
		'\x66', 'h', '\a', '\n', '\x2', '\x2', 'g', '\x64', '\x3', '\x2', '\x2', 
		'\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'j', '\a', '$', '\x2', '\x2', 'j', 'l', '\a', '\x31', 
		'\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\t', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'q', '\a', '\xF', '\x2', '\x2', 'q', 'u', '\x5', 
		',', '\x17', '\x2', 'r', 's', '\a', '\x6', '\x2', '\x2', 's', 'v', '\a', 
		'\t', '\x2', '\x2', 't', 'v', '\a', '\a', '\x2', '\x2', 'u', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', 
		'\x2', '\x2', '\x2', 'w', '|', '\a', '\x31', '\x2', '\x2', 'x', 'y', '\a', 
		'$', '\x2', '\x2', 'y', '{', '\a', '\x31', '\x2', '\x2', 'z', 'x', '\x3', 
		'\x2', '\x2', '\x2', '{', '~', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\v', 
		'\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\a', '\xF', '\x2', '\x2', '\x80', '\x84', '\x5', ',', '\x17', 
		'\x2', '\x81', '\x85', '\a', '\f', '\x2', '\x2', '\x82', '\x83', '\a', 
		'\x6', '\x2', '\x2', '\x83', '\x85', '\a', '\xE', '\x2', '\x2', '\x84', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', 
		'$', '\x2', '\x2', '\x87', '\x89', '\a', '\x31', '\x2', '\x2', '\x88', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\r', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\xF', '\x2', 
		'\x2', '\x8E', '\x92', '\x5', ',', '\x17', '\x2', '\x8F', '\x90', '\a', 
		'\x6', '\x2', '\x2', '\x90', '\x93', '\a', '\r', '\x2', '\x2', '\x91', 
		'\x93', '\a', '\v', '\x2', '\x2', '\x92', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x99', '\a', '\x31', '\x2', '\x2', '\x95', 
		'\x96', '\a', '$', '\x2', '\x2', '\x96', '\x98', '\a', '\x31', '\x2', 
		'\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xA0', '\a', 
		'\b', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x6', '\x2', '\x2', '\x9E', 
		'\xA0', '\a', '\n', '\x2', '\x2', '\x9F', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA2', '\a', '\x6', '\x2', '\x2', '\xA2', 
		'\xA5', '\a', '\t', '\x2', '\x2', '\xA3', '\xA5', '\a', '\a', '\x2', '\x2', 
		'\xA4', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', 
		'\a', '\x31', '\x2', '\x2', '\xA7', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xAC', '\a', '\f', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x6', 
		'\x2', '\x2', '\xAA', '\xAC', '\a', '\xE', '\x2', '\x2', '\xAB', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x15', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x6', 
		'\x2', '\x2', '\xAE', '\xB1', '\a', '\r', '\x2', '\x2', '\xAF', '\xB1', 
		'\a', '\v', '\x2', '\x2', '\xB0', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB3', '\a', '\x31', '\x2', '\x2', '\xB3', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x10', '\x2', '\x2', 
		'\xB5', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x11', 
		'\x2', '\x2', '\xB7', '\xB8', '\x5', '\x30', '\x19', '\x2', '\xB8', '\xBB', 
		'\a', '\x12', '\x2', '\x2', '\xB9', '\xBC', '\x5', '\x6', '\x4', '\x2', 
		'\xBA', '\xBC', '\a', '\x31', '\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\xC0', '\a', '\x15', '\x2', '\x2', 
		'\xBE', '\xC1', '\x5', '\x6', '\x4', '\x2', '\xBF', '\xC1', '\a', '\x31', 
		'\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC3', '\a', '\x11', '\x2', '\x2', '\xC3', '\xC4', '\x5', '\x30', 
		'\x19', '\x2', '\xC4', '\xC7', '\a', '\x12', '\x2', '\x2', '\xC5', '\xC8', 
		'\x5', '\x6', '\x4', '\x2', '\xC6', '\xC8', '\a', '\x31', '\x2', '\x2', 
		'\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', 
		'\a', '\x16', '\x2', '\x2', '\xCA', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\xCC', '\a', '\x11', '\x2', '\x2', '\xCC', '\xCD', '\x5', '\x30', 
		'\x19', '\x2', '\xCD', '\xD0', '\a', '\x12', '\x2', '\x2', '\xCE', '\xD1', 
		'\x5', '\x6', '\x4', '\x2', '\xCF', '\xD1', '\a', '\x31', '\x2', '\x2', 
		'\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xD1', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', 
		'\a', '\x11', '\x2', '\x2', '\xD3', '\xD4', '\x5', '\x30', '\x19', '\x2', 
		'\xD4', '\xD5', '\a', '\x14', '\x2', '\x2', '\xD5', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD7', '\a', '\x11', '\x2', '\x2', '\xD7', '\xD8', 
		'\x5', '\x30', '\x19', '\x2', '\xD8', '\xD9', '\a', '\x13', '\x2', '\x2', 
		'\xD9', '#', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x11', 
		'\x2', '\x2', '\xDB', '\xDC', '\x5', '\x30', '\x19', '\x2', '\xDC', '\xDD', 
		'\a', '\x31', '\x2', '\x2', '\xDD', '%', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\a', '\x3', '\x2', '\x2', '\xDF', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\a', '\x4', '\x2', '\x2', '\xE1', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE4', '\a', '\x1A', '\x2', '\x2', '\xE3', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\t', 
		'\x3', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x1E', '\x2', '\x2', '\xE7', 
		'\xEF', '\x5', '.', '\x18', '\x2', '\xE8', '\xEA', '\a', '\x1A', '\x2', 
		'\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\t', '\x4', '\x2', '\x2', '\xEC', '\xED', '\a', '\x1E', '\x2', 
		'\x2', '\xED', '\xEF', '\x5', ',', '\x17', '\x2', '\xEE', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\b', '\x17', '\x1', 
		'\x2', '\xF1', '\xF2', '\t', '\x5', '\x2', '\x2', '\xF2', '\xFC', '\x5', 
		',', '\x17', '\x2', '\xF3', '\xFC', '\a', '.', '\x2', '\x2', '\xF4', '\xFC', 
		'\a', '\x30', '\x2', '\x2', '\xF5', '\xFC', '\a', '\x31', '\x2', '\x2', 
		'\xF6', '\xFC', '\a', '\x32', '\x2', '\x2', '\xF7', '\xF8', '\a', '%', 
		'\x2', '\x2', '\xF8', '\xF9', '\x5', ',', '\x17', '\x2', '\xF9', '\xFA', 
		'\a', '&', '\x2', '\x2', '\xFA', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\f', '\v', '\x2', '\x2', '\xFE', '\xFF', '\t', 
		'\x6', '\x2', '\x2', '\xFF', '\x107', '\x5', ',', '\x17', '\f', '\x100', 
		'\x101', '\f', '\n', '\x2', '\x2', '\x101', '\x102', '\t', '\x5', '\x2', 
		'\x2', '\x102', '\x107', '\x5', ',', '\x17', '\v', '\x103', '\x104', '\f', 
		'\t', '\x2', '\x2', '\x104', '\x105', '\a', '\'', '\x2', '\x2', '\x105', 
		'\x107', '\x5', ',', '\x17', '\x2', '\x106', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x100', '\x3', '\x2', '\x2', '\x2', '\x106', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x106', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '-', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\b', '\x18', '\x1', 
		'\x2', '\x10C', '\x116', '\a', '-', '\x2', '\x2', '\x10D', '\x116', '\a', 
		'/', '\x2', '\x2', '\x10E', '\x116', '\a', '.', '\x2', '\x2', '\x10F', 
		'\x116', '\a', '\x30', '\x2', '\x2', '\x110', '\x116', '\a', '\x34', '\x2', 
		'\x2', '\x111', '\x112', '\a', '%', '\x2', '\x2', '\x112', '\x113', '\x5', 
		'.', '\x18', '\x2', '\x113', '\x114', '\a', '&', '\x2', '\x2', '\x114', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x115', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x115', '\x10E', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x110', '\x3', '\x2', '\x2', '\x2', '\x115', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x118', '\f', '\t', '\x2', '\x2', '\x118', '\x119', '\a', '\x1F', '\x2', 
		'\x2', '\x119', '\x11B', '\x5', '.', '\x18', '\n', '\x11A', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '/', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x120', '\b', '\x19', '\x1', '\x2', '\x120', 
		'\x121', '\a', '\x1D', '\x2', '\x2', '\x121', '\x12F', '\x5', '\x30', 
		'\x19', '\x2', '\x122', '\x123', '\x5', ',', '\x17', '\x2', '\x123', '\x124', 
		'\x5', '\x32', '\x1A', '\x2', '\x124', '\x125', '\x5', ',', '\x17', '\x2', 
		'\x125', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x5', 
		'.', '\x18', '\x2', '\x127', '\x128', '\x5', '\x32', '\x1A', '\x2', '\x128', 
		'\x129', '\x5', '.', '\x18', '\x2', '\x129', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x12B', '\a', '%', '\x2', '\x2', '\x12B', '\x12C', '\x5', 
		'\x30', '\x19', '\x2', '\x12C', '\x12D', '\a', '&', '\x2', '\x2', '\x12D', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x122', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x136', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\f', 
		'\a', '\x2', '\x2', '\x131', '\x132', '\x5', '\x34', '\x1B', '\x2', '\x132', 
		'\x133', '\x5', '\x30', '\x19', '\b', '\x133', '\x135', '\x3', '\x2', 
		'\x2', '\x2', '\x134', '\x130', '\x3', '\x2', '\x2', '\x2', '\x135', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x137', '\x3', '\x2', '\x2', '\x2', '\x137', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x13A', '\t', '\a', '\x2', '\x2', '\x13A', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x13C', '\t', '\b', '\x2', '\x2', '\x13C', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '!', '\x39', '@', '\x45', 'I', '`', 'g', 'm', 'u', 
		'|', '\x84', '\x8A', '\x92', '\x99', '\x9F', '\xA4', '\xAB', '\xB0', '\xBB', 
		'\xC0', '\xC7', '\xD0', '\xE3', '\xE9', '\xEE', '\xFB', '\x106', '\x108', 
		'\x115', '\x11C', '\x12E', '\x136',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BASICLanguageParser
