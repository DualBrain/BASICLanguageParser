//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Stephen\source\repos\BASICLanguageParser\BASICLanguageParser.Grammar\TestBasic.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BASICLanguageParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class TestBasicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, LET=4, SUB=5, EQ=6, ADDITION=7, SUBTRACTION=8, 
		MULTIPLICATION=9, DIVISION=10, COLON=11, LPAREN=12, RPAREN=13, VARIABLE_STRING_ARRAY=14, 
		VARIABLE_NUMBER_ARRAY=15, VARIABLE_STRING=16, VARIABLE_NUMBER=17, DIGIT_SEQUENCE=18, 
		NUMBER=19, COMMENT_BLOCK=20, STRINGLITERAL=21, SKIP_=22, EOL=23;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_statement = 2, RULE_gotostmt = 3, RULE_gosubstmt = 4, 
		RULE_letstmt = 5, RULE_expression = 6, RULE_characterExpression = 7;
	public static readonly string[] ruleNames = {
		"prog", "line", "statement", "gotostmt", "gosubstmt", "letstmt", "expression", 
		"characterExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'GO'", "'TO'", "'^'", "'LET'", "'SUB'", "'='", "'+'", "'-'", "'*'", 
		"'/'", "':'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "LET", "SUB", "EQ", "ADDITION", "SUBTRACTION", 
		"MULTIPLICATION", "DIVISION", "COLON", "LPAREN", "RPAREN", "VARIABLE_STRING_ARRAY", 
		"VARIABLE_NUMBER_ARRAY", "VARIABLE_STRING", "VARIABLE_NUMBER", "DIGIT_SEQUENCE", 
		"NUMBER", "COMMENT_BLOCK", "STRINGLITERAL", "SKIP_", "EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TestBasic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TestBasicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TestBasicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TestBasicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TestBasicParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 16;
				line();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT_SEQUENCE );
			State = 21;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(TestBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(TestBasicParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TestBasicParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT_BLOCK() { return GetTokens(TestBasicParser.COMMENT_BLOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_BLOCK(int i) {
			return GetToken(TestBasicParser.COMMENT_BLOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(TestBasicParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(TestBasicParser.COLON, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			Match(DIGIT_SEQUENCE);
			State = 26;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case LET:
			case VARIABLE_STRING_ARRAY:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER:
				{
				State = 24;
				statement();
				}
				break;
			case COMMENT_BLOCK:
				{
				State = 25;
				Match(COMMENT_BLOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 28;
				Match(COLON);
				State = 31;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case LET:
				case VARIABLE_STRING_ARRAY:
				case VARIABLE_NUMBER_ARRAY:
				case VARIABLE_STRING:
				case VARIABLE_NUMBER:
					{
					State = 29;
					statement();
					}
					break;
				case COMMENT_BLOCK:
					{
					State = 30;
					Match(COMMENT_BLOCK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 38;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==EOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GotostmtContext gotostmt() {
			return GetRuleContext<GotostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GosubstmtContext gosubstmt() {
			return GetRuleContext<GosubstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetstmtContext letstmt() {
			return GetRuleContext<LetstmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 43;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				gotostmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				gosubstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42;
				letstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(TestBasicParser.DIGIT_SEQUENCE, 0); }
		public GotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotostmtContext gotostmt() {
		GotostmtContext _localctx = new GotostmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_gotostmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(T__0);
			State = 46;
			Match(T__1);
			State = 47;
			Match(DIGIT_SEQUENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(TestBasicParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(TestBasicParser.DIGIT_SEQUENCE, 0); }
		public GosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GosubstmtContext gosubstmt() {
		GosubstmtContext _localctx = new GosubstmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_gosubstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			Match(T__0);
			State = 50;
			Match(SUB);
			State = 51;
			Match(DIGIT_SEQUENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(TestBasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext characterExpression() {
			return GetRuleContext<CharacterExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING_ARRAY() { return GetToken(TestBasicParser.VARIABLE_STRING_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING() { return GetToken(TestBasicParser.VARIABLE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(TestBasicParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY() { return GetToken(TestBasicParser.VARIABLE_NUMBER_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER() { return GetToken(TestBasicParser.VARIABLE_NUMBER, 0); }
		public LetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetstmtContext letstmt() {
		LetstmtContext _localctx = new LetstmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_letstmt);
		int _la;
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LET) {
					{
					State = 53;
					Match(LET);
					}
				}

				State = 56;
				_la = TokenStream.LA(1);
				if ( !(_la==VARIABLE_STRING_ARRAY || _la==VARIABLE_STRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 57;
				Match(EQ);
				State = 58;
				characterExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LET) {
					{
					State = 59;
					Match(LET);
					}
				}

				State = 62;
				_la = TokenStream.LA(1);
				if ( !(_la==VARIABLE_NUMBER_ARRAY || _la==VARIABLE_NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 63;
				Match(EQ);
				State = 64;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITION() { return GetToken(TestBasicParser.ADDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACTION() { return GetToken(TestBasicParser.SUBTRACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY() { return GetToken(TestBasicParser.VARIABLE_NUMBER_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER() { return GetToken(TestBasicParser.VARIABLE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(TestBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TestBasicParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(TestBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(TestBasicParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATION() { return GetToken(TestBasicParser.MULTIPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(TestBasicParser.DIVISION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADDITION:
			case SUBTRACTION:
				{
				{
				State = 68;
				_la = TokenStream.LA(1);
				if ( !(_la==ADDITION || _la==SUBTRACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 69;
				expression(0);
				}
				}
				break;
			case VARIABLE_NUMBER_ARRAY:
				{
				State = 70;
				Match(VARIABLE_NUMBER_ARRAY);
				}
				break;
			case VARIABLE_NUMBER:
				{
				State = 71;
				Match(VARIABLE_NUMBER);
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 72;
				Match(DIGIT_SEQUENCE);
				}
				break;
			case NUMBER:
				{
				State = 73;
				Match(NUMBER);
				}
				break;
			case LPAREN:
				{
				State = 74;
				Match(LPAREN);
				State = 75;
				expression(0);
				State = 76;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 91;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 89;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 80;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 81;
						_la = TokenStream.LA(1);
						if ( !(_la==MULTIPLICATION || _la==DIVISION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 82;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 83;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 84;
						_la = TokenStream.LA(1);
						if ( !(_la==ADDITION || _la==SUBTRACTION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 85;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 86;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						{
						State = 87;
						Match(T__2);
						State = 88;
						expression(0);
						}
						}
						break;
					}
					} 
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CharacterExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING_ARRAY() { return GetToken(TestBasicParser.VARIABLE_STRING_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING() { return GetToken(TestBasicParser.VARIABLE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(TestBasicParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext[] characterExpression() {
			return GetRuleContexts<CharacterExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext characterExpression(int i) {
			return GetRuleContext<CharacterExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITION() { return GetToken(TestBasicParser.ADDITION, 0); }
		public CharacterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.EnterCharacterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestBasicListener typedListener = listener as ITestBasicListener;
			if (typedListener != null) typedListener.ExitCharacterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestBasicVisitor<TResult> typedVisitor = visitor as ITestBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterExpressionContext characterExpression() {
		return characterExpression(0);
	}

	private CharacterExpressionContext characterExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CharacterExpressionContext _localctx = new CharacterExpressionContext(Context, _parentState);
		CharacterExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_characterExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_STRING_ARRAY:
				{
				State = 95;
				Match(VARIABLE_STRING_ARRAY);
				}
				break;
			case VARIABLE_STRING:
				{
				State = 96;
				Match(VARIABLE_STRING);
				}
				break;
			case STRINGLITERAL:
				{
				State = 97;
				Match(STRINGLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CharacterExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_characterExpression);
					State = 100;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 101;
					Match(ADDITION);
					State = 102;
					characterExpression(5);
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 7: return characterExpression_sempred((CharacterExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		}
		return true;
	}
	private bool characterExpression_sempred(CharacterExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', 'o', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x6', '\x2', '\x14', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x15', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1D', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\"', '\n', '\x3', 
		'\a', '\x3', '$', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\'', '\v', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '.', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x5', '\a', '\x39', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '?', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x44', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'Q', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'\\', '\n', '\b', '\f', '\b', '\xE', '\b', '_', '\v', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x65', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'j', '\n', '\t', '\f', 
		'\t', '\xE', '\t', 'm', '\v', '\t', '\x3', '\t', '\x2', '\x4', '\xE', 
		'\x10', '\n', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', 
		'\a', '\x3', '\x3', '\x19', '\x19', '\x4', '\x2', '\x10', '\x10', '\x12', 
		'\x12', '\x4', '\x2', '\x11', '\x11', '\x13', '\x13', '\x3', '\x2', '\t', 
		'\n', '\x3', '\x2', '\v', '\f', '\x2', 'z', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x19', '\x3', '\x2', '\x2', '\x2', '\x6', '-', '\x3', 
		'\x2', '\x2', '\x2', '\b', '/', '\x3', '\x2', '\x2', '\x2', '\n', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'P', '\x3', '\x2', '\x2', '\x2', '\x10', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x14', '\x5', '\x4', '\x3', '\x2', '\x13', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', 
		'\a', '\x2', '\x2', '\x3', '\x18', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x1C', '\a', '\x14', '\x2', '\x2', '\x1A', '\x1D', '\x5', '\x6', 
		'\x4', '\x2', '\x1B', '\x1D', '\a', '\x16', '\x2', '\x2', '\x1C', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', '%', '\x3', '\x2', '\x2', '\x2', '\x1E', '!', '\a', '\r', '\x2', 
		'\x2', '\x1F', '\"', '\x5', '\x6', '\x4', '\x2', ' ', '\"', '\a', '\x16', 
		'\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '$', '\'', '\x3', '\x2', '\x2', '\x2', '%', 
		'#', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', 
		'&', '(', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', 
		'\x2', '(', ')', '\t', '\x2', '\x2', '\x2', ')', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '*', '.', '\x5', '\b', '\x5', '\x2', '+', '.', '\x5', '\n', 
		'\x6', '\x2', ',', '.', '\x5', '\f', '\a', '\x2', '-', '*', '\x3', '\x2', 
		'\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '-', ',', '\x3', '\x2', 
		'\x2', '\x2', '.', '\a', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', 
		'\x3', '\x2', '\x2', '\x30', '\x31', '\a', '\x4', '\x2', '\x2', '\x31', 
		'\x32', '\a', '\x14', '\x2', '\x2', '\x32', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\a', '\x3', '\x2', '\x2', '\x34', '\x35', '\a', 
		'\a', '\x2', '\x2', '\x35', '\x36', '\a', '\x14', '\x2', '\x2', '\x36', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x37', '\x39', '\a', '\x6', '\x2', 
		'\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\t', '\x3', '\x2', '\x2', ';', '<', '\a', '\b', '\x2', '\x2', '<', '\x44', 
		'\x5', '\x10', '\t', '\x2', '=', '?', '\a', '\x6', '\x2', '\x2', '>', 
		'=', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\t', '\x4', '\x2', 
		'\x2', '\x41', '\x42', '\a', '\b', '\x2', '\x2', '\x42', '\x44', '\x5', 
		'\xE', '\b', '\x2', '\x43', '\x38', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'>', '\x3', '\x2', '\x2', '\x2', '\x44', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x46', '\b', '\b', '\x1', '\x2', '\x46', 'G', '\t', '\x5', '\x2', 
		'\x2', 'G', 'Q', '\x5', '\xE', '\b', '\x2', 'H', 'Q', '\a', '\x11', '\x2', 
		'\x2', 'I', 'Q', '\a', '\x13', '\x2', '\x2', 'J', 'Q', '\a', '\x14', '\x2', 
		'\x2', 'K', 'Q', '\a', '\x15', '\x2', '\x2', 'L', 'M', '\a', '\xE', '\x2', 
		'\x2', 'M', 'N', '\x5', '\xE', '\b', '\x2', 'N', 'O', '\a', '\xF', '\x2', 
		'\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'H', '\x3', '\x2', '\x2', '\x2', 'P', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'J', '\x3', '\x2', '\x2', '\x2', 'P', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'L', '\x3', '\x2', '\x2', '\x2', 'Q', ']', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\f', '\v', '\x2', '\x2', 'S', 'T', '\t', '\x6', 
		'\x2', '\x2', 'T', '\\', '\x5', '\xE', '\b', '\f', 'U', 'V', '\f', '\n', 
		'\x2', '\x2', 'V', 'W', '\t', '\x5', '\x2', '\x2', 'W', '\\', '\x5', '\xE', 
		'\b', '\v', 'X', 'Y', '\f', '\t', '\x2', '\x2', 'Y', 'Z', '\a', '\x5', 
		'\x2', '\x2', 'Z', '\\', '\x5', '\xE', '\b', '\x2', '[', 'R', '\x3', '\x2', 
		'\x2', '\x2', '[', 'U', '\x3', '\x2', '\x2', '\x2', '[', 'X', '\x3', '\x2', 
		'\x2', '\x2', '\\', '_', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x61', '\b', '\t', '\x1', '\x2', '\x61', '\x65', '\a', '\x10', '\x2', 
		'\x2', '\x62', '\x65', '\a', '\x12', '\x2', '\x2', '\x63', '\x65', '\a', 
		'\x17', '\x2', '\x2', '\x64', '`', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x65', 'k', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\f', '\x6', 
		'\x2', '\x2', 'g', 'h', '\a', '\t', '\x2', '\x2', 'h', 'j', '\x5', '\x10', 
		'\t', '\a', 'i', '\x66', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'l', '\x11', '\x3', '\x2', '\x2', '\x2', 'm', 'k', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\x15', '\x1C', '!', '%', '-', '\x38', 
		'>', '\x43', 'P', '[', ']', '\x64', 'k',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BASICLanguageParser
