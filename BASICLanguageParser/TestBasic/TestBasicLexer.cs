//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Stephen\source\repos\BASICLanguageParser\BASICLanguageParser.Grammar\TestBasic.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BASICLanguageParser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class TestBasicLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LET=1, COMMENT=2, REM=3, DIGIT_SEQUENCE=4, WS=5, EOL=6;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LET", "COMMENT", "REM", "DIGIT_SEQUENCE", "WS", "EOL", "DIGIT"
	};


	public TestBasicLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TestBasicLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'LET'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LET", "COMMENT", "REM", "DIGIT_SEQUENCE", "WS", "EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TestBasic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TestBasicLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\b', ';', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x18', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x1B', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1F', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\'', '\n', '\x4', '\x3', '\x5', '\x6', 
		'\x5', '*', '\n', '\x5', '\r', '\x5', '\xE', '\x5', '+', '\x3', '\x6', 
		'\x6', '\x6', '/', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\x30', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x5', '\a', '\x36', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\x19', '\x2', '\t', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\x2', '\x3', '\x2', '\x4', '\x4', '\x2', '\v', '\v', '\"', 
		'\"', '\x3', '\x2', '\x32', ';', '\x2', '?', '\x2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x5', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\a', '&', '\x3', '\x2', '\x2', '\x2', '\t', ')', '\x3', '\x2', 
		'\x2', '\x2', '\v', '.', '\x3', '\x2', '\x2', '\x2', '\r', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x39', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'\x12', '\a', 'N', '\x2', '\x2', '\x12', '\x13', '\a', 'G', '\x2', '\x2', 
		'\x13', '\x14', '\a', 'V', '\x2', '\x2', '\x14', '\x4', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\x19', '\x5', '\a', '\x4', '\x2', '\x16', '\x18', 
		'\v', '\x2', '\x2', '\x2', '\x17', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x1F', '\x5', '\r', '\a', '\x2', '\x1D', '\x1F', '\a', '\x2', 
		'\x2', '\x3', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', 
		'!', '\b', '\x3', '\x2', '\x2', '!', '\x6', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\'', '\a', ')', '\x2', '\x2', '#', '$', '\a', 'T', '\x2', '\x2', 
		'$', '%', '\a', 'G', '\x2', '\x2', '%', '\'', '\a', 'O', '\x2', '\x2', 
		'&', '\"', '\x3', '\x2', '\x2', '\x2', '&', '#', '\x3', '\x2', '\x2', 
		'\x2', '\'', '\b', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x5', '\xF', 
		'\b', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', 
		'\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', 
		'\x2', '\x2', ',', '\n', '\x3', '\x2', '\x2', '\x2', '-', '/', '\t', '\x2', 
		'\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\b', '\x6', '\x3', '\x2', '\x33', '\f', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x36', '\a', '\xF', '\x2', '\x2', '\x35', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', 
		'\f', '\x2', '\x2', '\x38', '\xE', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\t', '\x3', '\x2', '\x2', ':', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\t', '\x2', '\x19', '\x1E', '&', '+', '\x30', '\x35', '\x4', '\b', '\x2', 
		'\x2', '\x2', '\x3', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BASICLanguageParser
