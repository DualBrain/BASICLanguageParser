//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Stephen\source\repos\BASICLanguageParser\BASICLanguageParser.Grammar\ColorBasic.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BASICLanguageParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class ColorBasicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, LET=9, 
		DIM=10, ABS=11, ASC=12, SGN=13, INT=14, SIN=15, RND=16, LEN=17, VAL=18, 
		CHR=19, MID=20, LEFT=21, RIGHT=22, STR=23, INKEY=24, JOYSTK=25, EOFTOKEN=26, 
		PEEK=27, POINT=28, MEM=29, USR=30, FOR=31, TO=32, STEP=33, NEXT=34, IF=35, 
		THEN=36, THEN_NUM=37, THEN_NUM_ELSE=38, ELSE=39, ELSE_NUM=40, GO=41, GOTO=42, 
		GOTO_NUM=43, TO_NUM=44, GOSUB=45, GOSUB_NUM=46, SUB=47, SUB_NUM=48, ON=49, 
		OFF=50, RETURN=51, DATA=52, RESTORE=53, READ=54, NEW=55, END=56, STOP=57, 
		RUN=58, CONT=59, LIST=60, LLIST=61, CLEAR=62, INPUT=63, PRINT=64, TAB=65, 
		SET=66, RESET=67, CLS=68, EXEC=69, POKE=70, MOTOR=71, AUDIO=72, SOUND=73, 
		CLOAD=74, CSAVE=75, CLOADM=76, CSAVEM=77, SKIPF=78, OPEN=79, CLOSE=80, 
		DIGIT_SEQUENCE=81, SINGLE_DIGIT=82, DEVICE_KEYBOARD=83, DEVICE_CASSETTE=84, 
		DEVICE_PRINTER=85, DEVICE_RS232=86, LPAREN=87, RPAREN=88, OR=89, AND=90, 
		NOT=91, EQ=92, NEQ=93, GTE=94, LTE=95, LT=96, GT=97, ADDITION=98, SUBTRACTION=99, 
		MULTIPLICATION=100, DIVISION=101, VARIABLE_NUMBER=102, VARIABLE_STRING=103, 
		VARIABLE_NUMBER_ARRAY=104, VARIABLE_STRING_ARRAY=105, LETTER=106, DATUM=107, 
		STRINGLITERAL=108, NUMBER=109, COMMENT_BLOCK=110, SKIP_=111, EOL=112;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_statement = 2, RULE_expression = 3, 
		RULE_characterExpression = 4, RULE_relationalExpression = 5, RULE_relationalOperator = 6, 
		RULE_logicalOperator = 7, RULE_variableList = 8, RULE_absfunc = 9, RULE_ascfunc = 10, 
		RULE_sgnfunc = 11, RULE_intfunc = 12, RULE_sinfunc = 13, RULE_rndfunc = 14, 
		RULE_lenfunc = 15, RULE_valfunc = 16, RULE_chrfunc = 17, RULE_midfunc = 18, 
		RULE_leftfunc = 19, RULE_rightfunc = 20, RULE_strfunc = 21, RULE_inkeyfunc = 22, 
		RULE_joystkfunc = 23, RULE_eoffunc = 24, RULE_peekfunc = 25, RULE_pointfunc = 26, 
		RULE_memfunc = 27, RULE_usrfunc = 28, RULE_letstmt = 29, RULE_dimstmt = 30, 
		RULE_forstmt = 31, RULE_nextstmt = 32, RULE_ifthenelsestmt = 33, RULE_ifthenelsenumstmt = 34, 
		RULE_ifthenstmt = 35, RULE_ifnumelsenumstmt = 36, RULE_ifnumstmt = 37, 
		RULE_ifstmt = 38, RULE_gotonumstmt = 39, RULE_gotostmt = 40, RULE_gosubnumstmt = 41, 
		RULE_gosubstmt = 42, RULE_ongotonumstmt = 43, RULE_ongotostmt = 44, RULE_ongosubnumstmt = 45, 
		RULE_ongosubstmt = 46, RULE_returnstmt = 47, RULE_readstmt = 48, RULE_restorestmt = 49, 
		RULE_newstmt = 50, RULE_endstmt = 51, RULE_stopstmt = 52, RULE_runstmt = 53, 
		RULE_clearstmt = 54, RULE_contstmt = 55, RULE_liststmt = 56, RULE_lliststmt = 57, 
		RULE_inputstmt1 = 58, RULE_printstmt = 59, RULE_printtabstmt = 60, RULE_printhashstmt = 61, 
		RULE_printatstmt = 62, RULE_setstmt = 63, RULE_resetstmt = 64, RULE_clsstmt = 65, 
		RULE_execstmt = 66, RULE_pokestmt = 67, RULE_motorstmt = 68, RULE_audiostmt = 69, 
		RULE_soundstmt = 70, RULE_cloadstmt = 71, RULE_cloadmstmt = 72, RULE_csavestmt = 73, 
		RULE_csavemstmt = 74, RULE_skipfstmt = 75, RULE_openstmt = 76, RULE_closestmt = 77;
	public static readonly string[] ruleNames = {
		"prog", "line", "statement", "expression", "characterExpression", "relationalExpression", 
		"relationalOperator", "logicalOperator", "variableList", "absfunc", "ascfunc", 
		"sgnfunc", "intfunc", "sinfunc", "rndfunc", "lenfunc", "valfunc", "chrfunc", 
		"midfunc", "leftfunc", "rightfunc", "strfunc", "inkeyfunc", "joystkfunc", 
		"eoffunc", "peekfunc", "pointfunc", "memfunc", "usrfunc", "letstmt", "dimstmt", 
		"forstmt", "nextstmt", "ifthenelsestmt", "ifthenelsenumstmt", "ifthenstmt", 
		"ifnumelsenumstmt", "ifnumstmt", "ifstmt", "gotonumstmt", "gotostmt", 
		"gosubnumstmt", "gosubstmt", "ongotonumstmt", "ongotostmt", "ongosubnumstmt", 
		"ongosubstmt", "returnstmt", "readstmt", "restorestmt", "newstmt", "endstmt", 
		"stopstmt", "runstmt", "clearstmt", "contstmt", "liststmt", "lliststmt", 
		"inputstmt1", "printstmt", "printtabstmt", "printhashstmt", "printatstmt", 
		"setstmt", "resetstmt", "clsstmt", "execstmt", "pokestmt", "motorstmt", 
		"audiostmt", "soundstmt", "cloadstmt", "cloadmstmt", "csavestmt", "csavemstmt", 
		"skipfstmt", "openstmt", "closestmt"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'^'", "','", "';'", "'#'", "'@'", "'I'", "'O'", "'LET'", 
		"'DIM'", "'ABS'", "'ASC'", "'SGN'", "'INT'", "'SIN'", "'RND'", "'LEN'", 
		"'VAL'", "'CHR$'", "'MID$'", "'LEFT$'", "'RIGHT$'", "'STR$'", "'INKEY$'", 
		"'JOYSTK'", "'EOF'", "'PEEK'", "'POINT'", "'MEM'", "'USR'", "'FOR'", "'TO'", 
		"'STEP'", "'NEXT'", "'IF'", "'THEN'", null, null, "'ELSE'", null, "'GO'", 
		"'GOTO'", null, null, "'GOSUB'", null, "'SUB'", null, "'ON'", "'OFF'", 
		"'RETURN'", "'DATA'", "'RESTORE'", "'READ'", "'NEW'", "'END'", "'STOP'", 
		"'RUN'", "'CONT'", "'LIST'", "'LLIST'", "'CLEAR'", "'INPUT'", "'PRINT'", 
		"'TAB'", "'SET'", "'RESET'", "'CLS'", "'EXEC'", "'POKE'", "'MOTOR'", "'AUDIO'", 
		"'SOUND'", "'CLOAD'", "'CSAVE'", "'CLOADM'", "'CSAVEM'", "'SKIPF'", "'OPEN'", 
		"'CLOSE'", null, null, "'0'", "'-1'", "'-2'", "'-3'", "'('", "')'", "'OR'", 
		"'AND'", "'NOT'", "'='", null, null, null, "'<'", "'>'", "'+'", "'-'", 
		"'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "LET", "DIM", "ABS", 
		"ASC", "SGN", "INT", "SIN", "RND", "LEN", "VAL", "CHR", "MID", "LEFT", 
		"RIGHT", "STR", "INKEY", "JOYSTK", "EOFTOKEN", "PEEK", "POINT", "MEM", 
		"USR", "FOR", "TO", "STEP", "NEXT", "IF", "THEN", "THEN_NUM", "THEN_NUM_ELSE", 
		"ELSE", "ELSE_NUM", "GO", "GOTO", "GOTO_NUM", "TO_NUM", "GOSUB", "GOSUB_NUM", 
		"SUB", "SUB_NUM", "ON", "OFF", "RETURN", "DATA", "RESTORE", "READ", "NEW", 
		"END", "STOP", "RUN", "CONT", "LIST", "LLIST", "CLEAR", "INPUT", "PRINT", 
		"TAB", "SET", "RESET", "CLS", "EXEC", "POKE", "MOTOR", "AUDIO", "SOUND", 
		"CLOAD", "CSAVE", "CLOADM", "CSAVEM", "SKIPF", "OPEN", "CLOSE", "DIGIT_SEQUENCE", 
		"SINGLE_DIGIT", "DEVICE_KEYBOARD", "DEVICE_CASSETTE", "DEVICE_PRINTER", 
		"DEVICE_RS232", "LPAREN", "RPAREN", "OR", "AND", "NOT", "EQ", "NEQ", "GTE", 
		"LTE", "LT", "GT", "ADDITION", "SUBTRACTION", "MULTIPLICATION", "DIVISION", 
		"VARIABLE_NUMBER", "VARIABLE_STRING", "VARIABLE_NUMBER_ARRAY", "VARIABLE_STRING_ARRAY", 
		"LETTER", "DATUM", "STRINGLITERAL", "NUMBER", "COMMENT_BLOCK", "SKIP_", 
		"EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ColorBasic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ColorBasicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ColorBasicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ColorBasicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ColorBasicParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 156;
				line();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT_SEQUENCE );
			State = 161;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(ColorBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(ColorBasicParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ColorBasicParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT_BLOCK() { return GetTokens(ColorBasicParser.COMMENT_BLOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_BLOCK(int i) {
			return GetToken(ColorBasicParser.COMMENT_BLOCK, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(DIGIT_SEQUENCE);
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case GOTO:
			case GOTO_NUM:
			case GOSUB:
			case GOSUB_NUM:
			case ON:
			case RETURN:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case VARIABLE_NUMBER:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING_ARRAY:
				{
				State = 164;
				statement();
				}
				break;
			case COMMENT_BLOCK:
				{
				State = 165;
				Match(COMMENT_BLOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 168;
				Match(T__0);
				State = 171;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LET:
				case DIM:
				case FOR:
				case NEXT:
				case IF:
				case GO:
				case GOTO:
				case GOTO_NUM:
				case GOSUB:
				case GOSUB_NUM:
				case ON:
				case RETURN:
				case RESTORE:
				case READ:
				case NEW:
				case END:
				case STOP:
				case RUN:
				case CONT:
				case LIST:
				case LLIST:
				case CLEAR:
				case INPUT:
				case PRINT:
				case SET:
				case RESET:
				case CLS:
				case EXEC:
				case POKE:
				case MOTOR:
				case AUDIO:
				case SOUND:
				case CLOAD:
				case CSAVE:
				case CSAVEM:
				case SKIPF:
				case OPEN:
				case CLOSE:
				case VARIABLE_NUMBER:
				case VARIABLE_STRING:
				case VARIABLE_NUMBER_ARRAY:
				case VARIABLE_STRING_ARRAY:
					{
					State = 169;
					statement();
					}
					break;
				case COMMENT_BLOCK:
					{
					State = 170;
					Match(COMMENT_BLOCK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==EOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LetstmtContext letstmt() {
			return GetRuleContext<LetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstmtContext returnstmt() {
			return GetRuleContext<ReturnstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestorestmtContext restorestmt() {
			return GetRuleContext<RestorestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintstmtContext printstmt() {
			return GetRuleContext<PrintstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NextstmtContext nextstmt() {
			return GetRuleContext<NextstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PokestmtContext pokestmt() {
			return GetRuleContext<PokestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfthenelsestmtContext ifthenelsestmt() {
			return GetRuleContext<IfthenelsestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfthenelsenumstmtContext ifthenelsenumstmt() {
			return GetRuleContext<IfthenelsenumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfthenstmtContext ifthenstmt() {
			return GetRuleContext<IfthenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfnumelsenumstmtContext ifnumelsenumstmt() {
			return GetRuleContext<IfnumelsenumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfnumstmtContext ifnumstmt() {
			return GetRuleContext<IfnumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForstmtContext forstmt() {
			return GetRuleContext<ForstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inputstmt1Context inputstmt1() {
			return GetRuleContext<Inputstmt1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimstmtContext dimstmt() {
			return GetRuleContext<DimstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotonumstmtContext gotonumstmt() {
			return GetRuleContext<GotonumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotostmtContext gotostmt() {
			return GetRuleContext<GotostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GosubnumstmtContext gosubnumstmt() {
			return GetRuleContext<GosubnumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GosubstmtContext gosubstmt() {
			return GetRuleContext<GosubstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OngotonumstmtContext ongotonumstmt() {
			return GetRuleContext<OngotonumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OngotostmtContext ongotostmt() {
			return GetRuleContext<OngotostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OngosubnumstmtContext ongosubnumstmt() {
			return GetRuleContext<OngosubnumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OngosubstmtContext ongosubstmt() {
			return GetRuleContext<OngosubstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadstmtContext readstmt() {
			return GetRuleContext<ReadstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrinttabstmtContext printtabstmt() {
			return GetRuleContext<PrinttabstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrinthashstmtContext printhashstmt() {
			return GetRuleContext<PrinthashstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintatstmtContext printatstmt() {
			return GetRuleContext<PrintatstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewstmtContext newstmt() {
			return GetRuleContext<NewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopstmtContext stopstmt() {
			return GetRuleContext<StopstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndstmtContext endstmt() {
			return GetRuleContext<EndstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RunstmtContext runstmt() {
			return GetRuleContext<RunstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClearstmtContext clearstmt() {
			return GetRuleContext<ClearstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContstmtContext contstmt() {
			return GetRuleContext<ContstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListstmtContext liststmt() {
			return GetRuleContext<ListstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LliststmtContext lliststmt() {
			return GetRuleContext<LliststmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetstmtContext setstmt() {
			return GetRuleContext<SetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetstmtContext resetstmt() {
			return GetRuleContext<ResetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClsstmtContext clsstmt() {
			return GetRuleContext<ClsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecstmtContext execstmt() {
			return GetRuleContext<ExecstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MotorstmtContext motorstmt() {
			return GetRuleContext<MotorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AudiostmtContext audiostmt() {
			return GetRuleContext<AudiostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SoundstmtContext soundstmt() {
			return GetRuleContext<SoundstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloadstmtContext cloadstmt() {
			return GetRuleContext<CloadstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloadmstmtContext cloadmstmt() {
			return GetRuleContext<CloadmstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CsavestmtContext csavestmt() {
			return GetRuleContext<CsavestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CsavemstmtContext csavemstmt() {
			return GetRuleContext<CsavemstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkipfstmtContext skipfstmt() {
			return GetRuleContext<SkipfstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenstmtContext openstmt() {
			return GetRuleContext<OpenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosestmtContext closestmt() {
			return GetRuleContext<ClosestmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				letstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181;
				returnstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182;
				restorestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 183;
				printstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 184;
				nextstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 185;
				pokestmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 186;
				ifthenelsestmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 187;
				ifthenelsenumstmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 188;
				ifthenstmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 189;
				ifnumelsenumstmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 190;
				ifnumstmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 191;
				ifstmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 192;
				forstmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 193;
				inputstmt1();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 194;
				dimstmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 195;
				gotonumstmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 196;
				gotostmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 197;
				gosubnumstmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 198;
				gosubstmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 199;
				ongotonumstmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 200;
				ongotostmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 201;
				ongosubnumstmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 202;
				ongosubstmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 203;
				readstmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 204;
				printstmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 205;
				printtabstmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 206;
				printhashstmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 207;
				printatstmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 208;
				newstmt();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 209;
				stopstmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 210;
				endstmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 211;
				runstmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 212;
				clearstmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 213;
				contstmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 214;
				liststmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 215;
				lliststmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 216;
				setstmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 217;
				resetstmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 218;
				clsstmt();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 219;
				execstmt();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 220;
				motorstmt();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 221;
				audiostmt();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 222;
				soundstmt();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 223;
				cloadstmt();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 224;
				cloadmstmt();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 225;
				csavestmt();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 226;
				csavemstmt();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 227;
				skipfstmt();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 228;
				openstmt();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 229;
				closestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITION() { return GetToken(ColorBasicParser.ADDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACTION() { return GetToken(ColorBasicParser.SUBTRACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY() { return GetToken(ColorBasicParser.VARIABLE_NUMBER_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER() { return GetToken(ColorBasicParser.VARIABLE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(ColorBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ColorBasicParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATION() { return GetToken(ColorBasicParser.MULTIPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(ColorBasicParser.DIVISION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADDITION:
			case SUBTRACTION:
				{
				{
				State = 233;
				_la = TokenStream.LA(1);
				if ( !(_la==ADDITION || _la==SUBTRACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 234;
				expression(0);
				}
				}
				break;
			case VARIABLE_NUMBER_ARRAY:
				{
				State = 235;
				Match(VARIABLE_NUMBER_ARRAY);
				}
				break;
			case VARIABLE_NUMBER:
				{
				State = 236;
				Match(VARIABLE_NUMBER);
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 237;
				Match(DIGIT_SEQUENCE);
				}
				break;
			case NUMBER:
				{
				State = 238;
				Match(NUMBER);
				}
				break;
			case LPAREN:
				{
				State = 239;
				Match(LPAREN);
				State = 240;
				expression(0);
				State = 241;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 256;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 254;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 245;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 246;
						_la = TokenStream.LA(1);
						if ( !(_la==MULTIPLICATION || _la==DIVISION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 247;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 248;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 249;
						_la = TokenStream.LA(1);
						if ( !(_la==ADDITION || _la==SUBTRACTION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 250;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 251;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						{
						State = 252;
						Match(T__1);
						State = 253;
						expression(0);
						}
						}
						break;
					}
					} 
				}
				State = 258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CharacterExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING_ARRAY() { return GetToken(ColorBasicParser.VARIABLE_STRING_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING() { return GetToken(ColorBasicParser.VARIABLE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY() { return GetToken(ColorBasicParser.VARIABLE_NUMBER_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER() { return GetToken(ColorBasicParser.VARIABLE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(ColorBasicParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext[] characterExpression() {
			return GetRuleContexts<CharacterExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext characterExpression(int i) {
			return GetRuleContext<CharacterExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITION() { return GetToken(ColorBasicParser.ADDITION, 0); }
		public CharacterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCharacterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCharacterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterExpressionContext characterExpression() {
		return characterExpression(0);
	}

	private CharacterExpressionContext characterExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CharacterExpressionContext _localctx = new CharacterExpressionContext(Context, _parentState);
		CharacterExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_characterExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_STRING_ARRAY:
				{
				State = 260;
				Match(VARIABLE_STRING_ARRAY);
				}
				break;
			case VARIABLE_STRING:
				{
				State = 261;
				Match(VARIABLE_STRING);
				}
				break;
			case VARIABLE_NUMBER_ARRAY:
				{
				State = 262;
				Match(VARIABLE_NUMBER_ARRAY);
				}
				break;
			case VARIABLE_NUMBER:
				{
				State = 263;
				Match(VARIABLE_NUMBER);
				}
				break;
			case STRINGLITERAL:
				{
				State = 264;
				Match(STRINGLITERAL);
				}
				break;
			case LPAREN:
				{
				State = 265;
				Match(LPAREN);
				State = 266;
				characterExpression(0);
				State = 267;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CharacterExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_characterExpression);
					State = 271;
					if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
					State = 272;
					Match(ADDITION);
					State = 273;
					characterExpression(8);
					}
					} 
				}
				State = 278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ColorBasicParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext[] characterExpression() {
			return GetRuleContexts<CharacterExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext characterExpression(int i) {
			return GetRuleContext<CharacterExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				{
				State = 280;
				Match(NOT);
				State = 281;
				relationalExpression(0);
				}
				}
				break;
			case 2:
				{
				State = 282;
				expression(0);
				State = 283;
				relationalOperator();
				State = 284;
				expression(0);
				}
				break;
			case 3:
				{
				State = 286;
				characterExpression(0);
				State = 287;
				relationalOperator();
				State = 288;
				characterExpression(0);
				}
				break;
			case 4:
				{
				State = 290;
				Match(LPAREN);
				State = 291;
				relationalExpression(0);
				State = 292;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 302;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RelationalExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
					State = 296;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 297;
					logicalOperator();
					State = 298;
					relationalExpression(6);
					}
					} 
				}
				State = 304;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(ColorBasicParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(ColorBasicParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(ColorBasicParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ColorBasicParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ColorBasicParser.GT, 0); }
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (EQ - 92)) | (1L << (NEQ - 92)) | (1L << (GTE - 92)) | (1L << (LTE - 92)) | (1L << (LT - 92)) | (1L << (GT - 92)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ColorBasicParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ColorBasicParser.OR, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			_la = TokenStream.LA(1);
			if ( !(_la==OR || _la==AND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_NUMBER_ARRAY() { return GetTokens(ColorBasicParser.VARIABLE_NUMBER_ARRAY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY(int i) {
			return GetToken(ColorBasicParser.VARIABLE_NUMBER_ARRAY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_NUMBER() { return GetTokens(ColorBasicParser.VARIABLE_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER(int i) {
			return GetToken(ColorBasicParser.VARIABLE_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_STRING_ARRAY() { return GetTokens(ColorBasicParser.VARIABLE_STRING_ARRAY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING_ARRAY(int i) {
			return GetToken(ColorBasicParser.VARIABLE_STRING_ARRAY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_STRING() { return GetTokens(ColorBasicParser.VARIABLE_STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING(int i) {
			return GetToken(ColorBasicParser.VARIABLE_STRING, i);
		}
		public VariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListContext variableList() {
		VariableListContext _localctx = new VariableListContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (VARIABLE_NUMBER - 102)) | (1L << (VARIABLE_STRING - 102)) | (1L << (VARIABLE_NUMBER_ARRAY - 102)) | (1L << (VARIABLE_STRING_ARRAY - 102)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 310;
				Match(T__2);
				State = 311;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (VARIABLE_NUMBER - 102)) | (1L << (VARIABLE_STRING - 102)) | (1L << (VARIABLE_NUMBER_ARRAY - 102)) | (1L << (VARIABLE_STRING_ARRAY - 102)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(ColorBasicParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public AbsfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterAbsfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitAbsfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsfuncContext absfunc() {
		AbsfuncContext _localctx = new AbsfuncContext(Context, State);
		EnterRule(_localctx, 18, RULE_absfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(ABS);
			State = 318;
			Match(LPAREN);
			State = 319;
			expression(0);
			State = 320;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AscfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(ColorBasicParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public AscfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterAscfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitAscfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AscfuncContext ascfunc() {
		AscfuncContext _localctx = new AscfuncContext(Context, State);
		EnterRule(_localctx, 20, RULE_ascfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(ASC);
			State = 323;
			Match(LPAREN);
			State = 324;
			expression(0);
			State = 325;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SgnfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SGN() { return GetToken(ColorBasicParser.SGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public SgnfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sgnfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSgnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSgnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSgnfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SgnfuncContext sgnfunc() {
		SgnfuncContext _localctx = new SgnfuncContext(Context, State);
		EnterRule(_localctx, 22, RULE_sgnfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(SGN);
			State = 328;
			Match(LPAREN);
			State = 329;
			expression(0);
			State = 330;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ColorBasicParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public IntfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIntfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIntfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntfuncContext intfunc() {
		IntfuncContext _localctx = new IntfuncContext(Context, State);
		EnterRule(_localctx, 24, RULE_intfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(INT);
			State = 333;
			Match(LPAREN);
			State = 334;
			expression(0);
			State = 335;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(ColorBasicParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public SinfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSinfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSinfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSinfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SinfuncContext sinfunc() {
		SinfuncContext _localctx = new SinfuncContext(Context, State);
		EnterRule(_localctx, 26, RULE_sinfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(SIN);
			State = 338;
			Match(LPAREN);
			State = 339;
			expression(0);
			State = 340;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RndfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RND() { return GetToken(ColorBasicParser.RND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public RndfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rndfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRndfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRndfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRndfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RndfuncContext rndfunc() {
		RndfuncContext _localctx = new RndfuncContext(Context, State);
		EnterRule(_localctx, 28, RULE_rndfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(RND);
			State = 343;
			Match(LPAREN);
			State = 344;
			expression(0);
			State = 345;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LenfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(ColorBasicParser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public LenfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lenfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLenfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLenfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLenfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LenfuncContext lenfunc() {
		LenfuncContext _localctx = new LenfuncContext(Context, State);
		EnterRule(_localctx, 30, RULE_lenfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(LEN);
			State = 348;
			Match(LPAREN);
			State = 349;
			expression(0);
			State = 350;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(ColorBasicParser.VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public ValfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterValfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitValfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValfuncContext valfunc() {
		ValfuncContext _localctx = new ValfuncContext(Context, State);
		EnterRule(_localctx, 32, RULE_valfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(VAL);
			State = 353;
			Match(LPAREN);
			State = 354;
			expression(0);
			State = 355;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHR() { return GetToken(ColorBasicParser.CHR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public ChrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chrfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterChrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitChrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChrfuncContext chrfunc() {
		ChrfuncContext _localctx = new ChrfuncContext(Context, State);
		EnterRule(_localctx, 34, RULE_chrfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(CHR);
			State = 358;
			Match(LPAREN);
			State = 359;
			expression(0);
			State = 360;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(ColorBasicParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public MidfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterMidfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitMidfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidfuncContext midfunc() {
		MidfuncContext _localctx = new MidfuncContext(Context, State);
		EnterRule(_localctx, 36, RULE_midfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(MID);
			State = 363;
			Match(LPAREN);
			State = 364;
			expression(0);
			State = 365;
			Match(T__2);
			State = 366;
			expression(0);
			State = 367;
			Match(T__2);
			State = 368;
			expression(0);
			State = 369;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(ColorBasicParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public LeftfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLeftfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLeftfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftfuncContext leftfunc() {
		LeftfuncContext _localctx = new LeftfuncContext(Context, State);
		EnterRule(_localctx, 38, RULE_leftfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(LEFT);
			State = 372;
			Match(LPAREN);
			State = 373;
			expression(0);
			State = 374;
			Match(T__2);
			State = 375;
			expression(0);
			State = 376;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(ColorBasicParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public RightfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRightfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRightfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightfuncContext rightfunc() {
		RightfuncContext _localctx = new RightfuncContext(Context, State);
		EnterRule(_localctx, 40, RULE_rightfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(RIGHT);
			State = 379;
			Match(LPAREN);
			State = 380;
			expression(0);
			State = 381;
			Match(T__2);
			State = 382;
			expression(0);
			State = 383;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(ColorBasicParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public StrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterStrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitStrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrfuncContext strfunc() {
		StrfuncContext _localctx = new StrfuncContext(Context, State);
		EnterRule(_localctx, 42, RULE_strfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(STR);
			State = 386;
			Match(LPAREN);
			State = 387;
			expression(0);
			State = 388;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InkeyfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INKEY() { return GetToken(ColorBasicParser.INKEY, 0); }
		public InkeyfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inkeyfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterInkeyfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitInkeyfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInkeyfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InkeyfuncContext inkeyfunc() {
		InkeyfuncContext _localctx = new InkeyfuncContext(Context, State);
		EnterRule(_localctx, 44, RULE_inkeyfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			Match(INKEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoystkfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOYSTK() { return GetToken(ColorBasicParser.JOYSTK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public JoystkfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joystkfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterJoystkfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitJoystkfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoystkfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoystkfuncContext joystkfunc() {
		JoystkfuncContext _localctx = new JoystkfuncContext(Context, State);
		EnterRule(_localctx, 46, RULE_joystkfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(JOYSTK);
			State = 393;
			Match(LPAREN);
			State = 394;
			expression(0);
			State = 395;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EoffuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOFTOKEN() { return GetToken(ColorBasicParser.EOFTOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public EoffuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eoffunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterEoffunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitEoffunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEoffunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EoffuncContext eoffunc() {
		EoffuncContext _localctx = new EoffuncContext(Context, State);
		EnterRule(_localctx, 48, RULE_eoffunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			Match(EOFTOKEN);
			State = 398;
			Match(LPAREN);
			State = 399;
			expression(0);
			State = 400;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeekfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEEK() { return GetToken(ColorBasicParser.PEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public PeekfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_peekfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPeekfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPeekfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeekfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeekfuncContext peekfunc() {
		PeekfuncContext _localctx = new PeekfuncContext(Context, State);
		EnterRule(_localctx, 50, RULE_peekfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			Match(PEEK);
			State = 403;
			Match(LPAREN);
			State = 404;
			expression(0);
			State = 405;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(ColorBasicParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public PointfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPointfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPointfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointfuncContext pointfunc() {
		PointfuncContext _localctx = new PointfuncContext(Context, State);
		EnterRule(_localctx, 52, RULE_pointfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(POINT);
			State = 408;
			Match(LPAREN);
			State = 409;
			expression(0);
			State = 410;
			Match(T__2);
			State = 411;
			expression(0);
			State = 412;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEM() { return GetToken(ColorBasicParser.MEM, 0); }
		public MemfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterMemfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitMemfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemfuncContext memfunc() {
		MemfuncContext _localctx = new MemfuncContext(Context, State);
		EnterRule(_localctx, 54, RULE_memfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(MEM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USR() { return GetToken(ColorBasicParser.USR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_DIGIT() { return GetToken(ColorBasicParser.SINGLE_DIGIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public UsrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usrfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterUsrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitUsrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsrfuncContext usrfunc() {
		UsrfuncContext _localctx = new UsrfuncContext(Context, State);
		EnterRule(_localctx, 56, RULE_usrfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(USR);
			State = 417;
			Match(SINGLE_DIGIT);
			State = 418;
			Match(LPAREN);
			State = 419;
			expression(0);
			State = 420;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY() { return GetToken(ColorBasicParser.VARIABLE_NUMBER_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER() { return GetToken(ColorBasicParser.VARIABLE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ColorBasicParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext characterExpression() {
			return GetRuleContext<CharacterExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING_ARRAY() { return GetToken(ColorBasicParser.VARIABLE_STRING_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING() { return GetToken(ColorBasicParser.VARIABLE_STRING, 0); }
		public LetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetstmtContext letstmt() {
		LetstmtContext _localctx = new LetstmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_letstmt);
		int _la;
		try {
			State = 434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LET) {
					{
					State = 422;
					Match(LET);
					}
				}

				State = 425;
				_la = TokenStream.LA(1);
				if ( !(_la==VARIABLE_NUMBER || _la==VARIABLE_NUMBER_ARRAY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 426;
				Match(EQ);
				State = 427;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LET) {
					{
					State = 428;
					Match(LET);
					}
				}

				State = 431;
				_la = TokenStream.LA(1);
				if ( !(_la==VARIABLE_STRING || _la==VARIABLE_STRING_ARRAY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 432;
				Match(EQ);
				State = 433;
				characterExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIM() { return GetToken(ColorBasicParser.DIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		public DimstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterDimstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitDimstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimstmtContext dimstmt() {
		DimstmtContext _localctx = new DimstmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_dimstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			Match(DIM);
			State = 437;
			variableList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ColorBasicParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ColorBasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY() { return GetToken(ColorBasicParser.VARIABLE_NUMBER_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER() { return GetToken(ColorBasicParser.VARIABLE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(ColorBasicParser.STEP, 0); }
		public ForstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterForstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitForstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstmtContext forstmt() {
		ForstmtContext _localctx = new ForstmtContext(Context, State);
		EnterRule(_localctx, 62, RULE_forstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			Match(FOR);
			State = 440;
			_la = TokenStream.LA(1);
			if ( !(_la==VARIABLE_NUMBER || _la==VARIABLE_NUMBER_ARRAY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 441;
			Match(EQ);
			State = 442;
			expression(0);
			State = 443;
			Match(TO);
			State = 444;
			expression(0);
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 445;
				Match(STEP);
				State = 446;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(ColorBasicParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		public NextstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterNextstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitNextstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextstmtContext nextstmt() {
		NextstmtContext _localctx = new NextstmtContext(Context, State);
		EnterRule(_localctx, 64, RULE_nextstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(NEXT);
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (VARIABLE_NUMBER - 102)) | (1L << (VARIABLE_STRING - 102)) | (1L << (VARIABLE_NUMBER_ARRAY - 102)) | (1L << (VARIABLE_STRING_ARRAY - 102)))) != 0)) {
				{
				State = 450;
				variableList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfthenelsestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ColorBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ColorBasicParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ColorBasicParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(ColorBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(ColorBasicParser.DIGIT_SEQUENCE, i);
		}
		public IfthenelsestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifthenelsestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIfthenelsestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIfthenelsestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfthenelsestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfthenelsestmtContext ifthenelsestmt() {
		IfthenelsestmtContext _localctx = new IfthenelsestmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_ifthenelsestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(IF);
			State = 454;
			relationalExpression(0);
			State = 455;
			Match(THEN);
			State = 458;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case GOTO:
			case GOTO_NUM:
			case GOSUB:
			case GOSUB_NUM:
			case ON:
			case RETURN:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case VARIABLE_NUMBER:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING_ARRAY:
				{
				State = 456;
				statement();
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 457;
				Match(DIGIT_SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 460;
			Match(ELSE);
			State = 463;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case GOTO:
			case GOTO_NUM:
			case GOSUB:
			case GOSUB_NUM:
			case ON:
			case RETURN:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case VARIABLE_NUMBER:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING_ARRAY:
				{
				State = 461;
				statement();
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 462;
				Match(DIGIT_SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfthenelsenumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ColorBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ColorBasicParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_NUM() { return GetToken(ColorBasicParser.ELSE_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(ColorBasicParser.DIGIT_SEQUENCE, 0); }
		public IfthenelsenumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifthenelsenumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIfthenelsenumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIfthenelsenumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfthenelsenumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfthenelsenumstmtContext ifthenelsenumstmt() {
		IfthenelsenumstmtContext _localctx = new IfthenelsenumstmtContext(Context, State);
		EnterRule(_localctx, 68, RULE_ifthenelsenumstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(IF);
			State = 466;
			relationalExpression(0);
			State = 467;
			Match(THEN);
			State = 470;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case GOTO:
			case GOTO_NUM:
			case GOSUB:
			case GOSUB_NUM:
			case ON:
			case RETURN:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case VARIABLE_NUMBER:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING_ARRAY:
				{
				State = 468;
				statement();
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 469;
				Match(DIGIT_SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 472;
			Match(ELSE_NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfthenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ColorBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ColorBasicParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(ColorBasicParser.DIGIT_SEQUENCE, 0); }
		public IfthenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifthenstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIfthenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIfthenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfthenstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfthenstmtContext ifthenstmt() {
		IfthenstmtContext _localctx = new IfthenstmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_ifthenstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			Match(IF);
			State = 475;
			relationalExpression(0);
			State = 476;
			Match(THEN);
			State = 479;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case GOTO:
			case GOTO_NUM:
			case GOSUB:
			case GOSUB_NUM:
			case ON:
			case RETURN:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case VARIABLE_NUMBER:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING_ARRAY:
				{
				State = 477;
				statement();
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 478;
				Match(DIGIT_SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfnumelsenumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ColorBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_NUM_ELSE() { return GetToken(ColorBasicParser.THEN_NUM_ELSE, 0); }
		public IfnumelsenumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifnumelsenumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIfnumelsenumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIfnumelsenumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfnumelsenumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfnumelsenumstmtContext ifnumelsenumstmt() {
		IfnumelsenumstmtContext _localctx = new IfnumelsenumstmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_ifnumelsenumstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			Match(IF);
			State = 482;
			relationalExpression(0);
			{
			State = 483;
			Match(THEN_NUM_ELSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfnumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ColorBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_NUM() { return GetToken(ColorBasicParser.THEN_NUM, 0); }
		public IfnumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifnumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIfnumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIfnumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfnumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfnumstmtContext ifnumstmt() {
		IfnumstmtContext _localctx = new IfnumstmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_ifnumstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(IF);
			State = 486;
			relationalExpression(0);
			{
			State = 487;
			Match(THEN_NUM);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ColorBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(ColorBasicParser.DIGIT_SEQUENCE, 0); }
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 76, RULE_ifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(IF);
			State = 490;
			relationalExpression(0);
			State = 491;
			Match(DIGIT_SEQUENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotonumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO_NUM() { return GetToken(ColorBasicParser.GOTO_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_NUM() { return GetToken(ColorBasicParser.TO_NUM, 0); }
		public GotonumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotonumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterGotonumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitGotonumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotonumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotonumstmtContext gotonumstmt() {
		GotonumstmtContext _localctx = new GotonumstmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_gotonumstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GOTO_NUM:
				{
				State = 493;
				Match(GOTO_NUM);
				}
				break;
			case GO:
				{
				{
				State = 494;
				Match(GO);
				State = 495;
				Match(TO_NUM);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(ColorBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ColorBasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(ColorBasicParser.GOTO, 0); }
		public GotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotostmtContext gotostmt() {
		GotostmtContext _localctx = new GotostmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_gotostmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GO:
				{
				State = 498;
				Match(GO);
				State = 499;
				Match(TO);
				}
				break;
			case GOTO:
				{
				State = 500;
				Match(GOTO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 503;
			Match(DIGIT_SEQUENCE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubnumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOSUB_NUM() { return GetToken(ColorBasicParser.GOSUB_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_NUM() { return GetToken(ColorBasicParser.SUB_NUM, 0); }
		public GosubnumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubnumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterGosubnumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitGosubnumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGosubnumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GosubnumstmtContext gosubnumstmt() {
		GosubnumstmtContext _localctx = new GosubnumstmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_gosubnumstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GOSUB_NUM:
				{
				State = 505;
				Match(GOSUB_NUM);
				}
				break;
			case GO:
				{
				{
				State = 506;
				Match(GO);
				State = 507;
				Match(SUB_NUM);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(ColorBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ColorBasicParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOSUB() { return GetToken(ColorBasicParser.GOSUB, 0); }
		public GosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GosubstmtContext gosubstmt() {
		GosubstmtContext _localctx = new GosubstmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_gosubstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 513;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GO:
				{
				State = 510;
				Match(GO);
				State = 511;
				Match(SUB);
				}
				break;
			case GOSUB:
				{
				State = 512;
				Match(GOSUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 515;
			Match(DIGIT_SEQUENCE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngotonumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO_NUM() { return GetToken(ColorBasicParser.GOTO_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_NUM() { return GetToken(ColorBasicParser.TO_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(ColorBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(ColorBasicParser.DIGIT_SEQUENCE, i);
		}
		public OngotonumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongotonumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterOngotonumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitOngotonumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngotonumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngotonumstmtContext ongotonumstmt() {
		OngotonumstmtContext _localctx = new OngotonumstmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_ongotonumstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(ON);
			State = 518;
			expression(0);
			State = 522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GOTO_NUM:
				{
				State = 519;
				Match(GOTO_NUM);
				}
				break;
			case GO:
				{
				State = 520;
				Match(GO);
				State = 521;
				Match(TO_NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 524;
				Match(T__2);
				State = 525;
				Match(DIGIT_SEQUENCE);
				}
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(ColorBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(ColorBasicParser.DIGIT_SEQUENCE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ColorBasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(ColorBasicParser.GOTO, 0); }
		public OngotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterOngotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitOngotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngotostmtContext ongotostmt() {
		OngotostmtContext _localctx = new OngotostmtContext(Context, State);
		EnterRule(_localctx, 88, RULE_ongotostmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(ON);
			State = 532;
			expression(0);
			State = 536;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GO:
				{
				State = 533;
				Match(GO);
				State = 534;
				Match(TO);
				}
				break;
			case GOTO:
				{
				State = 535;
				Match(GOTO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 538;
			Match(DIGIT_SEQUENCE);
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 539;
				Match(T__2);
				State = 540;
				Match(DIGIT_SEQUENCE);
				}
				}
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngosubnumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOSUB_NUM() { return GetToken(ColorBasicParser.GOSUB_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_NUM() { return GetToken(ColorBasicParser.SUB_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(ColorBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(ColorBasicParser.DIGIT_SEQUENCE, i);
		}
		public OngosubnumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongosubnumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterOngosubnumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitOngosubnumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngosubnumstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngosubnumstmtContext ongosubnumstmt() {
		OngosubnumstmtContext _localctx = new OngosubnumstmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_ongosubnumstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			Match(ON);
			State = 547;
			expression(0);
			State = 551;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GOSUB_NUM:
				{
				State = 548;
				Match(GOSUB_NUM);
				}
				break;
			case GO:
				{
				State = 549;
				Match(GO);
				State = 550;
				Match(SUB_NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 553;
				Match(T__2);
				State = 554;
				Match(DIGIT_SEQUENCE);
				}
				}
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(ColorBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(ColorBasicParser.DIGIT_SEQUENCE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ColorBasicParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOSUB() { return GetToken(ColorBasicParser.GOSUB, 0); }
		public OngosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterOngosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitOngosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngosubstmtContext ongosubstmt() {
		OngosubstmtContext _localctx = new OngosubstmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_ongosubstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			Match(ON);
			State = 561;
			expression(0);
			State = 565;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GO:
				{
				State = 562;
				Match(GO);
				State = 563;
				Match(SUB);
				}
				break;
			case GOSUB:
				{
				State = 564;
				Match(GOSUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 567;
			Match(DIGIT_SEQUENCE);
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 568;
				Match(T__2);
				State = 569;
				Match(DIGIT_SEQUENCE);
				}
				}
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ColorBasicParser.RETURN, 0); }
		public ReturnstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterReturnstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitReturnstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstmtContext returnstmt() {
		ReturnstmtContext _localctx = new ReturnstmtContext(Context, State);
		EnterRule(_localctx, 94, RULE_returnstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(ColorBasicParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		public ReadstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterReadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitReadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadstmtContext readstmt() {
		ReadstmtContext _localctx = new ReadstmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_readstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(READ);
			State = 578;
			variableList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestorestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE() { return GetToken(ColorBasicParser.RESTORE, 0); }
		public RestorestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restorestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRestorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRestorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestorestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestorestmtContext restorestmt() {
		RestorestmtContext _localctx = new RestorestmtContext(Context, State);
		EnterRule(_localctx, 98, RULE_restorestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(RESTORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ColorBasicParser.NEW, 0); }
		public NewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterNewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitNewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewstmtContext newstmt() {
		NewstmtContext _localctx = new NewstmtContext(Context, State);
		EnterRule(_localctx, 100, RULE_newstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			Match(NEW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ColorBasicParser.END, 0); }
		public EndstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterEndstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitEndstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndstmtContext endstmt() {
		EndstmtContext _localctx = new EndstmtContext(Context, State);
		EnterRule(_localctx, 102, RULE_endstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(ColorBasicParser.STOP, 0); }
		public StopstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterStopstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitStopstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopstmtContext stopstmt() {
		StopstmtContext _localctx = new StopstmtContext(Context, State);
		EnterRule(_localctx, 104, RULE_stopstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RunstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUN() { return GetToken(ColorBasicParser.RUN, 0); }
		public RunstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRunstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRunstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRunstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RunstmtContext runstmt() {
		RunstmtContext _localctx = new RunstmtContext(Context, State);
		EnterRule(_localctx, 106, RULE_runstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			Match(RUN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClearstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLEAR() { return GetToken(ColorBasicParser.CLEAR, 0); }
		public ClearstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clearstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterClearstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitClearstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClearstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClearstmtContext clearstmt() {
		ClearstmtContext _localctx = new ClearstmtContext(Context, State);
		EnterRule(_localctx, 108, RULE_clearstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			Match(CLEAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONT() { return GetToken(ColorBasicParser.CONT, 0); }
		public ContstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterContstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitContstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContstmtContext contstmt() {
		ContstmtContext _localctx = new ContstmtContext(Context, State);
		EnterRule(_localctx, 110, RULE_contstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(CONT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(ColorBasicParser.LIST, 0); }
		public ListstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_liststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterListstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitListstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListstmtContext liststmt() {
		ListstmtContext _localctx = new ListstmtContext(Context, State);
		EnterRule(_localctx, 112, RULE_liststmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			Match(LIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LliststmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLIST() { return GetToken(ColorBasicParser.LLIST, 0); }
		public LliststmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lliststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLliststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLliststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLliststmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LliststmtContext lliststmt() {
		LliststmtContext _localctx = new LliststmtContext(Context, State);
		EnterRule(_localctx, 114, RULE_lliststmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(LLIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inputstmt1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(ColorBasicParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(ColorBasicParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_CASSETTE() { return GetToken(ColorBasicParser.DEVICE_CASSETTE, 0); }
		public Inputstmt1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputstmt1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterInputstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitInputstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputstmt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inputstmt1Context inputstmt1() {
		Inputstmt1Context _localctx = new Inputstmt1Context(Context, State);
		EnterRule(_localctx, 116, RULE_inputstmt1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			Match(INPUT);
			State = 604;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
				{
				{
				State = 599;
				Match(STRINGLITERAL);
				State = 600;
				Match(T__3);
				}
				}
				break;
			case T__4:
				{
				{
				State = 601;
				Match(T__4);
				State = 602;
				Match(DEVICE_CASSETTE);
				State = 603;
				Match(T__2);
				}
				}
				break;
			case VARIABLE_NUMBER:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING_ARRAY:
				break;
			default:
				break;
			}
			State = 606;
			variableList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ColorBasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext characterExpression() {
			return GetRuleContext<CharacterExpressionContext>(0);
		}
		public PrintstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPrintstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPrintstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintstmtContext printstmt() {
		PrintstmtContext _localctx = new PrintstmtContext(Context, State);
		EnterRule(_localctx, 118, RULE_printstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			Match(PRINT);
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (LPAREN - 87)) | (1L << (VARIABLE_NUMBER - 87)) | (1L << (VARIABLE_STRING - 87)) | (1L << (VARIABLE_NUMBER_ARRAY - 87)) | (1L << (VARIABLE_STRING_ARRAY - 87)) | (1L << (STRINGLITERAL - 87)))) != 0)) {
				{
				State = 609;
				characterExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrinttabstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ColorBasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(ColorBasicParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public PrinttabstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printtabstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPrinttabstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPrinttabstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrinttabstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrinttabstmtContext printtabstmt() {
		PrinttabstmtContext _localctx = new PrinttabstmtContext(Context, State);
		EnterRule(_localctx, 120, RULE_printtabstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			Match(PRINT);
			State = 613;
			Match(TAB);
			State = 614;
			Match(LPAREN);
			State = 615;
			expression(0);
			State = 616;
			Match(RPAREN);
			State = 617;
			Match(T__3);
			State = 618;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrinthashstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ColorBasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_CASSETTE() { return GetToken(ColorBasicParser.DEVICE_CASSETTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_PRINTER() { return GetToken(ColorBasicParser.DEVICE_PRINTER, 0); }
		public PrinthashstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printhashstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPrinthashstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPrinthashstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrinthashstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrinthashstmtContext printhashstmt() {
		PrinthashstmtContext _localctx = new PrinthashstmtContext(Context, State);
		EnterRule(_localctx, 122, RULE_printhashstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			Match(PRINT);
			State = 621;
			Match(T__4);
			State = 622;
			_la = TokenStream.LA(1);
			if ( !(_la==DEVICE_CASSETTE || _la==DEVICE_PRINTER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 623;
			Match(T__2);
			State = 624;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintatstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ColorBasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrintatstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printatstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPrintatstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPrintatstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintatstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintatstmtContext printatstmt() {
		PrintatstmtContext _localctx = new PrintatstmtContext(Context, State);
		EnterRule(_localctx, 124, RULE_printatstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			Match(PRINT);
			State = 627;
			Match(T__5);
			State = 628;
			expression(0);
			State = 629;
			Match(T__2);
			State = 630;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ColorBasicParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public SetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetstmtContext setstmt() {
		SetstmtContext _localctx = new SetstmtContext(Context, State);
		EnterRule(_localctx, 126, RULE_setstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			Match(SET);
			State = 633;
			Match(LPAREN);
			State = 634;
			expression(0);
			State = 635;
			Match(T__2);
			State = 636;
			expression(0);
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 637;
				Match(T__2);
				State = 638;
				expression(0);
				}
				}
				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__2 );
			State = 643;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(ColorBasicParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public ResetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterResetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitResetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetstmtContext resetstmt() {
		ResetstmtContext _localctx = new ResetstmtContext(Context, State);
		EnterRule(_localctx, 128, RULE_resetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			Match(RESET);
			State = 646;
			Match(LPAREN);
			State = 647;
			expression(0);
			State = 648;
			Match(T__2);
			State = 649;
			expression(0);
			State = 650;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLS() { return GetToken(ColorBasicParser.CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterClsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitClsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClsstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClsstmtContext clsstmt() {
		ClsstmtContext _localctx = new ClsstmtContext(Context, State);
		EnterRule(_localctx, 130, RULE_clsstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(CLS);
			State = 653;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXEC() { return GetToken(ColorBasicParser.EXEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExecstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterExecstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitExecstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecstmtContext execstmt() {
		ExecstmtContext _localctx = new ExecstmtContext(Context, State);
		EnterRule(_localctx, 132, RULE_execstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			Match(EXEC);
			State = 656;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PokestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POKE() { return GetToken(ColorBasicParser.POKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PokestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pokestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPokestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PokestmtContext pokestmt() {
		PokestmtContext _localctx = new PokestmtContext(Context, State);
		EnterRule(_localctx, 134, RULE_pokestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			Match(POKE);
			State = 659;
			expression(0);
			State = 660;
			Match(T__2);
			State = 661;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MotorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOTOR() { return GetToken(ColorBasicParser.MOTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(ColorBasicParser.OFF, 0); }
		public MotorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_motorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterMotorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitMotorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMotorstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MotorstmtContext motorstmt() {
		MotorstmtContext _localctx = new MotorstmtContext(Context, State);
		EnterRule(_localctx, 136, RULE_motorstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(MOTOR);
			State = 664;
			_la = TokenStream.LA(1);
			if ( !(_la==ON || _la==OFF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AudiostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIO() { return GetToken(ColorBasicParser.AUDIO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(ColorBasicParser.OFF, 0); }
		public AudiostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audiostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterAudiostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitAudiostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAudiostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AudiostmtContext audiostmt() {
		AudiostmtContext _localctx = new AudiostmtContext(Context, State);
		EnterRule(_localctx, 138, RULE_audiostmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			Match(AUDIO);
			State = 667;
			_la = TokenStream.LA(1);
			if ( !(_la==ON || _la==OFF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoundstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUND() { return GetToken(ColorBasicParser.SOUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SoundstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soundstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSoundstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSoundstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoundstmtContext soundstmt() {
		SoundstmtContext _localctx = new SoundstmtContext(Context, State);
		EnterRule(_localctx, 140, RULE_soundstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			Match(SOUND);
			State = 670;
			expression(0);
			State = 671;
			Match(T__2);
			State = 672;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloadstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOAD() { return GetToken(ColorBasicParser.CLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CloadstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cloadstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCloadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCloadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloadstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloadstmtContext cloadstmt() {
		CloadstmtContext _localctx = new CloadstmtContext(Context, State);
		EnterRule(_localctx, 142, RULE_cloadstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			Match(CLOAD);
			State = 675;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloadmstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOAD() { return GetToken(ColorBasicParser.CLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CloadmstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cloadmstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCloadmstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCloadmstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloadmstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloadmstmtContext cloadmstmt() {
		CloadmstmtContext _localctx = new CloadmstmtContext(Context, State);
		EnterRule(_localctx, 144, RULE_cloadmstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			Match(CLOAD);
			State = 678;
			expression(0);
			State = 679;
			Match(T__2);
			State = 680;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsavestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSAVE() { return GetToken(ColorBasicParser.CSAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CsavestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csavestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCsavestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCsavestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsavestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsavestmtContext csavestmt() {
		CsavestmtContext _localctx = new CsavestmtContext(Context, State);
		EnterRule(_localctx, 146, RULE_csavestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			Match(CSAVE);
			State = 683;
			expression(0);
			State = 684;
			Match(T__2);
			State = 685;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsavemstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSAVEM() { return GetToken(ColorBasicParser.CSAVEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CsavemstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csavemstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCsavemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCsavemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsavemstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsavemstmtContext csavemstmt() {
		CsavemstmtContext _localctx = new CsavemstmtContext(Context, State);
		EnterRule(_localctx, 148, RULE_csavemstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			Match(CSAVEM);
			State = 688;
			expression(0);
			State = 689;
			Match(T__2);
			State = 690;
			expression(0);
			State = 691;
			Match(T__2);
			State = 692;
			expression(0);
			State = 693;
			Match(T__2);
			State = 694;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipfstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIPF() { return GetToken(ColorBasicParser.SKIPF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SkipfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipfstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSkipfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSkipfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipfstmtContext skipfstmt() {
		SkipfstmtContext _localctx = new SkipfstmtContext(Context, State);
		EnterRule(_localctx, 150, RULE_skipfstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			Match(SKIPF);
			State = 697;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(ColorBasicParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_KEYBOARD() { return GetToken(ColorBasicParser.DEVICE_KEYBOARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_CASSETTE() { return GetToken(ColorBasicParser.DEVICE_CASSETTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_PRINTER() { return GetToken(ColorBasicParser.DEVICE_PRINTER, 0); }
		public OpenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterOpenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitOpenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenstmtContext openstmt() {
		OpenstmtContext _localctx = new OpenstmtContext(Context, State);
		EnterRule(_localctx, 152, RULE_openstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			Match(OPEN);
			State = 700;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 701;
			Match(T__2);
			State = 702;
			Match(T__4);
			State = 703;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (DEVICE_KEYBOARD - 83)) | (1L << (DEVICE_CASSETTE - 83)) | (1L << (DEVICE_PRINTER - 83)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 704;
			Match(T__2);
			State = 705;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(ColorBasicParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_CASSETTE() { return GetToken(ColorBasicParser.DEVICE_CASSETTE, 0); }
		public ClosestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterClosestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitClosestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosestmtContext closestmt() {
		ClosestmtContext _localctx = new ClosestmtContext(Context, State);
		EnterRule(_localctx, 154, RULE_closestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707;
			Match(CLOSE);
			State = 708;
			Match(T__4);
			State = 710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEVICE_CASSETTE) {
				{
				State = 709;
				Match(DEVICE_CASSETTE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 4: return characterExpression_sempred((CharacterExpressionContext)_localctx, predIndex);
		case 5: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		}
		return true;
	}
	private bool characterExpression_sempred(CharacterExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 7);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'r', '\x2CB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x3', '\x2', '\x6', '\x2', '\xA0', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\xA1', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\xA9', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\xAE', '\n', 
		'\x3', '\a', '\x3', '\xB0', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xB3', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\xE9', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\xF6', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x101', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x104', '\v', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x110', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x115', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x118', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x129', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x12F', 
		'\n', '\a', '\f', '\a', '\xE', '\a', '\x132', '\v', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', '\x13B', '\n', '\n', '\f', '\n', '\xE', '\n', '\x13E', 
		'\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1F', '\x5', '\x1F', '\x1AA', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1B0', '\n', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1B5', '\n', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', 
		'\x1C2', '\n', '!', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x1C6', '\n', 
		'\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x1CD', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', 
		'\x1D2', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x5', '$', '\x1D9', '\n', '$', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x1E2', '\n', 
		'%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x1F3', '\n', ')', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x1F8', '\n', '*', '\x3', 
		'*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x1FF', 
		'\n', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x204', '\n', 
		',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x5', '-', '\x20D', '\n', '-', '\x3', '-', '\x3', '-', 
		'\a', '-', '\x211', '\n', '-', '\f', '-', '\xE', '-', '\x214', '\v', '-', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', 
		'\x21B', '\n', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\a', '.', '\x220', 
		'\n', '.', '\f', '.', '\xE', '.', '\x223', '\v', '.', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x22A', '\n', '/', 
		'\x3', '/', '\x3', '/', '\a', '/', '\x22E', '\n', '/', '\f', '/', '\xE', 
		'/', '\x231', '\v', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x238', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x23D', '\n', '\x30', 
		'\f', '\x30', '\xE', '\x30', '\x240', '\v', '\x30', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ';', 
		'\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\x5', '<', '\x25F', '\n', '<', '\x3', '<', '\x3', '<', '\x3', 
		'=', '\x3', '=', '\x5', '=', '\x265', '\n', '=', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x6', '\x41', '\x282', '\n', '\x41', '\r', 
		'\x41', '\xE', '\x41', '\x283', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', 
		'\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', 
		'\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x5', 'O', '\x2C9', '\n', 'O', '\x3', 'O', '\x2', 
		'\x5', '\b', '\n', '\f', 'P', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 
		'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', 
		'\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', 
		'\x98', '\x9A', '\x9C', '\x2', '\xE', '\x3', '\x3', 'r', 'r', '\x3', '\x2', 
		'\x64', '\x65', '\x3', '\x2', '\x66', 'g', '\x3', '\x2', '^', '\x63', 
		'\x3', '\x2', '[', '\\', '\x3', '\x2', 'h', 'k', '\x4', '\x2', 'h', 'h', 
		'j', 'j', '\x4', '\x2', 'i', 'i', 'k', 'k', '\x3', '\x2', 'V', 'W', '\x3', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\t', '\n', '\x3', '\x2', 'U', 'W', 
		'\x2', '\x2DE', '\x2', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x4', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\xF5', '\x3', '\x2', '\x2', '\x2', '\n', '\x10F', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x128', '\x3', '\x2', '\x2', '\x2', '\xE', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x137', '\x3', '\x2', '\x2', '\x2', '\x14', '\x13F', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x144', '\x3', '\x2', '\x2', '\x2', '\x18', '\x149', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x153', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x158', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x15D', '\x3', '\x2', '\x2', '\x2', '\"', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x16C', '\x3', '\x2', '\x2', '\x2', '(', '\x175', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x17C', '\x3', '\x2', '\x2', '\x2', ',', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x32', '\x18F', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x194', '\x3', '\x2', '\x2', '\x2', '\x36', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x1A0', '\x3', '\x2', '\x2', '\x2', 
		':', '\x1A2', '\x3', '\x2', '\x2', '\x2', '<', '\x1B4', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1B6', '\x3', '\x2', '\x2', '\x2', '@', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1D3', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1DC', '\x3', '\x2', '\x2', '\x2', 'J', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x1EB', '\x3', '\x2', '\x2', '\x2', 'P', '\x1F2', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x1F7', '\x3', '\x2', '\x2', '\x2', 'T', '\x1FE', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x203', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x207', '\x3', '\x2', '\x2', '\x2', 'Z', '\x215', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x224', '\x3', '\x2', '\x2', '\x2', '^', '\x232', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x241', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x243', '\x3', '\x2', '\x2', '\x2', '\x64', '\x246', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x248', '\x3', '\x2', '\x2', '\x2', 'h', '\x24A', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x24E', '\x3', '\x2', '\x2', '\x2', 'n', '\x250', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x252', '\x3', '\x2', '\x2', '\x2', 'r', '\x254', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x256', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x258', '\x3', '\x2', '\x2', '\x2', 'x', '\x262', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x266', '\x3', '\x2', '\x2', '\x2', '|', '\x26E', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x274', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x82', '\x287', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x86', '\x291', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x294', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x299', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x29C', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x90', '\x2A4', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x2A7', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x2AC', '\x3', '\x2', '\x2', '\x2', '\x96', '\x2B1', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x2BD', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x2C5', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\xA0', '\x5', '\x4', '\x3', '\x2', '\x9F', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x2', 
		'\x2', '\x3', '\xA4', '\x3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA8', 
		'\a', 'S', '\x2', '\x2', '\xA6', '\xA9', '\x5', '\x6', '\x4', '\x2', '\xA7', 
		'\xA9', '\a', 'p', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAD', '\a', '\x3', '\x2', '\x2', '\xAB', 
		'\xAE', '\x5', '\x6', '\x4', '\x2', '\xAC', '\xAE', '\a', 'p', '\x2', 
		'\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\t', '\x2', '\x2', 
		'\x2', '\xB5', '\x5', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xE9', '\x5', 
		'<', '\x1F', '\x2', '\xB7', '\xE9', '\x5', '`', '\x31', '\x2', '\xB8', 
		'\xE9', '\x5', '\x64', '\x33', '\x2', '\xB9', '\xE9', '\x5', 'x', '=', 
		'\x2', '\xBA', '\xE9', '\x5', '\x42', '\"', '\x2', '\xBB', '\xE9', '\x5', 
		'\x88', '\x45', '\x2', '\xBC', '\xE9', '\x5', '\x44', '#', '\x2', '\xBD', 
		'\xE9', '\x5', '\x46', '$', '\x2', '\xBE', '\xE9', '\x5', 'H', '%', '\x2', 
		'\xBF', '\xE9', '\x5', 'J', '&', '\x2', '\xC0', '\xE9', '\x5', 'L', '\'', 
		'\x2', '\xC1', '\xE9', '\x5', 'N', '(', '\x2', '\xC2', '\xE9', '\x5', 
		'@', '!', '\x2', '\xC3', '\xE9', '\x5', 'v', '<', '\x2', '\xC4', '\xE9', 
		'\x5', '>', ' ', '\x2', '\xC5', '\xE9', '\x5', 'P', ')', '\x2', '\xC6', 
		'\xE9', '\x5', 'R', '*', '\x2', '\xC7', '\xE9', '\x5', 'T', '+', '\x2', 
		'\xC8', '\xE9', '\x5', 'V', ',', '\x2', '\xC9', '\xE9', '\x5', 'X', '-', 
		'\x2', '\xCA', '\xE9', '\x5', 'Z', '.', '\x2', '\xCB', '\xE9', '\x5', 
		'\\', '/', '\x2', '\xCC', '\xE9', '\x5', '^', '\x30', '\x2', '\xCD', '\xE9', 
		'\x5', '\x62', '\x32', '\x2', '\xCE', '\xE9', '\x5', 'x', '=', '\x2', 
		'\xCF', '\xE9', '\x5', 'z', '>', '\x2', '\xD0', '\xE9', '\x5', '|', '?', 
		'\x2', '\xD1', '\xE9', '\x5', '~', '@', '\x2', '\xD2', '\xE9', '\x5', 
		'\x66', '\x34', '\x2', '\xD3', '\xE9', '\x5', 'j', '\x36', '\x2', '\xD4', 
		'\xE9', '\x5', 'h', '\x35', '\x2', '\xD5', '\xE9', '\x5', 'l', '\x37', 
		'\x2', '\xD6', '\xE9', '\x5', 'n', '\x38', '\x2', '\xD7', '\xE9', '\x5', 
		'p', '\x39', '\x2', '\xD8', '\xE9', '\x5', 'r', ':', '\x2', '\xD9', '\xE9', 
		'\x5', 't', ';', '\x2', '\xDA', '\xE9', '\x5', '\x80', '\x41', '\x2', 
		'\xDB', '\xE9', '\x5', '\x82', '\x42', '\x2', '\xDC', '\xE9', '\x5', '\x84', 
		'\x43', '\x2', '\xDD', '\xE9', '\x5', '\x86', '\x44', '\x2', '\xDE', '\xE9', 
		'\x5', '\x8A', '\x46', '\x2', '\xDF', '\xE9', '\x5', '\x8C', 'G', '\x2', 
		'\xE0', '\xE9', '\x5', '\x8E', 'H', '\x2', '\xE1', '\xE9', '\x5', '\x90', 
		'I', '\x2', '\xE2', '\xE9', '\x5', '\x92', 'J', '\x2', '\xE3', '\xE9', 
		'\x5', '\x94', 'K', '\x2', '\xE4', '\xE9', '\x5', '\x96', 'L', '\x2', 
		'\xE5', '\xE9', '\x5', '\x98', 'M', '\x2', '\xE6', '\xE9', '\x5', '\x9A', 
		'N', '\x2', '\xE7', '\xE9', '\x5', '\x9C', 'O', '\x2', '\xE8', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xD0', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\b', '\x5', '\x1', '\x2', 
		'\xEB', '\xEC', '\t', '\x3', '\x2', '\x2', '\xEC', '\xF6', '\x5', '\b', 
		'\x5', '\x2', '\xED', '\xF6', '\a', 'j', '\x2', '\x2', '\xEE', '\xF6', 
		'\a', 'h', '\x2', '\x2', '\xEF', '\xF6', '\a', 'S', '\x2', '\x2', '\xF0', 
		'\xF6', '\a', 'o', '\x2', '\x2', '\xF1', '\xF2', '\a', 'Y', '\x2', '\x2', 
		'\xF2', '\xF3', '\x5', '\b', '\x5', '\x2', '\xF3', '\xF4', '\a', 'Z', 
		'\x2', '\x2', '\xF4', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xF8', '\f', '\v', '\x2', '\x2', '\xF8', '\xF9', '\t', '\x4', 
		'\x2', '\x2', '\xF9', '\x101', '\x5', '\b', '\x5', '\f', '\xFA', '\xFB', 
		'\f', '\n', '\x2', '\x2', '\xFB', '\xFC', '\t', '\x3', '\x2', '\x2', '\xFC', 
		'\x101', '\x5', '\b', '\x5', '\v', '\xFD', '\xFE', '\f', '\t', '\x2', 
		'\x2', '\xFE', '\xFF', '\a', '\x4', '\x2', '\x2', '\xFF', '\x101', '\x5', 
		'\b', '\x5', '\x2', '\x100', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\x104', '\x3', '\x2', '\x2', '\x2', '\x102', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\t', '\x3', '\x2', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', 
		'\x2', '\x2', '\x105', '\x106', '\b', '\x6', '\x1', '\x2', '\x106', '\x110', 
		'\a', 'k', '\x2', '\x2', '\x107', '\x110', '\a', 'i', '\x2', '\x2', '\x108', 
		'\x110', '\a', 'j', '\x2', '\x2', '\x109', '\x110', '\a', 'h', '\x2', 
		'\x2', '\x10A', '\x110', '\a', 'n', '\x2', '\x2', '\x10B', '\x10C', '\a', 
		'Y', '\x2', '\x2', '\x10C', '\x10D', '\x5', '\n', '\x6', '\x2', '\x10D', 
		'\x10E', '\a', 'Z', '\x2', '\x2', '\x10E', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x105', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\f', '\t', '\x2', 
		'\x2', '\x112', '\x113', '\a', '\x64', '\x2', '\x2', '\x113', '\x115', 
		'\x5', '\n', '\x6', '\n', '\x114', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x118', '\x3', '\x2', '\x2', '\x2', '\x116', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11A', '\b', '\a', '\x1', '\x2', '\x11A', '\x11B', '\a', 
		']', '\x2', '\x2', '\x11B', '\x129', '\x5', '\f', '\a', '\x2', '\x11C', 
		'\x11D', '\x5', '\b', '\x5', '\x2', '\x11D', '\x11E', '\x5', '\xE', '\b', 
		'\x2', '\x11E', '\x11F', '\x5', '\b', '\x5', '\x2', '\x11F', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x5', '\n', '\x6', '\x2', 
		'\x121', '\x122', '\x5', '\xE', '\b', '\x2', '\x122', '\x123', '\x5', 
		'\n', '\x6', '\x2', '\x123', '\x129', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x125', '\a', 'Y', '\x2', '\x2', '\x125', '\x126', '\x5', '\f', '\a', 
		'\x2', '\x126', '\x127', '\a', 'Z', '\x2', '\x2', '\x127', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x119', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x128', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x124', '\x3', '\x2', '\x2', '\x2', '\x129', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\f', '\a', '\x2', '\x2', 
		'\x12B', '\x12C', '\x5', '\x10', '\t', '\x2', '\x12C', '\x12D', '\x5', 
		'\f', '\a', '\b', '\x12D', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x130', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\t', 
		'\x5', '\x2', '\x2', '\x134', '\xF', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x136', '\t', '\x6', '\x2', '\x2', '\x136', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x13C', '\t', '\a', '\x2', '\x2', '\x138', '\x139', '\a', 
		'\x5', '\x2', '\x2', '\x139', '\x13B', '\t', '\a', '\x2', '\x2', '\x13A', 
		'\x138', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\a', 
		'\r', '\x2', '\x2', '\x140', '\x141', '\a', 'Y', '\x2', '\x2', '\x141', 
		'\x142', '\x5', '\b', '\x5', '\x2', '\x142', '\x143', '\a', 'Z', '\x2', 
		'\x2', '\x143', '\x15', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', 
		'\a', '\xE', '\x2', '\x2', '\x145', '\x146', '\a', 'Y', '\x2', '\x2', 
		'\x146', '\x147', '\x5', '\b', '\x5', '\x2', '\x147', '\x148', '\a', 'Z', 
		'\x2', '\x2', '\x148', '\x17', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', 
		'\a', '\xF', '\x2', '\x2', '\x14A', '\x14B', '\a', 'Y', '\x2', '\x2', 
		'\x14B', '\x14C', '\x5', '\b', '\x5', '\x2', '\x14C', '\x14D', '\a', 'Z', 
		'\x2', '\x2', '\x14D', '\x19', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', 
		'\a', '\x10', '\x2', '\x2', '\x14F', '\x150', '\a', 'Y', '\x2', '\x2', 
		'\x150', '\x151', '\x5', '\b', '\x5', '\x2', '\x151', '\x152', '\a', 'Z', 
		'\x2', '\x2', '\x152', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', 
		'\a', '\x11', '\x2', '\x2', '\x154', '\x155', '\a', 'Y', '\x2', '\x2', 
		'\x155', '\x156', '\x5', '\b', '\x5', '\x2', '\x156', '\x157', '\a', 'Z', 
		'\x2', '\x2', '\x157', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', 
		'\a', '\x12', '\x2', '\x2', '\x159', '\x15A', '\a', 'Y', '\x2', '\x2', 
		'\x15A', '\x15B', '\x5', '\b', '\x5', '\x2', '\x15B', '\x15C', '\a', 'Z', 
		'\x2', '\x2', '\x15C', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', 
		'\a', '\x13', '\x2', '\x2', '\x15E', '\x15F', '\a', 'Y', '\x2', '\x2', 
		'\x15F', '\x160', '\x5', '\b', '\x5', '\x2', '\x160', '\x161', '\a', 'Z', 
		'\x2', '\x2', '\x161', '!', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', 
		'\a', '\x14', '\x2', '\x2', '\x163', '\x164', '\a', 'Y', '\x2', '\x2', 
		'\x164', '\x165', '\x5', '\b', '\x5', '\x2', '\x165', '\x166', '\a', 'Z', 
		'\x2', '\x2', '\x166', '#', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', 
		'\a', '\x15', '\x2', '\x2', '\x168', '\x169', '\a', 'Y', '\x2', '\x2', 
		'\x169', '\x16A', '\x5', '\b', '\x5', '\x2', '\x16A', '\x16B', '\a', 'Z', 
		'\x2', '\x2', '\x16B', '%', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', 
		'\a', '\x16', '\x2', '\x2', '\x16D', '\x16E', '\a', 'Y', '\x2', '\x2', 
		'\x16E', '\x16F', '\x5', '\b', '\x5', '\x2', '\x16F', '\x170', '\a', '\x5', 
		'\x2', '\x2', '\x170', '\x171', '\x5', '\b', '\x5', '\x2', '\x171', '\x172', 
		'\a', '\x5', '\x2', '\x2', '\x172', '\x173', '\x5', '\b', '\x5', '\x2', 
		'\x173', '\x174', '\a', 'Z', '\x2', '\x2', '\x174', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x175', '\x176', '\a', '\x17', '\x2', '\x2', '\x176', '\x177', 
		'\a', 'Y', '\x2', '\x2', '\x177', '\x178', '\x5', '\b', '\x5', '\x2', 
		'\x178', '\x179', '\a', '\x5', '\x2', '\x2', '\x179', '\x17A', '\x5', 
		'\b', '\x5', '\x2', '\x17A', '\x17B', '\a', 'Z', '\x2', '\x2', '\x17B', 
		')', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\a', '\x18', '\x2', 
		'\x2', '\x17D', '\x17E', '\a', 'Y', '\x2', '\x2', '\x17E', '\x17F', '\x5', 
		'\b', '\x5', '\x2', '\x17F', '\x180', '\a', '\x5', '\x2', '\x2', '\x180', 
		'\x181', '\x5', '\b', '\x5', '\x2', '\x181', '\x182', '\a', 'Z', '\x2', 
		'\x2', '\x182', '+', '\x3', '\x2', '\x2', '\x2', '\x183', '\x184', '\a', 
		'\x19', '\x2', '\x2', '\x184', '\x185', '\a', 'Y', '\x2', '\x2', '\x185', 
		'\x186', '\x5', '\b', '\x5', '\x2', '\x186', '\x187', '\a', 'Z', '\x2', 
		'\x2', '\x187', '-', '\x3', '\x2', '\x2', '\x2', '\x188', '\x189', '\a', 
		'\x1A', '\x2', '\x2', '\x189', '/', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x18B', '\a', '\x1B', '\x2', '\x2', '\x18B', '\x18C', '\a', 'Y', '\x2', 
		'\x2', '\x18C', '\x18D', '\x5', '\b', '\x5', '\x2', '\x18D', '\x18E', 
		'\a', 'Z', '\x2', '\x2', '\x18E', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x190', '\a', '\x1C', '\x2', '\x2', '\x190', '\x191', '\a', 
		'Y', '\x2', '\x2', '\x191', '\x192', '\x5', '\b', '\x5', '\x2', '\x192', 
		'\x193', '\a', 'Z', '\x2', '\x2', '\x193', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x194', '\x195', '\a', '\x1D', '\x2', '\x2', '\x195', '\x196', 
		'\a', 'Y', '\x2', '\x2', '\x196', '\x197', '\x5', '\b', '\x5', '\x2', 
		'\x197', '\x198', '\a', 'Z', '\x2', '\x2', '\x198', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x199', '\x19A', '\a', '\x1E', '\x2', '\x2', '\x19A', '\x19B', 
		'\a', 'Y', '\x2', '\x2', '\x19B', '\x19C', '\x5', '\b', '\x5', '\x2', 
		'\x19C', '\x19D', '\a', '\x5', '\x2', '\x2', '\x19D', '\x19E', '\x5', 
		'\b', '\x5', '\x2', '\x19E', '\x19F', '\a', 'Z', '\x2', '\x2', '\x19F', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\a', '\x1F', '\x2', 
		'\x2', '\x1A1', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\a', ' ', '\x2', '\x2', '\x1A3', '\x1A4', '\a', 'T', '\x2', '\x2', '\x1A4', 
		'\x1A5', '\a', 'Y', '\x2', '\x2', '\x1A5', '\x1A6', '\x5', '\b', '\x5', 
		'\x2', '\x1A6', '\x1A7', '\a', 'Z', '\x2', '\x2', '\x1A7', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x1AA', '\a', '\v', '\x2', '\x2', '\x1A9', 
		'\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', 
		'\t', '\b', '\x2', '\x2', '\x1AC', '\x1AD', '\a', '^', '\x2', '\x2', '\x1AD', 
		'\x1B5', '\x5', '\b', '\x5', '\x2', '\x1AE', '\x1B0', '\a', '\v', '\x2', 
		'\x2', '\x1AF', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', 
		'\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B1', '\x1B2', '\t', '\t', '\x2', '\x2', '\x1B2', '\x1B3', '\a', '^', 
		'\x2', '\x2', '\x1B3', '\x1B5', '\x5', '\n', '\x6', '\x2', '\x1B4', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '=', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\a', '\f', 
		'\x2', '\x2', '\x1B7', '\x1B8', '\x5', '\x12', '\n', '\x2', '\x1B8', '?', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\a', '!', '\x2', '\x2', 
		'\x1BA', '\x1BB', '\t', '\b', '\x2', '\x2', '\x1BB', '\x1BC', '\a', '^', 
		'\x2', '\x2', '\x1BC', '\x1BD', '\x5', '\b', '\x5', '\x2', '\x1BD', '\x1BE', 
		'\a', '\"', '\x2', '\x2', '\x1BE', '\x1C1', '\x5', '\b', '\x5', '\x2', 
		'\x1BF', '\x1C0', '\a', '#', '\x2', '\x2', '\x1C0', '\x1C2', '\x5', '\b', 
		'\x5', '\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1C5', '\a', '$', '\x2', '\x2', '\x1C4', '\x1C6', '\x5', '\x12', 
		'\n', '\x2', '\x1C5', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C6', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x1C7', '\x1C8', '\a', '%', '\x2', '\x2', '\x1C8', '\x1C9', '\x5', '\f', 
		'\a', '\x2', '\x1C9', '\x1CC', '\a', '&', '\x2', '\x2', '\x1CA', '\x1CD', 
		'\x5', '\x6', '\x4', '\x2', '\x1CB', '\x1CD', '\a', 'S', '\x2', '\x2', 
		'\x1CC', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CB', '\x3', 
		'\x2', '\x2', '\x2', '\x1CD', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1CE', 
		'\x1D1', '\a', ')', '\x2', '\x2', '\x1CF', '\x1D2', '\x5', '\x6', '\x4', 
		'\x2', '\x1D0', '\x1D2', '\a', 'S', '\x2', '\x2', '\x1D1', '\x1CF', '\x3', 
		'\x2', '\x2', '\x2', '\x1D1', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D2', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\a', '%', '\x2', 
		'\x2', '\x1D4', '\x1D5', '\x5', '\f', '\a', '\x2', '\x1D5', '\x1D8', '\a', 
		'&', '\x2', '\x2', '\x1D6', '\x1D9', '\x5', '\x6', '\x4', '\x2', '\x1D7', 
		'\x1D9', '\a', 'S', '\x2', '\x2', '\x1D8', '\x1D6', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DB', '\a', '*', '\x2', '\x2', 
		'\x1DB', 'G', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', '\a', '%', 
		'\x2', '\x2', '\x1DD', '\x1DE', '\x5', '\f', '\a', '\x2', '\x1DE', '\x1E1', 
		'\a', '&', '\x2', '\x2', '\x1DF', '\x1E2', '\x5', '\x6', '\x4', '\x2', 
		'\x1E0', '\x1E2', '\a', 'S', '\x2', '\x2', '\x1E1', '\x1DF', '\x3', '\x2', 
		'\x2', '\x2', '\x1E1', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E2', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\a', '%', '\x2', '\x2', 
		'\x1E4', '\x1E5', '\x5', '\f', '\a', '\x2', '\x1E5', '\x1E6', '\a', '(', 
		'\x2', '\x2', '\x1E6', 'K', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', 
		'\a', '%', '\x2', '\x2', '\x1E8', '\x1E9', '\x5', '\f', '\a', '\x2', '\x1E9', 
		'\x1EA', '\a', '\'', '\x2', '\x2', '\x1EA', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x1EB', '\x1EC', '\a', '%', '\x2', '\x2', '\x1EC', '\x1ED', '\x5', 
		'\f', '\a', '\x2', '\x1ED', '\x1EE', '\a', 'S', '\x2', '\x2', '\x1EE', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F3', '\a', '-', '\x2', '\x2', 
		'\x1F0', '\x1F1', '\a', '+', '\x2', '\x2', '\x1F1', '\x1F3', '\a', '.', 
		'\x2', '\x2', '\x1F2', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '\x1F3', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x1F5', '\a', '+', '\x2', '\x2', '\x1F5', '\x1F8', '\a', '\"', 
		'\x2', '\x2', '\x1F6', '\x1F8', '\a', ',', '\x2', '\x2', '\x1F7', '\x1F4', 
		'\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F6', '\x3', '\x2', '\x2', '\x2', 
		'\x1F8', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\a', 
		'S', '\x2', '\x2', '\x1FA', 'S', '\x3', '\x2', '\x2', '\x2', '\x1FB', 
		'\x1FF', '\a', '\x30', '\x2', '\x2', '\x1FC', '\x1FD', '\a', '+', '\x2', 
		'\x2', '\x1FD', '\x1FF', '\a', '\x32', '\x2', '\x2', '\x1FE', '\x1FB', 
		'\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FC', '\x3', '\x2', '\x2', '\x2', 
		'\x1FF', 'U', '\x3', '\x2', '\x2', '\x2', '\x200', '\x201', '\a', '+', 
		'\x2', '\x2', '\x201', '\x204', '\a', '\x31', '\x2', '\x2', '\x202', '\x204', 
		'\a', '/', '\x2', '\x2', '\x203', '\x200', '\x3', '\x2', '\x2', '\x2', 
		'\x203', '\x202', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\x3', 
		'\x2', '\x2', '\x2', '\x205', '\x206', '\a', 'S', '\x2', '\x2', '\x206', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x207', '\x208', '\a', '\x33', '\x2', 
		'\x2', '\x208', '\x20C', '\x5', '\b', '\x5', '\x2', '\x209', '\x20D', 
		'\a', '-', '\x2', '\x2', '\x20A', '\x20B', '\a', '+', '\x2', '\x2', '\x20B', 
		'\x20D', '\a', '.', '\x2', '\x2', '\x20C', '\x209', '\x3', '\x2', '\x2', 
		'\x2', '\x20C', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x212', 
		'\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', '\a', '\x5', '\x2', '\x2', 
		'\x20F', '\x211', '\a', 'S', '\x2', '\x2', '\x210', '\x20E', '\x3', '\x2', 
		'\x2', '\x2', '\x211', '\x214', '\x3', '\x2', '\x2', '\x2', '\x212', '\x210', 
		'\x3', '\x2', '\x2', '\x2', '\x212', '\x213', '\x3', '\x2', '\x2', '\x2', 
		'\x213', 'Y', '\x3', '\x2', '\x2', '\x2', '\x214', '\x212', '\x3', '\x2', 
		'\x2', '\x2', '\x215', '\x216', '\a', '\x33', '\x2', '\x2', '\x216', '\x21A', 
		'\x5', '\b', '\x5', '\x2', '\x217', '\x218', '\a', '+', '\x2', '\x2', 
		'\x218', '\x21B', '\a', '\"', '\x2', '\x2', '\x219', '\x21B', '\a', ',', 
		'\x2', '\x2', '\x21A', '\x217', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x219', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x21C', '\x221', '\a', 'S', '\x2', '\x2', '\x21D', '\x21E', '\a', '\x5', 
		'\x2', '\x2', '\x21E', '\x220', '\a', 'S', '\x2', '\x2', '\x21F', '\x21D', 
		'\x3', '\x2', '\x2', '\x2', '\x220', '\x223', '\x3', '\x2', '\x2', '\x2', 
		'\x221', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\x3', 
		'\x2', '\x2', '\x2', '\x222', '[', '\x3', '\x2', '\x2', '\x2', '\x223', 
		'\x221', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\a', '\x33', '\x2', 
		'\x2', '\x225', '\x229', '\x5', '\b', '\x5', '\x2', '\x226', '\x22A', 
		'\a', '\x30', '\x2', '\x2', '\x227', '\x228', '\a', '+', '\x2', '\x2', 
		'\x228', '\x22A', '\a', '\x32', '\x2', '\x2', '\x229', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x229', '\x227', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x22F', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', '\a', '\x5', '\x2', 
		'\x2', '\x22C', '\x22E', '\a', 'S', '\x2', '\x2', '\x22D', '\x22B', '\x3', 
		'\x2', '\x2', '\x2', '\x22E', '\x231', '\x3', '\x2', '\x2', '\x2', '\x22F', 
		'\x22D', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\x3', '\x2', '\x2', 
		'\x2', '\x230', ']', '\x3', '\x2', '\x2', '\x2', '\x231', '\x22F', '\x3', 
		'\x2', '\x2', '\x2', '\x232', '\x233', '\a', '\x33', '\x2', '\x2', '\x233', 
		'\x237', '\x5', '\b', '\x5', '\x2', '\x234', '\x235', '\a', '+', '\x2', 
		'\x2', '\x235', '\x238', '\a', '\x31', '\x2', '\x2', '\x236', '\x238', 
		'\a', '/', '\x2', '\x2', '\x237', '\x234', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x236', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\x3', 
		'\x2', '\x2', '\x2', '\x239', '\x23E', '\a', 'S', '\x2', '\x2', '\x23A', 
		'\x23B', '\a', '\x5', '\x2', '\x2', '\x23B', '\x23D', '\a', 'S', '\x2', 
		'\x2', '\x23C', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x240', 
		'\x3', '\x2', '\x2', '\x2', '\x23E', '\x23C', '\x3', '\x2', '\x2', '\x2', 
		'\x23E', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x23F', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x240', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x241', '\x242', 
		'\a', '\x35', '\x2', '\x2', '\x242', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x243', '\x244', '\a', '\x38', '\x2', '\x2', '\x244', '\x245', '\x5', 
		'\x12', '\n', '\x2', '\x245', '\x63', '\x3', '\x2', '\x2', '\x2', '\x246', 
		'\x247', '\a', '\x37', '\x2', '\x2', '\x247', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x248', '\x249', '\a', '\x39', '\x2', '\x2', '\x249', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x24A', '\x24B', '\a', ':', '\x2', '\x2', '\x24B', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\a', ';', '\x2', '\x2', 
		'\x24D', 'k', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', '\a', '<', 
		'\x2', '\x2', '\x24F', 'm', '\x3', '\x2', '\x2', '\x2', '\x250', '\x251', 
		'\a', '@', '\x2', '\x2', '\x251', 'o', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x253', '\a', '=', '\x2', '\x2', '\x253', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x255', '\a', '>', '\x2', '\x2', '\x255', 's', '\x3', '\x2', 
		'\x2', '\x2', '\x256', '\x257', '\a', '?', '\x2', '\x2', '\x257', 'u', 
		'\x3', '\x2', '\x2', '\x2', '\x258', '\x25E', '\a', '\x41', '\x2', '\x2', 
		'\x259', '\x25A', '\a', 'n', '\x2', '\x2', '\x25A', '\x25F', '\a', '\x6', 
		'\x2', '\x2', '\x25B', '\x25C', '\a', '\a', '\x2', '\x2', '\x25C', '\x25D', 
		'\a', 'V', '\x2', '\x2', '\x25D', '\x25F', '\a', '\x5', '\x2', '\x2', 
		'\x25E', '\x259', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25B', '\x3', 
		'\x2', '\x2', '\x2', '\x25E', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x25F', 
		'\x260', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\x5', '\x12', 
		'\n', '\x2', '\x261', 'w', '\x3', '\x2', '\x2', '\x2', '\x262', '\x264', 
		'\a', '\x42', '\x2', '\x2', '\x263', '\x265', '\x5', '\n', '\x6', '\x2', 
		'\x264', '\x263', '\x3', '\x2', '\x2', '\x2', '\x264', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\x265', 'y', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x267', '\a', '\x42', '\x2', '\x2', '\x267', '\x268', '\a', '\x43', '\x2', 
		'\x2', '\x268', '\x269', '\a', 'Y', '\x2', '\x2', '\x269', '\x26A', '\x5', 
		'\b', '\x5', '\x2', '\x26A', '\x26B', '\a', 'Z', '\x2', '\x2', '\x26B', 
		'\x26C', '\a', '\x6', '\x2', '\x2', '\x26C', '\x26D', '\x5', '\b', '\x5', 
		'\x2', '\x26D', '{', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x26F', '\a', 
		'\x42', '\x2', '\x2', '\x26F', '\x270', '\a', '\a', '\x2', '\x2', '\x270', 
		'\x271', '\t', '\n', '\x2', '\x2', '\x271', '\x272', '\a', '\x5', '\x2', 
		'\x2', '\x272', '\x273', '\x5', '\b', '\x5', '\x2', '\x273', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x274', '\x275', '\a', '\x42', '\x2', '\x2', '\x275', 
		'\x276', '\a', '\b', '\x2', '\x2', '\x276', '\x277', '\x5', '\b', '\x5', 
		'\x2', '\x277', '\x278', '\a', '\x5', '\x2', '\x2', '\x278', '\x279', 
		'\x5', '\b', '\x5', '\x2', '\x279', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x27A', '\x27B', '\a', '\x44', '\x2', '\x2', '\x27B', '\x27C', '\a', 
		'Y', '\x2', '\x2', '\x27C', '\x27D', '\x5', '\b', '\x5', '\x2', '\x27D', 
		'\x27E', '\a', '\x5', '\x2', '\x2', '\x27E', '\x281', '\x5', '\b', '\x5', 
		'\x2', '\x27F', '\x280', '\a', '\x5', '\x2', '\x2', '\x280', '\x282', 
		'\x5', '\b', '\x5', '\x2', '\x281', '\x27F', '\x3', '\x2', '\x2', '\x2', 
		'\x282', '\x283', '\x3', '\x2', '\x2', '\x2', '\x283', '\x281', '\x3', 
		'\x2', '\x2', '\x2', '\x283', '\x284', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x285', '\x3', '\x2', '\x2', '\x2', '\x285', '\x286', '\a', 'Z', '\x2', 
		'\x2', '\x286', '\x81', '\x3', '\x2', '\x2', '\x2', '\x287', '\x288', 
		'\a', '\x45', '\x2', '\x2', '\x288', '\x289', '\a', 'Y', '\x2', '\x2', 
		'\x289', '\x28A', '\x5', '\b', '\x5', '\x2', '\x28A', '\x28B', '\a', '\x5', 
		'\x2', '\x2', '\x28B', '\x28C', '\x5', '\b', '\x5', '\x2', '\x28C', '\x28D', 
		'\a', 'Z', '\x2', '\x2', '\x28D', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x28E', '\x28F', '\a', '\x46', '\x2', '\x2', '\x28F', '\x290', '\x5', 
		'\b', '\x5', '\x2', '\x290', '\x85', '\x3', '\x2', '\x2', '\x2', '\x291', 
		'\x292', '\a', 'G', '\x2', '\x2', '\x292', '\x293', '\x5', '\b', '\x5', 
		'\x2', '\x293', '\x87', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', 
		'\a', 'H', '\x2', '\x2', '\x295', '\x296', '\x5', '\b', '\x5', '\x2', 
		'\x296', '\x297', '\a', '\x5', '\x2', '\x2', '\x297', '\x298', '\x5', 
		'\b', '\x5', '\x2', '\x298', '\x89', '\x3', '\x2', '\x2', '\x2', '\x299', 
		'\x29A', '\a', 'I', '\x2', '\x2', '\x29A', '\x29B', '\t', '\v', '\x2', 
		'\x2', '\x29B', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29D', 
		'\a', 'J', '\x2', '\x2', '\x29D', '\x29E', '\t', '\v', '\x2', '\x2', '\x29E', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', '\a', 'K', '\x2', 
		'\x2', '\x2A0', '\x2A1', '\x5', '\b', '\x5', '\x2', '\x2A1', '\x2A2', 
		'\a', '\x5', '\x2', '\x2', '\x2A2', '\x2A3', '\x5', '\b', '\x5', '\x2', 
		'\x2A3', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A5', '\a', 'L', 
		'\x2', '\x2', '\x2A5', '\x2A6', '\x5', '\b', '\x5', '\x2', '\x2A6', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A8', '\a', 'L', '\x2', '\x2', 
		'\x2A8', '\x2A9', '\x5', '\b', '\x5', '\x2', '\x2A9', '\x2AA', '\a', '\x5', 
		'\x2', '\x2', '\x2AA', '\x2AB', '\x5', '\b', '\x5', '\x2', '\x2AB', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\a', 'M', '\x2', '\x2', 
		'\x2AD', '\x2AE', '\x5', '\b', '\x5', '\x2', '\x2AE', '\x2AF', '\a', '\x5', 
		'\x2', '\x2', '\x2AF', '\x2B0', '\x5', '\b', '\x5', '\x2', '\x2B0', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\a', 'O', '\x2', '\x2', 
		'\x2B2', '\x2B3', '\x5', '\b', '\x5', '\x2', '\x2B3', '\x2B4', '\a', '\x5', 
		'\x2', '\x2', '\x2B4', '\x2B5', '\x5', '\b', '\x5', '\x2', '\x2B5', '\x2B6', 
		'\a', '\x5', '\x2', '\x2', '\x2B6', '\x2B7', '\x5', '\b', '\x5', '\x2', 
		'\x2B7', '\x2B8', '\a', '\x5', '\x2', '\x2', '\x2B8', '\x2B9', '\x5', 
		'\b', '\x5', '\x2', '\x2B9', '\x97', '\x3', '\x2', '\x2', '\x2', '\x2BA', 
		'\x2BB', '\a', 'P', '\x2', '\x2', '\x2BB', '\x2BC', '\x5', '\b', '\x5', 
		'\x2', '\x2BC', '\x99', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BE', 
		'\a', 'Q', '\x2', '\x2', '\x2BE', '\x2BF', '\t', '\f', '\x2', '\x2', '\x2BF', 
		'\x2C0', '\a', '\x5', '\x2', '\x2', '\x2C0', '\x2C1', '\a', '\a', '\x2', 
		'\x2', '\x2C1', '\x2C2', '\t', '\r', '\x2', '\x2', '\x2C2', '\x2C3', '\a', 
		'\x5', '\x2', '\x2', '\x2C3', '\x2C4', '\x5', '\b', '\x5', '\x2', '\x2C4', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C6', '\a', 'R', '\x2', 
		'\x2', '\x2C6', '\x2C8', '\a', '\a', '\x2', '\x2', '\x2C7', '\x2C9', '\a', 
		'V', '\x2', '\x2', '\x2C8', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2C8', 
		'\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xA1', '\xA8', '\xAD', '\xB1', '\xE8', '\xF5', '\x100', '\x102', 
		'\x10F', '\x116', '\x128', '\x130', '\x13C', '\x1A9', '\x1AF', '\x1B4', 
		'\x1C1', '\x1C5', '\x1CC', '\x1D1', '\x1D8', '\x1E1', '\x1F2', '\x1F7', 
		'\x1FE', '\x203', '\x20C', '\x212', '\x21A', '\x221', '\x229', '\x22F', 
		'\x237', '\x23E', '\x25E', '\x264', '\x283', '\x2C8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BASICLanguageParser
