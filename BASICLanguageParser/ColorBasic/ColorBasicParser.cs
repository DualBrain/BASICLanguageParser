//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Stephen\source\repos\BASICLanguageParser\BASICLanguageParser.Grammar\ColorBasic.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BASICLanguageParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class ColorBasicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, LET=3, DIM=4, ABS=5, ASC=6, SGN=7, INT=8, SIN=9, RND=10, 
		LEN=11, VAL=12, CHR=13, MID=14, LEFT=15, RIGHT=16, STR=17, INKEY=18, JOYSTK=19, 
		EOFTOKEN=20, PEEK=21, POINT=22, MEM=23, USR=24, FOR=25, TO=26, STEP=27, 
		NEXT=28, IF=29, THEN=30, ELSE=31, GO=32, SUB=33, ON=34, OFF=35, RETURN=36, 
		DATA=37, RESTORE=38, READ=39, NEW=40, END=41, STOP=42, RUN=43, CONT=44, 
		LIST=45, LLIST=46, CLEAR=47, INPUT=48, PRINT=49, TAB=50, SET=51, RESET=52, 
		CLS=53, EXEC=54, POKE=55, MOTOR=56, AUDIO=57, SOUND=58, CLOAD=59, CSAVE=60, 
		CLOADM=61, CSAVEM=62, SKIPF=63, OPEN=64, CLOSE=65, COMMENT=66, REM=67, 
		DOLLAR=68, AT=69, PERCENT=70, ADD=71, SUBTRACT=72, MUL=73, DIV=74, GT=75, 
		LT=76, EQ=77, COMMA=78, SEMICOLON=79, COLON=80, EXP=81, HASH=82, OR=83, 
		AND=84, NOT=85, LPAREN=86, RPAREN=87, DEVICE_KEYBOARD=88, DEVICE_CASSETTE=89, 
		DEVICE_PRINTER=90, DEVICE_RS232=91, DATUM=92, LETTERS=93, SINGLE_DIGIT=94, 
		LINENUMBER=95, NUMBER=96, STRINGLITERAL=97, WS=98;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_linenumber = 2, RULE_substatement = 3, 
		RULE_statement = 4, RULE_func_ = 5, RULE_number = 6, RULE_signExpression = 7, 
		RULE_exponentExpression = 8, RULE_multiplyingExpression = 9, RULE_addingExpression = 10, 
		RULE_relationalExpression = 11, RULE_expression = 12, RULE_relop = 13, 
		RULE_neq = 14, RULE_gte = 15, RULE_lte = 16, RULE_var_ = 17, RULE_varname = 18, 
		RULE_varsuffix = 19, RULE_varlist = 20, RULE_vardecl = 21, RULE_variableassignment = 22, 
		RULE_exprlist = 23, RULE_datum = 24, RULE_absfunc = 25, RULE_ascfunc = 26, 
		RULE_sgnfunc = 27, RULE_intfunc = 28, RULE_sinfunc = 29, RULE_rndfunc = 30, 
		RULE_lenfunc = 31, RULE_valfunc = 32, RULE_chrfunc = 33, RULE_midfunc = 34, 
		RULE_leftfunc = 35, RULE_rightfunc = 36, RULE_strfunc = 37, RULE_inkeyfunc = 38, 
		RULE_joystkfunc = 39, RULE_eoffunc = 40, RULE_peekfunc = 41, RULE_pointfunc = 42, 
		RULE_memfunc = 43, RULE_usrfunc = 44, RULE_letstmt = 45, RULE_dimstmt = 46, 
		RULE_forstmt = 47, RULE_nextstmt = 48, RULE_ifstmt1 = 49, RULE_ifstmt2 = 50, 
		RULE_gotostmt = 51, RULE_gosubstmt = 52, RULE_ongotostmt = 53, RULE_ongosubstmt = 54, 
		RULE_returnstmt = 55, RULE_datastmt = 56, RULE_readstmt = 57, RULE_restorestmt = 58, 
		RULE_newstmt = 59, RULE_endstmt = 60, RULE_stopstmt = 61, RULE_runstmt = 62, 
		RULE_clearstmt = 63, RULE_contstmt = 64, RULE_liststmt = 65, RULE_lliststmt = 66, 
		RULE_inputstmt1 = 67, RULE_inputstmt2 = 68, RULE_printstmt = 69, RULE_printtabstmt = 70, 
		RULE_printhashstmt = 71, RULE_printatstmt = 72, RULE_setstmt = 73, RULE_resetstmt = 74, 
		RULE_clsstmt = 75, RULE_execstmt = 76, RULE_pokestmt = 77, RULE_motorstmt = 78, 
		RULE_audiostmt = 79, RULE_soundstmt = 80, RULE_cloadstmt = 81, RULE_cloadmstmt = 82, 
		RULE_csavestmt = 83, RULE_csavemstmt = 84, RULE_skipfstmt = 85, RULE_openstmt = 86, 
		RULE_closestmt = 87;
	public static readonly string[] ruleNames = {
		"prog", "line", "linenumber", "substatement", "statement", "func_", "number", 
		"signExpression", "exponentExpression", "multiplyingExpression", "addingExpression", 
		"relationalExpression", "expression", "relop", "neq", "gte", "lte", "var_", 
		"varname", "varsuffix", "varlist", "vardecl", "variableassignment", "exprlist", 
		"datum", "absfunc", "ascfunc", "sgnfunc", "intfunc", "sinfunc", "rndfunc", 
		"lenfunc", "valfunc", "chrfunc", "midfunc", "leftfunc", "rightfunc", "strfunc", 
		"inkeyfunc", "joystkfunc", "eoffunc", "peekfunc", "pointfunc", "memfunc", 
		"usrfunc", "letstmt", "dimstmt", "forstmt", "nextstmt", "ifstmt1", "ifstmt2", 
		"gotostmt", "gosubstmt", "ongotostmt", "ongosubstmt", "returnstmt", "datastmt", 
		"readstmt", "restorestmt", "newstmt", "endstmt", "stopstmt", "runstmt", 
		"clearstmt", "contstmt", "liststmt", "lliststmt", "inputstmt1", "inputstmt2", 
		"printstmt", "printtabstmt", "printhashstmt", "printatstmt", "setstmt", 
		"resetstmt", "clsstmt", "execstmt", "pokestmt", "motorstmt", "audiostmt", 
		"soundstmt", "cloadstmt", "cloadmstmt", "csavestmt", "csavemstmt", "skipfstmt", 
		"openstmt", "closestmt"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\"I\"'", "'\"O\"'", "'LET'", "'DIM'", "'ABS'", "'ASC'", "'SGN'", 
		"'INT'", "'SIN'", "'RND'", "'LEN'", "'VAL'", "'CHR$'", "'MID$'", "'LEFT$'", 
		"'RIGHT$'", "'STR$'", "'INKEY$'", "'JOYSTK'", "'EOF'", "'PEEK'", "'POINT'", 
		"'MEM'", "'USR'", "'FOR'", "'TO'", "'STEP'", "'NEXT'", "'IF'", "'THEN'", 
		"'ELSE'", "'GO'", "'SUB'", "'ON'", "'OFF'", "'RETURN'", "'DATA'", "'RESTORE'", 
		"'READ'", "'NEW'", "'END'", "'STOP'", "'RUN'", "'CONT'", "'LIST'", "'LLIST'", 
		"'CLEAR'", "'INPUT'", "'PRINT'", "'TAB'", "'SET'", "'RESET'", "'CLS'", 
		"'EXEC'", "'POKE'", "'MOTOR'", "'AUDIO'", "'SOUND'", "'CLOAD'", "'CSAVE'", 
		"'CLOADM'", "'CSAVEM'", "'SKIPF'", "'OPEN'", "'CLOSE'", null, null, "'$'", 
		"'@'", "'%'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'='", "','", 
		"';'", "':'", "'^'", "'#'", "'OR'", "'AND'", "'NOT'", "'('", "')'", "'0'", 
		"'-1'", "'-2'", "'-3'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "LET", "DIM", "ABS", "ASC", "SGN", "INT", "SIN", "RND", 
		"LEN", "VAL", "CHR", "MID", "LEFT", "RIGHT", "STR", "INKEY", "JOYSTK", 
		"EOFTOKEN", "PEEK", "POINT", "MEM", "USR", "FOR", "TO", "STEP", "NEXT", 
		"IF", "THEN", "ELSE", "GO", "SUB", "ON", "OFF", "RETURN", "DATA", "RESTORE", 
		"READ", "NEW", "END", "STOP", "RUN", "CONT", "LIST", "LLIST", "CLEAR", 
		"INPUT", "PRINT", "TAB", "SET", "RESET", "CLS", "EXEC", "POKE", "MOTOR", 
		"AUDIO", "SOUND", "CLOAD", "CSAVE", "CLOADM", "CSAVEM", "SKIPF", "OPEN", 
		"CLOSE", "COMMENT", "REM", "DOLLAR", "AT", "PERCENT", "ADD", "SUBTRACT", 
		"MUL", "DIV", "GT", "LT", "EQ", "COMMA", "SEMICOLON", "COLON", "EXP", 
		"HASH", "OR", "AND", "NOT", "LPAREN", "RPAREN", "DEVICE_KEYBOARD", "DEVICE_CASSETTE", 
		"DEVICE_PRINTER", "DEVICE_RS232", "DATUM", "LETTERS", "SINGLE_DIGIT", 
		"LINENUMBER", "NUMBER", "STRINGLITERAL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ColorBasic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ColorBasicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ColorBasicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ColorBasicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 176;
				line();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LINENUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstatementContext[] substatement() {
			return GetRuleContexts<SubstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstatementContext substatement(int i) {
			return GetRuleContext<SubstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(ColorBasicParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(ColorBasicParser.COLON, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 181;
			linenumber();
			State = 182;
			substatement();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 183;
				Match(COLON);
				State = 184;
				substatement();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinenumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINENUMBER() { return GetTokens(ColorBasicParser.LINENUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINENUMBER(int i) {
			return GetToken(ColorBasicParser.LINENUMBER, i);
		}
		public LinenumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linenumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLinenumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLinenumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinenumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinenumberContext linenumber() {
		LinenumberContext _localctx = new LinenumberContext(Context, State);
		EnterRule(_localctx, 4, RULE_linenumber);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 190;
					Match(LINENUMBER);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(ColorBasicParser.COMMENT, 0); }
		public SubstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSubstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSubstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstatementContext substatement() {
		SubstatementContext _localctx = new SubstatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_substatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case RETURN:
			case DATA:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case LETTERS:
				{
				State = 195;
				statement();
				}
				break;
			case COMMENT:
				{
				State = 196;
				Match(COMMENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstmtContext returnstmt() {
			return GetRuleContext<ReturnstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestorestmtContext restorestmt() {
			return GetRuleContext<RestorestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintstmtContext printstmt() {
			return GetRuleContext<PrintstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NextstmtContext nextstmt() {
			return GetRuleContext<NextstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PokestmtContext pokestmt() {
			return GetRuleContext<PokestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ifstmt1Context ifstmt1() {
			return GetRuleContext<Ifstmt1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ifstmt2Context ifstmt2() {
			return GetRuleContext<Ifstmt2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForstmtContext forstmt() {
			return GetRuleContext<ForstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inputstmt1Context inputstmt1() {
			return GetRuleContext<Inputstmt1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inputstmt2Context inputstmt2() {
			return GetRuleContext<Inputstmt2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimstmtContext dimstmt() {
			return GetRuleContext<DimstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotostmtContext gotostmt() {
			return GetRuleContext<GotostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GosubstmtContext gosubstmt() {
			return GetRuleContext<GosubstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadstmtContext readstmt() {
			return GetRuleContext<ReadstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatastmtContext datastmt() {
			return GetRuleContext<DatastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrinttabstmtContext printtabstmt() {
			return GetRuleContext<PrinttabstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrinthashstmtContext printhashstmt() {
			return GetRuleContext<PrinthashstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintatstmtContext printatstmt() {
			return GetRuleContext<PrintatstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewstmtContext newstmt() {
			return GetRuleContext<NewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopstmtContext stopstmt() {
			return GetRuleContext<StopstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndstmtContext endstmt() {
			return GetRuleContext<EndstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RunstmtContext runstmt() {
			return GetRuleContext<RunstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClearstmtContext clearstmt() {
			return GetRuleContext<ClearstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContstmtContext contstmt() {
			return GetRuleContext<ContstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListstmtContext liststmt() {
			return GetRuleContext<ListstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LliststmtContext lliststmt() {
			return GetRuleContext<LliststmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetstmtContext letstmt() {
			return GetRuleContext<LetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetstmtContext setstmt() {
			return GetRuleContext<SetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetstmtContext resetstmt() {
			return GetRuleContext<ResetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClsstmtContext clsstmt() {
			return GetRuleContext<ClsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecstmtContext execstmt() {
			return GetRuleContext<ExecstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MotorstmtContext motorstmt() {
			return GetRuleContext<MotorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AudiostmtContext audiostmt() {
			return GetRuleContext<AudiostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SoundstmtContext soundstmt() {
			return GetRuleContext<SoundstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloadstmtContext cloadstmt() {
			return GetRuleContext<CloadstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloadmstmtContext cloadmstmt() {
			return GetRuleContext<CloadmstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CsavestmtContext csavestmt() {
			return GetRuleContext<CsavestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CsavemstmtContext csavemstmt() {
			return GetRuleContext<CsavemstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkipfstmtContext skipfstmt() {
			return GetRuleContext<SkipfstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenstmtContext openstmt() {
			return GetRuleContext<OpenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosestmtContext closestmt() {
			return GetRuleContext<ClosestmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199;
				returnstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				restorestmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 201;
				printstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 202;
				nextstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 203;
				pokestmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 204;
				ifstmt1();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 205;
				ifstmt2();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 206;
				forstmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 207;
				inputstmt1();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 208;
				inputstmt2();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 209;
				dimstmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 210;
				gotostmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 211;
				gosubstmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 212;
				readstmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 213;
				datastmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 214;
				printstmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 215;
				printtabstmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 216;
				printhashstmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 217;
				printatstmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 218;
				newstmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 219;
				stopstmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 220;
				endstmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 221;
				runstmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 222;
				clearstmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 223;
				contstmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 224;
				liststmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 225;
				lliststmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 226;
				letstmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 227;
				setstmt();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 228;
				resetstmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 229;
				clsstmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 230;
				execstmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 231;
				motorstmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 232;
				audiostmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 233;
				soundstmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 234;
				cloadstmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 235;
				cloadmstmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 236;
				csavestmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 237;
				csavemstmt();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 238;
				skipfstmt();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 239;
				openstmt();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 240;
				closestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(ColorBasicParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChrfuncContext chrfunc() {
			return GetRuleContext<ChrfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LenfuncContext lenfunc() {
			return GetRuleContext<LenfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrfuncContext strfunc() {
			return GetRuleContext<StrfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MidfuncContext midfunc() {
			return GetRuleContext<MidfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeekfuncContext peekfunc() {
			return GetRuleContext<PeekfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntfuncContext intfunc() {
			return GetRuleContext<IntfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeftfuncContext leftfunc() {
			return GetRuleContext<LeftfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValfuncContext valfunc() {
			return GetRuleContext<ValfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightfuncContext rightfunc() {
			return GetRuleContext<RightfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SinfuncContext sinfunc() {
			return GetRuleContext<SinfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RndfuncContext rndfunc() {
			return GetRuleContext<RndfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SgnfuncContext sgnfunc() {
			return GetRuleContext<SgnfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbsfuncContext absfunc() {
			return GetRuleContext<AbsfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InkeyfuncContext inkeyfunc() {
			return GetRuleContext<InkeyfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoystkfuncContext joystkfunc() {
			return GetRuleContext<JoystkfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EoffuncContext eoffunc() {
			return GetRuleContext<EoffuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointfuncContext pointfunc() {
			return GetRuleContext<PointfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemfuncContext memfunc() {
			return GetRuleContext<MemfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsrfuncContext usrfunc() {
			return GetRuleContext<UsrfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public Func_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterFunc_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitFunc_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_Context func_() {
		Func_Context _localctx = new Func_Context(Context, State);
		EnterRule(_localctx, 10, RULE_func_);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				Match(STRINGLITERAL);
				}
				break;
			case ADD:
			case SUBTRACT:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				number();
				}
				break;
			case LETTERS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245;
				vardecl();
				}
				break;
			case CHR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 246;
				chrfunc();
				}
				break;
			case LEN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 247;
				lenfunc();
				}
				break;
			case STR:
				EnterOuterAlt(_localctx, 6);
				{
				State = 248;
				strfunc();
				}
				break;
			case MID:
				EnterOuterAlt(_localctx, 7);
				{
				State = 249;
				midfunc();
				}
				break;
			case PEEK:
				EnterOuterAlt(_localctx, 8);
				{
				State = 250;
				peekfunc();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 251;
				intfunc();
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 252;
				leftfunc();
				}
				break;
			case VAL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 253;
				valfunc();
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 12);
				{
				State = 254;
				rightfunc();
				}
				break;
			case SIN:
				EnterOuterAlt(_localctx, 13);
				{
				State = 255;
				sinfunc();
				}
				break;
			case RND:
				EnterOuterAlt(_localctx, 14);
				{
				State = 256;
				rndfunc();
				}
				break;
			case SGN:
				EnterOuterAlt(_localctx, 15);
				{
				State = 257;
				sgnfunc();
				}
				break;
			case ABS:
				EnterOuterAlt(_localctx, 16);
				{
				State = 258;
				absfunc();
				}
				break;
			case INKEY:
				EnterOuterAlt(_localctx, 17);
				{
				State = 259;
				inkeyfunc();
				}
				break;
			case JOYSTK:
				EnterOuterAlt(_localctx, 18);
				{
				State = 260;
				joystkfunc();
				}
				break;
			case EOFTOKEN:
				EnterOuterAlt(_localctx, 19);
				{
				State = 261;
				eoffunc();
				}
				break;
			case POINT:
				EnterOuterAlt(_localctx, 20);
				{
				State = 262;
				pointfunc();
				}
				break;
			case MEM:
				EnterOuterAlt(_localctx, 21);
				{
				State = 263;
				memfunc();
				}
				break;
			case USR:
				EnterOuterAlt(_localctx, 22);
				{
				State = 264;
				usrfunc();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 23);
				{
				{
				State = 265;
				Match(LPAREN);
				State = 266;
				expression();
				State = 267;
				Match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ColorBasicParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ColorBasicParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(ColorBasicParser.SUBTRACT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADD || _la==SUBTRACT) {
				{
				State = 271;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUBTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			{
			State = 274;
			Match(NUMBER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_Context func_() {
			return GetRuleContext<Func_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(ColorBasicParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(ColorBasicParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ColorBasicParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(ColorBasicParser.SUBTRACT, 0); }
		public SignExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSignExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSignExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignExpressionContext signExpression() {
		SignExpressionContext _localctx = new SignExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_signExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 276;
				Match(NOT);
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NOT );
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 281;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUBTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 284;
			func_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignExpressionContext[] signExpression() {
			return GetRuleContexts<SignExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignExpressionContext signExpression(int i) {
			return GetRuleContext<SignExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXP() { return GetTokens(ColorBasicParser.EXP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP(int i) {
			return GetToken(ColorBasicParser.EXP, i);
		}
		public ExponentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterExponentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitExponentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExponentExpressionContext exponentExpression() {
		ExponentExpressionContext _localctx = new ExponentExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_exponentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			signExpression();
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXP) {
				{
				{
				State = 287;
				Match(EXP);
				State = 288;
				signExpression();
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyingExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExponentExpressionContext[] exponentExpression() {
			return GetRuleContexts<ExponentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentExpressionContext exponentExpression(int i) {
			return GetRuleContext<ExponentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(ColorBasicParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(ColorBasicParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(ColorBasicParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(ColorBasicParser.DIV, i);
		}
		public MultiplyingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyingExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterMultiplyingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitMultiplyingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyingExpressionContext multiplyingExpression() {
		MultiplyingExpressionContext _localctx = new MultiplyingExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_multiplyingExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			exponentExpression();
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MUL || _la==DIV) {
				{
				{
				State = 295;
				_la = TokenStream.LA(1);
				if ( !(_la==MUL || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 296;
				exponentExpression();
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddingExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyingExpressionContext[] multiplyingExpression() {
			return GetRuleContexts<MultiplyingExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyingExpressionContext multiplyingExpression(int i) {
			return GetRuleContext<MultiplyingExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(ColorBasicParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(ColorBasicParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUBTRACT() { return GetTokens(ColorBasicParser.SUBTRACT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT(int i) {
			return GetToken(ColorBasicParser.SUBTRACT, i);
		}
		public AddingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addingExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterAddingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitAddingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddingExpressionContext addingExpression() {
		AddingExpressionContext _localctx = new AddingExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_addingExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			multiplyingExpression();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADD || _la==SUBTRACT) {
				{
				{
				State = 303;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUBTRACT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 304;
				multiplyingExpression();
				}
				}
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddingExpressionContext[] addingExpression() {
			return GetRuleContexts<AddingExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddingExpressionContext addingExpression(int i) {
			return GetRuleContext<AddingExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			addingExpression();
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (GT - 75)) | (1L << (LT - 75)) | (1L << (EQ - 75)))) != 0)) {
				{
				{
				State = 311;
				relop();
				}
				State = 312;
				addingExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_Context func_() {
			return GetRuleContext<Func_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(ColorBasicParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(ColorBasicParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ColorBasicParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ColorBasicParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		int _la;
		try {
			State = 325;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABS:
			case SGN:
			case INT:
			case SIN:
			case RND:
			case LEN:
			case VAL:
			case CHR:
			case MID:
			case LEFT:
			case RIGHT:
			case STR:
			case INKEY:
			case JOYSTK:
			case EOFTOKEN:
			case PEEK:
			case POINT:
			case MEM:
			case USR:
			case ADD:
			case SUBTRACT:
			case LPAREN:
			case LETTERS:
			case NUMBER:
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316;
				func_();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 317;
				relationalExpression();
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OR || _la==AND) {
					{
					{
					State = 318;
					_la = TokenStream.LA(1);
					if ( !(_la==OR || _la==AND) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 319;
					relationalExpression();
					}
					}
					State = 324;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GteContext gte() {
			return GetRuleContext<GteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LteContext lte() {
			return GetRuleContext<LteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NeqContext neq() {
			return GetRuleContext<NeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ColorBasicParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ColorBasicParser.LT, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 26, RULE_relop);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327;
				gte();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328;
				lte();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 329;
				neq();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 330;
				Match(EQ);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 331;
				Match(GT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 332;
				Match(LT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ColorBasicParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ColorBasicParser.GT, 0); }
		public NeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterNeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitNeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NeqContext neq() {
		NeqContext _localctx = new NeqContext(Context, State);
		EnterRule(_localctx, 28, RULE_neq);
		try {
			State = 339;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 335;
				Match(LT);
				State = 336;
				Match(GT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 337;
				Match(GT);
				State = 338;
				Match(LT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ColorBasicParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		public GteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterGte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitGte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GteContext gte() {
		GteContext _localctx = new GteContext(Context, State);
		EnterRule(_localctx, 30, RULE_gte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(GT);
			State = 342;
			Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ColorBasicParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		public LteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LteContext lte() {
		LteContext _localctx = new LteContext(Context, State);
		EnterRule(_localctx, 32, RULE_lte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(LT);
			State = 345;
			Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarnameContext varname() {
			return GetRuleContext<VarnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarsuffixContext varsuffix() {
			return GetRuleContext<VarsuffixContext>(0);
		}
		public Var_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterVar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitVar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_Context var_() {
		Var_Context _localctx = new Var_Context(Context, State);
		EnterRule(_localctx, 34, RULE_var_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			varname();
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOLLAR) {
				{
				State = 348;
				varsuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTERS() { return GetTokens(ColorBasicParser.LETTERS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTERS(int i) {
			return GetToken(ColorBasicParser.LETTERS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINENUMBER() { return GetTokens(ColorBasicParser.LINENUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINENUMBER(int i) {
			return GetToken(ColorBasicParser.LINENUMBER, i);
		}
		public VarnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterVarname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitVarname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarnameContext varname() {
		VarnameContext _localctx = new VarnameContext(Context, State);
		EnterRule(_localctx, 36, RULE_varname);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(LETTERS);
			State = 355;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 352;
					_la = TokenStream.LA(1);
					if ( !(_la==LETTERS || _la==LINENUMBER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarsuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(ColorBasicParser.DOLLAR, 0); }
		public VarsuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varsuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterVarsuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitVarsuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarsuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarsuffixContext varsuffix() {
		VarsuffixContext _localctx = new VarsuffixContext(Context, State);
		EnterRule(_localctx, 38, RULE_varsuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			Match(DOLLAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext[] vardecl() {
			return GetRuleContexts<VardeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl(int i) {
			return GetRuleContext<VardeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ColorBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ColorBasicParser.COMMA, i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 40, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			vardecl();
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 361;
				Match(COMMA);
				State = 362;
				vardecl();
				}
				}
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_Context var_() {
			return GetRuleContext<Var_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(ColorBasicParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(ColorBasicParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext[] exprlist() {
			return GetRuleContexts<ExprlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist(int i) {
			return GetRuleContext<ExprlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(ColorBasicParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(ColorBasicParser.RPAREN, i);
		}
		public VardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterVardecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitVardecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardeclContext vardecl() {
		VardeclContext _localctx = new VardeclContext(Context, State);
		EnterRule(_localctx, 42, RULE_vardecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			var_();
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 369;
				Match(LPAREN);
				State = 370;
				exprlist();
				State = 371;
				Match(RPAREN);
				}
				}
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableassignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		public VariableassignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableassignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterVariableassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitVariableassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableassignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableassignmentContext variableassignment() {
		VariableassignmentContext _localctx = new VariableassignmentContext(Context, State);
		EnterRule(_localctx, 44, RULE_variableassignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			vardecl();
			State = 379;
			Match(EQ);
			State = 380;
			exprlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ColorBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ColorBasicParser.COMMA, i);
		}
		public ExprlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterExprlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitExprlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprlistContext exprlist() {
		ExprlistContext _localctx = new ExprlistContext(Context, State);
		EnterRule(_localctx, 46, RULE_exprlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			expression();
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 383;
				Match(COMMA);
				State = 384;
				expression();
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATUM() { return GetToken(ColorBasicParser.DATUM, 0); }
		public DatumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterDatum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitDatum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatumContext datum() {
		DatumContext _localctx = new DatumContext(Context, State);
		EnterRule(_localctx, 48, RULE_datum);
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case SUBTRACT:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				number();
				}
				break;
			case DATUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391;
				Match(DATUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(ColorBasicParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public AbsfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterAbsfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitAbsfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsfuncContext absfunc() {
		AbsfuncContext _localctx = new AbsfuncContext(Context, State);
		EnterRule(_localctx, 50, RULE_absfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(ABS);
			State = 395;
			Match(LPAREN);
			State = 396;
			expression();
			State = 397;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AscfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(ColorBasicParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public AscfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterAscfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitAscfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AscfuncContext ascfunc() {
		AscfuncContext _localctx = new AscfuncContext(Context, State);
		EnterRule(_localctx, 52, RULE_ascfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(ASC);
			State = 400;
			Match(LPAREN);
			State = 401;
			expression();
			State = 402;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SgnfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SGN() { return GetToken(ColorBasicParser.SGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public SgnfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sgnfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSgnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSgnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSgnfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SgnfuncContext sgnfunc() {
		SgnfuncContext _localctx = new SgnfuncContext(Context, State);
		EnterRule(_localctx, 54, RULE_sgnfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			Match(SGN);
			State = 405;
			Match(LPAREN);
			State = 406;
			expression();
			State = 407;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ColorBasicParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public IntfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIntfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIntfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntfuncContext intfunc() {
		IntfuncContext _localctx = new IntfuncContext(Context, State);
		EnterRule(_localctx, 56, RULE_intfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			Match(INT);
			State = 410;
			Match(LPAREN);
			State = 411;
			expression();
			State = 412;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(ColorBasicParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public SinfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSinfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSinfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSinfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SinfuncContext sinfunc() {
		SinfuncContext _localctx = new SinfuncContext(Context, State);
		EnterRule(_localctx, 58, RULE_sinfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(SIN);
			State = 415;
			Match(LPAREN);
			State = 416;
			expression();
			State = 417;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RndfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RND() { return GetToken(ColorBasicParser.RND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public RndfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rndfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRndfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRndfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRndfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RndfuncContext rndfunc() {
		RndfuncContext _localctx = new RndfuncContext(Context, State);
		EnterRule(_localctx, 60, RULE_rndfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(RND);
			State = 420;
			Match(LPAREN);
			State = 421;
			expression();
			State = 422;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LenfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(ColorBasicParser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public LenfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lenfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLenfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLenfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLenfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LenfuncContext lenfunc() {
		LenfuncContext _localctx = new LenfuncContext(Context, State);
		EnterRule(_localctx, 62, RULE_lenfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			Match(LEN);
			State = 425;
			Match(LPAREN);
			State = 426;
			expression();
			State = 427;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(ColorBasicParser.VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public ValfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterValfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitValfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValfuncContext valfunc() {
		ValfuncContext _localctx = new ValfuncContext(Context, State);
		EnterRule(_localctx, 64, RULE_valfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(VAL);
			State = 430;
			Match(LPAREN);
			State = 431;
			expression();
			State = 432;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHR() { return GetToken(ColorBasicParser.CHR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public ChrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chrfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterChrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitChrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChrfuncContext chrfunc() {
		ChrfuncContext _localctx = new ChrfuncContext(Context, State);
		EnterRule(_localctx, 66, RULE_chrfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			Match(CHR);
			State = 435;
			Match(LPAREN);
			State = 436;
			expression();
			State = 437;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(ColorBasicParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ColorBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ColorBasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public MidfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterMidfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitMidfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidfuncContext midfunc() {
		MidfuncContext _localctx = new MidfuncContext(Context, State);
		EnterRule(_localctx, 68, RULE_midfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			Match(MID);
			State = 440;
			Match(LPAREN);
			State = 441;
			expression();
			State = 442;
			Match(COMMA);
			State = 443;
			expression();
			State = 444;
			Match(COMMA);
			State = 445;
			expression();
			State = 446;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(ColorBasicParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ColorBasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public LeftfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLeftfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLeftfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftfuncContext leftfunc() {
		LeftfuncContext _localctx = new LeftfuncContext(Context, State);
		EnterRule(_localctx, 70, RULE_leftfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(LEFT);
			State = 449;
			Match(LPAREN);
			State = 450;
			expression();
			State = 451;
			Match(COMMA);
			State = 452;
			expression();
			State = 453;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(ColorBasicParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ColorBasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public RightfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRightfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRightfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightfuncContext rightfunc() {
		RightfuncContext _localctx = new RightfuncContext(Context, State);
		EnterRule(_localctx, 72, RULE_rightfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			Match(RIGHT);
			State = 456;
			Match(LPAREN);
			State = 457;
			expression();
			State = 458;
			Match(COMMA);
			State = 459;
			expression();
			State = 460;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(ColorBasicParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public StrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterStrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitStrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrfuncContext strfunc() {
		StrfuncContext _localctx = new StrfuncContext(Context, State);
		EnterRule(_localctx, 74, RULE_strfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			Match(STR);
			State = 463;
			Match(LPAREN);
			State = 464;
			expression();
			State = 465;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InkeyfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INKEY() { return GetToken(ColorBasicParser.INKEY, 0); }
		public InkeyfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inkeyfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterInkeyfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitInkeyfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInkeyfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InkeyfuncContext inkeyfunc() {
		InkeyfuncContext _localctx = new InkeyfuncContext(Context, State);
		EnterRule(_localctx, 76, RULE_inkeyfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			Match(INKEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoystkfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOYSTK() { return GetToken(ColorBasicParser.JOYSTK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public JoystkfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joystkfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterJoystkfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitJoystkfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoystkfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoystkfuncContext joystkfunc() {
		JoystkfuncContext _localctx = new JoystkfuncContext(Context, State);
		EnterRule(_localctx, 78, RULE_joystkfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			Match(JOYSTK);
			State = 470;
			Match(LPAREN);
			State = 471;
			expression();
			State = 472;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EoffuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOFTOKEN() { return GetToken(ColorBasicParser.EOFTOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public EoffuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eoffunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterEoffunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitEoffunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEoffunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EoffuncContext eoffunc() {
		EoffuncContext _localctx = new EoffuncContext(Context, State);
		EnterRule(_localctx, 80, RULE_eoffunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			Match(EOFTOKEN);
			State = 475;
			Match(LPAREN);
			State = 476;
			expression();
			State = 477;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeekfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEEK() { return GetToken(ColorBasicParser.PEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public PeekfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_peekfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPeekfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPeekfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeekfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeekfuncContext peekfunc() {
		PeekfuncContext _localctx = new PeekfuncContext(Context, State);
		EnterRule(_localctx, 82, RULE_peekfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(PEEK);
			State = 480;
			Match(LPAREN);
			State = 481;
			expression();
			State = 482;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(ColorBasicParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ColorBasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public PointfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPointfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPointfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointfuncContext pointfunc() {
		PointfuncContext _localctx = new PointfuncContext(Context, State);
		EnterRule(_localctx, 84, RULE_pointfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(POINT);
			State = 485;
			Match(LPAREN);
			State = 486;
			expression();
			State = 487;
			Match(COMMA);
			State = 488;
			expression();
			State = 489;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEM() { return GetToken(ColorBasicParser.MEM, 0); }
		public MemfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterMemfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitMemfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemfuncContext memfunc() {
		MemfuncContext _localctx = new MemfuncContext(Context, State);
		EnterRule(_localctx, 86, RULE_memfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(MEM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USR() { return GetToken(ColorBasicParser.USR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_DIGIT() { return GetToken(ColorBasicParser.SINGLE_DIGIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public UsrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usrfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterUsrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitUsrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsrfuncContext usrfunc() {
		UsrfuncContext _localctx = new UsrfuncContext(Context, State);
		EnterRule(_localctx, 88, RULE_usrfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(USR);
			State = 494;
			Match(SINGLE_DIGIT);
			State = 495;
			Match(LPAREN);
			State = 496;
			expression();
			State = 497;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableassignmentContext variableassignment() {
			return GetRuleContext<VariableassignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ColorBasicParser.LET, 0); }
		public LetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetstmtContext letstmt() {
		LetstmtContext _localctx = new LetstmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_letstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LET) {
				{
				State = 499;
				Match(LET);
				}
			}

			State = 502;
			variableassignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIM() { return GetToken(ColorBasicParser.DIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public DimstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterDimstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitDimstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimstmtContext dimstmt() {
		DimstmtContext _localctx = new DimstmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_dimstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(DIM);
			State = 505;
			varlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ColorBasicParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ColorBasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(ColorBasicParser.STEP, 0); }
		public ForstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterForstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitForstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstmtContext forstmt() {
		ForstmtContext _localctx = new ForstmtContext(Context, State);
		EnterRule(_localctx, 94, RULE_forstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(FOR);
			State = 508;
			vardecl();
			State = 509;
			Match(EQ);
			State = 510;
			expression();
			State = 511;
			Match(TO);
			State = 512;
			expression();
			State = 515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 513;
				Match(STEP);
				State = 514;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(ColorBasicParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext[] vardecl() {
			return GetRuleContexts<VardeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl(int i) {
			return GetRuleContext<VardeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ColorBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ColorBasicParser.COMMA, i);
		}
		public NextstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterNextstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitNextstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextstmtContext nextstmt() {
		NextstmtContext _localctx = new NextstmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_nextstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(NEXT);
			State = 526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 518;
				vardecl();
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 519;
					Match(COMMA);
					State = 520;
					vardecl();
					}
					}
					State = 525;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ifstmt1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ColorBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ColorBasicParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Ifstmt1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIfstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIfstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ifstmt1Context ifstmt1() {
		Ifstmt1Context _localctx = new Ifstmt1Context(Context, State);
		EnterRule(_localctx, 98, RULE_ifstmt1);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			Match(IF);
			State = 529;
			expression();
			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 530;
				Match(THEN);
				}
			}

			State = 539;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case RETURN:
			case DATA:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case LETTERS:
				{
				State = 534;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 533;
						statement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 536;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case LINENUMBER:
				{
				State = 538;
				linenumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ifstmt2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ColorBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ColorBasicParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ColorBasicParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext[] linenumber() {
			return GetRuleContexts<LinenumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber(int i) {
			return GetRuleContext<LinenumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Ifstmt2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIfstmt2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIfstmt2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ifstmt2Context ifstmt2() {
		Ifstmt2Context _localctx = new Ifstmt2Context(Context, State);
		EnterRule(_localctx, 100, RULE_ifstmt2);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			Match(IF);
			State = 542;
			expression();
			State = 543;
			Match(THEN);
			State = 550;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case RETURN:
			case DATA:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case LETTERS:
				{
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 544;
					statement();
					}
					}
					State = 547;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET) | (1L << DIM) | (1L << FOR) | (1L << NEXT) | (1L << IF) | (1L << GO) | (1L << RETURN) | (1L << DATA) | (1L << RESTORE) | (1L << READ) | (1L << NEW) | (1L << END) | (1L << STOP) | (1L << RUN) | (1L << CONT) | (1L << LIST) | (1L << LLIST) | (1L << CLEAR) | (1L << INPUT) | (1L << PRINT) | (1L << SET) | (1L << RESET) | (1L << CLS) | (1L << EXEC) | (1L << POKE) | (1L << MOTOR) | (1L << AUDIO) | (1L << SOUND) | (1L << CLOAD) | (1L << CSAVE) | (1L << CSAVEM) | (1L << SKIPF))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPEN - 64)) | (1L << (CLOSE - 64)) | (1L << (LETTERS - 64)))) != 0) );
				}
				break;
			case LINENUMBER:
				{
				State = 549;
				linenumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 552;
			Match(ELSE);
			State = 559;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case RETURN:
			case DATA:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case LETTERS:
				{
				State = 554;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 553;
						statement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 556;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case LINENUMBER:
				{
				State = 558;
				linenumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ColorBasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public GotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotostmtContext gotostmt() {
		GotostmtContext _localctx = new GotostmtContext(Context, State);
		EnterRule(_localctx, 102, RULE_gotostmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			Match(GO);
			State = 562;
			Match(TO);
			State = 563;
			linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ColorBasicParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public GosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GosubstmtContext gosubstmt() {
		GosubstmtContext _localctx = new GosubstmtContext(Context, State);
		EnterRule(_localctx, 104, RULE_gosubstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(GO);
			State = 566;
			Match(SUB);
			State = 567;
			linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ColorBasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext[] linenumber() {
			return GetRuleContexts<LinenumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber(int i) {
			return GetRuleContext<LinenumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ColorBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ColorBasicParser.COMMA, i);
		}
		public OngotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterOngotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitOngotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngotostmtContext ongotostmt() {
		OngotostmtContext _localctx = new OngotostmtContext(Context, State);
		EnterRule(_localctx, 106, RULE_ongotostmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			Match(ON);
			State = 570;
			expression();
			State = 571;
			Match(GO);
			State = 572;
			Match(TO);
			State = 573;
			linenumber();
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 574;
				Match(COMMA);
				State = 575;
				linenumber();
				}
				}
				State = 580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ColorBasicParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext[] linenumber() {
			return GetRuleContexts<LinenumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber(int i) {
			return GetRuleContext<LinenumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ColorBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ColorBasicParser.COMMA, i);
		}
		public OngosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterOngosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitOngosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngosubstmtContext ongosubstmt() {
		OngosubstmtContext _localctx = new OngosubstmtContext(Context, State);
		EnterRule(_localctx, 108, RULE_ongosubstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			Match(ON);
			State = 582;
			expression();
			State = 583;
			Match(GO);
			State = 584;
			Match(SUB);
			State = 585;
			linenumber();
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 586;
				Match(COMMA);
				State = 587;
				linenumber();
				}
				}
				State = 592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ColorBasicParser.RETURN, 0); }
		public ReturnstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterReturnstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitReturnstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstmtContext returnstmt() {
		ReturnstmtContext _localctx = new ReturnstmtContext(Context, State);
		EnterRule(_localctx, 110, RULE_returnstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(ColorBasicParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatumContext[] datum() {
			return GetRuleContexts<DatumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatumContext datum(int i) {
			return GetRuleContext<DatumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ColorBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ColorBasicParser.COMMA, i);
		}
		public DatastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterDatastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitDatastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatastmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatastmtContext datastmt() {
		DatastmtContext _localctx = new DatastmtContext(Context, State);
		EnterRule(_localctx, 112, RULE_datastmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			Match(DATA);
			State = 596;
			datum();
			State = 603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 597;
				Match(COMMA);
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (ADD - 71)) | (1L << (SUBTRACT - 71)) | (1L << (DATUM - 71)) | (1L << (NUMBER - 71)))) != 0)) {
					{
					State = 598;
					datum();
					}
				}

				}
				}
				State = 605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(ColorBasicParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public ReadstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterReadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitReadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadstmtContext readstmt() {
		ReadstmtContext _localctx = new ReadstmtContext(Context, State);
		EnterRule(_localctx, 114, RULE_readstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			Match(READ);
			State = 607;
			varlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestorestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE() { return GetToken(ColorBasicParser.RESTORE, 0); }
		public RestorestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restorestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRestorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRestorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestorestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestorestmtContext restorestmt() {
		RestorestmtContext _localctx = new RestorestmtContext(Context, State);
		EnterRule(_localctx, 116, RULE_restorestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			Match(RESTORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ColorBasicParser.NEW, 0); }
		public NewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterNewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitNewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewstmtContext newstmt() {
		NewstmtContext _localctx = new NewstmtContext(Context, State);
		EnterRule(_localctx, 118, RULE_newstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(NEW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ColorBasicParser.END, 0); }
		public EndstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterEndstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitEndstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndstmtContext endstmt() {
		EndstmtContext _localctx = new EndstmtContext(Context, State);
		EnterRule(_localctx, 120, RULE_endstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(ColorBasicParser.STOP, 0); }
		public StopstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterStopstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitStopstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopstmtContext stopstmt() {
		StopstmtContext _localctx = new StopstmtContext(Context, State);
		EnterRule(_localctx, 122, RULE_stopstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RunstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUN() { return GetToken(ColorBasicParser.RUN, 0); }
		public RunstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRunstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRunstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRunstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RunstmtContext runstmt() {
		RunstmtContext _localctx = new RunstmtContext(Context, State);
		EnterRule(_localctx, 124, RULE_runstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			Match(RUN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClearstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLEAR() { return GetToken(ColorBasicParser.CLEAR, 0); }
		public ClearstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clearstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterClearstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitClearstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClearstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClearstmtContext clearstmt() {
		ClearstmtContext _localctx = new ClearstmtContext(Context, State);
		EnterRule(_localctx, 126, RULE_clearstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(CLEAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONT() { return GetToken(ColorBasicParser.CONT, 0); }
		public ContstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterContstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitContstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContstmtContext contstmt() {
		ContstmtContext _localctx = new ContstmtContext(Context, State);
		EnterRule(_localctx, 128, RULE_contstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(CONT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(ColorBasicParser.LIST, 0); }
		public ListstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_liststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterListstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitListstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListstmtContext liststmt() {
		ListstmtContext _localctx = new ListstmtContext(Context, State);
		EnterRule(_localctx, 130, RULE_liststmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			Match(LIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LliststmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLIST() { return GetToken(ColorBasicParser.LLIST, 0); }
		public LliststmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lliststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLliststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLliststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLliststmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LliststmtContext lliststmt() {
		LliststmtContext _localctx = new LliststmtContext(Context, State);
		EnterRule(_localctx, 132, RULE_lliststmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			Match(LLIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inputstmt1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(ColorBasicParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext[] vardecl() {
			return GetRuleContexts<VardeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl(int i) {
			return GetRuleContext<VardeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ColorBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ColorBasicParser.COMMA, i);
		}
		public Inputstmt1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputstmt1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterInputstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitInputstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputstmt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inputstmt1Context inputstmt1() {
		Inputstmt1Context _localctx = new Inputstmt1Context(Context, State);
		EnterRule(_localctx, 134, RULE_inputstmt1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			Match(INPUT);
			{
			State = 628;
			vardecl();
			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 629;
				Match(COMMA);
				State = 630;
				vardecl();
				}
				}
				State = 635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inputstmt2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(ColorBasicParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(ColorBasicParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_CASSETTE() { return GetToken(ColorBasicParser.DEVICE_CASSETTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ColorBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ColorBasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext[] vardecl() {
			return GetRuleContexts<VardeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl(int i) {
			return GetRuleContext<VardeclContext>(i);
		}
		public Inputstmt2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputstmt2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterInputstmt2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitInputstmt2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputstmt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inputstmt2Context inputstmt2() {
		Inputstmt2Context _localctx = new Inputstmt2Context(Context, State);
		EnterRule(_localctx, 136, RULE_inputstmt2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			Match(INPUT);
			State = 637;
			Match(HASH);
			State = 638;
			Match(DEVICE_CASSETTE);
			State = 639;
			Match(COMMA);
			{
			State = 640;
			vardecl();
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 641;
				Match(COMMA);
				State = 642;
				vardecl();
				}
				}
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ColorBasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPrintstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPrintstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintstmtContext printstmt() {
		PrintstmtContext _localctx = new PrintstmtContext(Context, State);
		EnterRule(_localctx, 138, RULE_printstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			Match(PRINT);
			State = 649;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrinttabstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ColorBasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(ColorBasicParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ColorBasicParser.SEMICOLON, 0); }
		public PrinttabstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printtabstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPrinttabstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPrinttabstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrinttabstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrinttabstmtContext printtabstmt() {
		PrinttabstmtContext _localctx = new PrinttabstmtContext(Context, State);
		EnterRule(_localctx, 140, RULE_printtabstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			Match(PRINT);
			State = 652;
			Match(TAB);
			State = 653;
			Match(LPAREN);
			State = 654;
			expression();
			State = 655;
			Match(RPAREN);
			State = 656;
			Match(SEMICOLON);
			State = 657;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrinthashstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ColorBasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(ColorBasicParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ColorBasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_CASSETTE() { return GetToken(ColorBasicParser.DEVICE_CASSETTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_PRINTER() { return GetToken(ColorBasicParser.DEVICE_PRINTER, 0); }
		public PrinthashstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printhashstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPrinthashstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPrinthashstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrinthashstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrinthashstmtContext printhashstmt() {
		PrinthashstmtContext _localctx = new PrinthashstmtContext(Context, State);
		EnterRule(_localctx, 142, RULE_printhashstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			Match(PRINT);
			State = 660;
			Match(HASH);
			State = 661;
			_la = TokenStream.LA(1);
			if ( !(_la==DEVICE_CASSETTE || _la==DEVICE_PRINTER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 662;
			Match(COMMA);
			State = 663;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintatstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ColorBasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ColorBasicParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ColorBasicParser.COMMA, 0); }
		public PrintatstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printatstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPrintatstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPrintatstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintatstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintatstmtContext printatstmt() {
		PrintatstmtContext _localctx = new PrintatstmtContext(Context, State);
		EnterRule(_localctx, 144, RULE_printatstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			Match(PRINT);
			State = 666;
			Match(AT);
			State = 667;
			expression();
			State = 668;
			Match(COMMA);
			State = 669;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ColorBasicParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ColorBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ColorBasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public SetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetstmtContext setstmt() {
		SetstmtContext _localctx = new SetstmtContext(Context, State);
		EnterRule(_localctx, 146, RULE_setstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			Match(SET);
			State = 672;
			Match(LPAREN);
			State = 673;
			expression();
			State = 674;
			Match(COMMA);
			State = 675;
			expression();
			State = 678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 676;
				Match(COMMA);
				State = 677;
				expression();
				}
				}
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 682;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(ColorBasicParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ColorBasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ColorBasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ColorBasicParser.RPAREN, 0); }
		public ResetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterResetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitResetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetstmtContext resetstmt() {
		ResetstmtContext _localctx = new ResetstmtContext(Context, State);
		EnterRule(_localctx, 148, RULE_resetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(RESET);
			State = 685;
			Match(LPAREN);
			State = 686;
			expression();
			State = 687;
			Match(COMMA);
			State = 688;
			expression();
			State = 689;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLS() { return GetToken(ColorBasicParser.CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterClsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitClsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClsstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClsstmtContext clsstmt() {
		ClsstmtContext _localctx = new ClsstmtContext(Context, State);
		EnterRule(_localctx, 150, RULE_clsstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(CLS);
			State = 692;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXEC() { return GetToken(ColorBasicParser.EXEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExecstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterExecstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitExecstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecstmtContext execstmt() {
		ExecstmtContext _localctx = new ExecstmtContext(Context, State);
		EnterRule(_localctx, 152, RULE_execstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			Match(EXEC);
			State = 695;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PokestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POKE() { return GetToken(ColorBasicParser.POKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ColorBasicParser.COMMA, 0); }
		public PokestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pokestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPokestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PokestmtContext pokestmt() {
		PokestmtContext _localctx = new PokestmtContext(Context, State);
		EnterRule(_localctx, 154, RULE_pokestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			Match(POKE);
			State = 698;
			expression();
			State = 699;
			Match(COMMA);
			State = 700;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MotorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOTOR() { return GetToken(ColorBasicParser.MOTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(ColorBasicParser.OFF, 0); }
		public MotorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_motorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterMotorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitMotorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMotorstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MotorstmtContext motorstmt() {
		MotorstmtContext _localctx = new MotorstmtContext(Context, State);
		EnterRule(_localctx, 156, RULE_motorstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			Match(MOTOR);
			State = 703;
			_la = TokenStream.LA(1);
			if ( !(_la==ON || _la==OFF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AudiostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIO() { return GetToken(ColorBasicParser.AUDIO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(ColorBasicParser.OFF, 0); }
		public AudiostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audiostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterAudiostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitAudiostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAudiostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AudiostmtContext audiostmt() {
		AudiostmtContext _localctx = new AudiostmtContext(Context, State);
		EnterRule(_localctx, 158, RULE_audiostmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			Match(AUDIO);
			State = 706;
			_la = TokenStream.LA(1);
			if ( !(_la==ON || _la==OFF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoundstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUND() { return GetToken(ColorBasicParser.SOUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ColorBasicParser.COMMA, 0); }
		public SoundstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soundstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSoundstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSoundstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoundstmtContext soundstmt() {
		SoundstmtContext _localctx = new SoundstmtContext(Context, State);
		EnterRule(_localctx, 160, RULE_soundstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(SOUND);
			State = 709;
			expression();
			State = 710;
			Match(COMMA);
			State = 711;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloadstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOAD() { return GetToken(ColorBasicParser.CLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CloadstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cloadstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCloadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCloadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloadstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloadstmtContext cloadstmt() {
		CloadstmtContext _localctx = new CloadstmtContext(Context, State);
		EnterRule(_localctx, 162, RULE_cloadstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			Match(CLOAD);
			State = 714;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloadmstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOAD() { return GetToken(ColorBasicParser.CLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ColorBasicParser.COMMA, 0); }
		public CloadmstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cloadmstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCloadmstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCloadmstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloadmstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloadmstmtContext cloadmstmt() {
		CloadmstmtContext _localctx = new CloadmstmtContext(Context, State);
		EnterRule(_localctx, 164, RULE_cloadmstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			Match(CLOAD);
			State = 717;
			expression();
			State = 718;
			Match(COMMA);
			State = 719;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsavestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSAVE() { return GetToken(ColorBasicParser.CSAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ColorBasicParser.COMMA, 0); }
		public CsavestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csavestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCsavestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCsavestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsavestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsavestmtContext csavestmt() {
		CsavestmtContext _localctx = new CsavestmtContext(Context, State);
		EnterRule(_localctx, 166, RULE_csavestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			Match(CSAVE);
			State = 722;
			expression();
			State = 723;
			Match(COMMA);
			State = 724;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsavemstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSAVEM() { return GetToken(ColorBasicParser.CSAVEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ColorBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ColorBasicParser.COMMA, i);
		}
		public CsavemstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csavemstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCsavemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCsavemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsavemstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsavemstmtContext csavemstmt() {
		CsavemstmtContext _localctx = new CsavemstmtContext(Context, State);
		EnterRule(_localctx, 168, RULE_csavemstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			Match(CSAVEM);
			State = 727;
			expression();
			State = 728;
			Match(COMMA);
			State = 729;
			expression();
			State = 730;
			Match(COMMA);
			State = 731;
			expression();
			State = 732;
			Match(COMMA);
			State = 733;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipfstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIPF() { return GetToken(ColorBasicParser.SKIPF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SkipfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipfstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSkipfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSkipfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipfstmtContext skipfstmt() {
		SkipfstmtContext _localctx = new SkipfstmtContext(Context, State);
		EnterRule(_localctx, 170, RULE_skipfstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			Match(SKIPF);
			State = 736;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(ColorBasicParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ColorBasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ColorBasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(ColorBasicParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_KEYBOARD() { return GetToken(ColorBasicParser.DEVICE_KEYBOARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_CASSETTE() { return GetToken(ColorBasicParser.DEVICE_CASSETTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_PRINTER() { return GetToken(ColorBasicParser.DEVICE_PRINTER, 0); }
		public OpenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterOpenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitOpenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenstmtContext openstmt() {
		OpenstmtContext _localctx = new OpenstmtContext(Context, State);
		EnterRule(_localctx, 172, RULE_openstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			Match(OPEN);
			State = 739;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 740;
			Match(COMMA);
			State = 741;
			Match(HASH);
			State = 742;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (DEVICE_KEYBOARD - 88)) | (1L << (DEVICE_CASSETTE - 88)) | (1L << (DEVICE_PRINTER - 88)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 743;
			Match(COMMA);
			State = 744;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(ColorBasicParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(ColorBasicParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_CASSETTE() { return GetToken(ColorBasicParser.DEVICE_CASSETTE, 0); }
		public ClosestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterClosestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitClosestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosestmtContext closestmt() {
		ClosestmtContext _localctx = new ClosestmtContext(Context, State);
		EnterRule(_localctx, 174, RULE_closestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746;
			Match(CLOSE);
			State = 747;
			Match(HASH);
			State = 749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEVICE_CASSETTE) {
				{
				State = 748;
				Match(DEVICE_CASSETTE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x64', '\x2F2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x3', '\x2', '\x6', '\x2', '\xB4', '\n', 
		'\x2', '\r', '\x2', '\xE', '\x2', '\xB5', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\xBC', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\xBF', '\v', '\x3', '\x3', '\x4', '\x6', '\x4', '\xC2', 
		'\n', '\x4', '\r', '\x4', '\xE', '\x4', '\xC3', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\xC8', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\xF4', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x110', '\n', '\a', '\x3', '\b', '\x5', '\b', '\x113', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x6', '\t', '\x118', 
		'\n', '\t', '\r', '\t', '\xE', '\t', '\x119', '\x3', '\t', '\x5', '\t', 
		'\x11D', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', '\x124', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'\x127', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\x12C', '\n', '\v', '\f', '\v', '\xE', '\v', '\x12F', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x134', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\x137', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\x13D', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x143', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\x146', '\v', '\xE', '\x5', '\xE', '\x148', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x150', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x156', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x160', 
		'\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x164', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\x167', '\v', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', 
		'\x16E', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x171', '\v', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\a', '\x17', '\x178', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x17B', 
		'\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x184', '\n', 
		'\x19', '\f', '\x19', '\xE', '\x19', '\x187', '\v', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x18B', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', 
		'\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', 
		'\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '/', '\x5', '/', '\x1F7', '\n', '/', '\x3', '/', '\x3', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x5', '\x31', '\x206', '\n', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x20C', '\n', 
		'\x32', '\f', '\x32', '\xE', '\x32', '\x20F', '\v', '\x32', '\x5', '\x32', 
		'\x211', '\n', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', 
		'\x33', '\x216', '\n', '\x33', '\x3', '\x33', '\x6', '\x33', '\x219', 
		'\n', '\x33', '\r', '\x33', '\xE', '\x33', '\x21A', '\x3', '\x33', '\x5', 
		'\x33', '\x21E', '\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x6', '\x34', '\x224', '\n', '\x34', '\r', '\x34', '\xE', 
		'\x34', '\x225', '\x3', '\x34', '\x5', '\x34', '\x229', '\n', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x6', '\x34', '\x22D', '\n', '\x34', '\r', 
		'\x34', '\xE', '\x34', '\x22E', '\x3', '\x34', '\x5', '\x34', '\x232', 
		'\n', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\a', '\x37', '\x243', '\n', '\x37', '\f', '\x37', '\xE', 
		'\x37', '\x246', '\v', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\a', '\x38', 
		'\x24F', '\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x252', '\v', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x5', ':', '\x25A', '\n', ':', '\a', ':', '\x25C', '\n', ':', '\f', 
		':', '\xE', ':', '\x25F', '\v', ':', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', 
		'\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\a', '\x45', '\x27A', '\n', '\x45', '\f', '\x45', '\xE', '\x45', 
		'\x27D', '\v', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\a', '\x46', '\x286', 
		'\n', '\x46', '\f', '\x46', '\xE', '\x46', '\x289', '\v', '\x46', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 
		'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x6', 
		'K', '\x2A9', '\n', 'K', '\r', 'K', '\xE', 'K', '\x2AA', '\x3', 'K', '\x3', 
		'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 
		'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 
		'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'S', '\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 
		'Y', '\x2F0', '\n', 'Y', '\x3', 'Y', '\x2', '\x2', 'Z', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', 
		'~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', 
		'\x92', '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', 
		'\xA4', '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\x2', '\n', '\x3', 
		'\x2', 'I', 'J', '\x3', '\x2', 'K', 'L', '\x3', '\x2', 'U', 'V', '\x4', 
		'\x2', '_', '_', '\x61', '\x61', '\x3', '\x2', '[', '\\', '\x3', '\x2', 
		'$', '%', '\x3', '\x2', '\x3', '\x4', '\x3', '\x2', 'Z', '\\', '\x2', 
		'\x304', '\x2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x4', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\xC1', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\n', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x10F', '\x3', '\x2', '\x2', '\x2', '\xE', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x117', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x14', '\x128', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x130', '\x3', '\x2', '\x2', '\x2', '\x18', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x147', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x155', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x157', '\x3', '\x2', '\x2', '\x2', '\"', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x15D', '\x3', '\x2', '\x2', '\x2', '&', '\x161', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x16A', '\x3', '\x2', '\x2', '\x2', ',', '\x172', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x30', '\x180', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x36', '\x191', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x196', '\x3', '\x2', '\x2', '\x2', ':', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x1A0', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x1A5', '\x3', '\x2', '\x2', '\x2', '@', '\x1AA', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x1C2', '\x3', '\x2', '\x2', '\x2', 'J', '\x1C9', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x1D0', '\x3', '\x2', '\x2', '\x2', 'N', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1D7', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1DC', '\x3', '\x2', '\x2', '\x2', 'T', '\x1E1', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x1E6', '\x3', '\x2', '\x2', '\x2', 'X', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x1F6', '\x3', '\x2', '\x2', '\x2', '^', '\x1FA', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x62', '\x207', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x212', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x21F', '\x3', '\x2', '\x2', '\x2', 'h', '\x233', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x237', '\x3', '\x2', '\x2', '\x2', 'l', '\x23B', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x247', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x253', '\x3', '\x2', '\x2', '\x2', 'r', '\x255', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x260', '\x3', '\x2', '\x2', '\x2', 'v', '\x263', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x265', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x267', '\x3', '\x2', '\x2', '\x2', '|', '\x269', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x80', '\x26D', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x26F', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x271', '\x3', '\x2', '\x2', '\x2', '\x86', '\x273', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x275', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x27E', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x28A', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x295', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x94', '\x2A1', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x2AE', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x2B8', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x2C0', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x2C3', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x2CB', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x2D3', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x2D8', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x2E4', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4', 
		'\x5', '\x4', '\x3', '\x2', '\xB3', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x5', '\x6', '\x4', '\x2', 
		'\xB8', '\xBD', '\x5', '\b', '\x5', '\x2', '\xB9', '\xBA', '\a', 'R', 
		'\x2', '\x2', '\xBA', '\xBC', '\x5', '\b', '\x5', '\x2', '\xBB', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x5', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', '\a', '\x61', '\x2', '\x2', 
		'\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC8', '\x5', '\n', '\x6', '\x2', '\xC6', '\xC8', '\a', '\x44', 
		'\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xF4', '\x5', 'p', '\x39', '\x2', '\xCA', '\xF4', '\x5', 'v', 
		'<', '\x2', '\xCB', '\xF4', '\x5', '\x8C', 'G', '\x2', '\xCC', '\xF4', 
		'\x5', '\x62', '\x32', '\x2', '\xCD', '\xF4', '\x5', '\x9C', 'O', '\x2', 
		'\xCE', '\xF4', '\x5', '\x64', '\x33', '\x2', '\xCF', '\xF4', '\x5', '\x66', 
		'\x34', '\x2', '\xD0', '\xF4', '\x5', '`', '\x31', '\x2', '\xD1', '\xF4', 
		'\x5', '\x88', '\x45', '\x2', '\xD2', '\xF4', '\x5', '\x8A', '\x46', '\x2', 
		'\xD3', '\xF4', '\x5', '^', '\x30', '\x2', '\xD4', '\xF4', '\x5', 'h', 
		'\x35', '\x2', '\xD5', '\xF4', '\x5', 'j', '\x36', '\x2', '\xD6', '\xF4', 
		'\x5', 't', ';', '\x2', '\xD7', '\xF4', '\x5', 'r', ':', '\x2', '\xD8', 
		'\xF4', '\x5', '\x8C', 'G', '\x2', '\xD9', '\xF4', '\x5', '\x8E', 'H', 
		'\x2', '\xDA', '\xF4', '\x5', '\x90', 'I', '\x2', '\xDB', '\xF4', '\x5', 
		'\x92', 'J', '\x2', '\xDC', '\xF4', '\x5', 'x', '=', '\x2', '\xDD', '\xF4', 
		'\x5', '|', '?', '\x2', '\xDE', '\xF4', '\x5', 'z', '>', '\x2', '\xDF', 
		'\xF4', '\x5', '~', '@', '\x2', '\xE0', '\xF4', '\x5', '\x80', '\x41', 
		'\x2', '\xE1', '\xF4', '\x5', '\x82', '\x42', '\x2', '\xE2', '\xF4', '\x5', 
		'\x84', '\x43', '\x2', '\xE3', '\xF4', '\x5', '\x86', '\x44', '\x2', '\xE4', 
		'\xF4', '\x5', '\\', '/', '\x2', '\xE5', '\xF4', '\x5', '\x94', 'K', '\x2', 
		'\xE6', '\xF4', '\x5', '\x96', 'L', '\x2', '\xE7', '\xF4', '\x5', '\x98', 
		'M', '\x2', '\xE8', '\xF4', '\x5', '\x9A', 'N', '\x2', '\xE9', '\xF4', 
		'\x5', '\x9E', 'P', '\x2', '\xEA', '\xF4', '\x5', '\xA0', 'Q', '\x2', 
		'\xEB', '\xF4', '\x5', '\xA2', 'R', '\x2', '\xEC', '\xF4', '\x5', '\xA4', 
		'S', '\x2', '\xED', '\xF4', '\x5', '\xA6', 'T', '\x2', '\xEE', '\xF4', 
		'\x5', '\xA8', 'U', '\x2', '\xEF', '\xF4', '\x5', '\xAA', 'V', '\x2', 
		'\xF0', '\xF4', '\x5', '\xAC', 'W', '\x2', '\xF1', '\xF4', '\x5', '\xAE', 
		'X', '\x2', '\xF2', '\xF4', '\x5', '\xB0', 'Y', '\x2', '\xF3', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xE0', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xF2', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\v', '\x3', '\x2', '\x2', '\x2', '\xF5', '\x110', '\a', '\x63', 
		'\x2', '\x2', '\xF6', '\x110', '\x5', '\xE', '\b', '\x2', '\xF7', '\x110', 
		'\x5', ',', '\x17', '\x2', '\xF8', '\x110', '\x5', '\x44', '#', '\x2', 
		'\xF9', '\x110', '\x5', '@', '!', '\x2', '\xFA', '\x110', '\x5', 'L', 
		'\'', '\x2', '\xFB', '\x110', '\x5', '\x46', '$', '\x2', '\xFC', '\x110', 
		'\x5', 'T', '+', '\x2', '\xFD', '\x110', '\x5', ':', '\x1E', '\x2', '\xFE', 
		'\x110', '\x5', 'H', '%', '\x2', '\xFF', '\x110', '\x5', '\x42', '\"', 
		'\x2', '\x100', '\x110', '\x5', 'J', '&', '\x2', '\x101', '\x110', '\x5', 
		'<', '\x1F', '\x2', '\x102', '\x110', '\x5', '>', ' ', '\x2', '\x103', 
		'\x110', '\x5', '\x38', '\x1D', '\x2', '\x104', '\x110', '\x5', '\x34', 
		'\x1B', '\x2', '\x105', '\x110', '\x5', 'N', '(', '\x2', '\x106', '\x110', 
		'\x5', 'P', ')', '\x2', '\x107', '\x110', '\x5', 'R', '*', '\x2', '\x108', 
		'\x110', '\x5', 'V', ',', '\x2', '\x109', '\x110', '\x5', 'X', '-', '\x2', 
		'\x10A', '\x110', '\x5', 'Z', '.', '\x2', '\x10B', '\x10C', '\a', 'X', 
		'\x2', '\x2', '\x10C', '\x10D', '\x5', '\x1A', '\xE', '\x2', '\x10D', 
		'\x10E', '\a', 'Y', '\x2', '\x2', '\x10E', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x10F', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\x10F', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x10F', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\x10F', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x102', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x104', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\r', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x113', '\t', '\x2', '\x2', '\x2', '\x112', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x112', '\x113', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\a', '\x62', '\x2', '\x2', 
		'\x115', '\xF', '\x3', '\x2', '\x2', '\x2', '\x116', '\x118', '\a', 'W', 
		'\x2', '\x2', '\x117', '\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11D', '\t', '\x2', '\x2', '\x2', '\x11C', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', 
		'\x5', '\f', '\a', '\x2', '\x11F', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x125', '\x5', '\x10', '\t', '\x2', '\x121', '\x122', '\a', 
		'S', '\x2', '\x2', '\x122', '\x124', '\x5', '\x10', '\t', '\x2', '\x123', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x124', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12D', '\x5', 
		'\x12', '\n', '\x2', '\x129', '\x12A', '\t', '\x3', '\x2', '\x2', '\x12A', 
		'\x12C', '\x5', '\x12', '\n', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x15', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x135', '\x5', '\x14', '\v', '\x2', '\x131', 
		'\x132', '\t', '\x2', '\x2', '\x2', '\x132', '\x134', '\x5', '\x14', '\v', 
		'\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', '\x134', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x135', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x13C', '\x5', '\x16', '\f', '\x2', '\x139', '\x13A', '\x5', '\x1C', 
		'\xF', '\x2', '\x13A', '\x13B', '\x5', '\x16', '\f', '\x2', '\x13B', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x148', '\x5', '\f', '\a', '\x2', '\x13F', 
		'\x144', '\x5', '\x18', '\r', '\x2', '\x140', '\x141', '\t', '\x4', '\x2', 
		'\x2', '\x141', '\x143', '\x5', '\x18', '\r', '\x2', '\x142', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x142', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x145', '\x148', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x147', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x148', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x150', '\x5', ' ', '\x11', '\x2', 
		'\x14A', '\x150', '\x5', '\"', '\x12', '\x2', '\x14B', '\x150', '\x5', 
		'\x1E', '\x10', '\x2', '\x14C', '\x150', '\a', 'O', '\x2', '\x2', '\x14D', 
		'\x150', '\a', 'M', '\x2', '\x2', '\x14E', '\x150', '\a', 'N', '\x2', 
		'\x2', '\x14F', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\a', 'N', '\x2', 
		'\x2', '\x152', '\x156', '\a', 'M', '\x2', '\x2', '\x153', '\x154', '\a', 
		'M', '\x2', '\x2', '\x154', '\x156', '\a', 'N', '\x2', '\x2', '\x155', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x155', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', 
		'\a', 'M', '\x2', '\x2', '\x158', '\x159', '\a', 'O', '\x2', '\x2', '\x159', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\a', 'N', '\x2', '\x2', 
		'\x15B', '\x15C', '\a', 'O', '\x2', '\x2', '\x15C', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x15D', '\x15F', '\x5', '&', '\x14', '\x2', '\x15E', '\x160', 
		'\x5', '(', '\x15', '\x2', '\x15F', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x161', '\x165', '\a', '_', '\x2', '\x2', '\x162', '\x164', 
		'\t', '\x5', '\x2', '\x2', '\x163', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x167', '\x3', '\x2', '\x2', '\x2', '\x165', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x166', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x167', '\x165', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\x169', '\a', '\x46', '\x2', '\x2', '\x169', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x16F', '\x5', ',', '\x17', '\x2', '\x16B', 
		'\x16C', '\a', 'P', '\x2', '\x2', '\x16C', '\x16E', '\x5', ',', '\x17', 
		'\x2', '\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x16F', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x170', '\x3', '\x2', '\x2', '\x2', '\x170', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x171', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x172', '\x179', 
		'\x5', '$', '\x13', '\x2', '\x173', '\x174', '\a', 'X', '\x2', '\x2', 
		'\x174', '\x175', '\x5', '\x30', '\x19', '\x2', '\x175', '\x176', '\a', 
		'Y', '\x2', '\x2', '\x176', '\x178', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x178', '\x17B', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x177', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x17A', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\x5', 
		',', '\x17', '\x2', '\x17D', '\x17E', '\a', 'O', '\x2', '\x2', '\x17E', 
		'\x17F', '\x5', '\x30', '\x19', '\x2', '\x17F', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x185', '\x5', '\x1A', '\xE', '\x2', '\x181', '\x182', 
		'\a', 'P', '\x2', '\x2', '\x182', '\x184', '\x5', '\x1A', '\xE', '\x2', 
		'\x183', '\x181', '\x3', '\x2', '\x2', '\x2', '\x184', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x183', '\x3', '\x2', '\x2', '\x2', '\x185', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x186', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x187', '\x185', '\x3', '\x2', '\x2', '\x2', '\x188', '\x18B', 
		'\x5', '\xE', '\b', '\x2', '\x189', '\x18B', '\a', '^', '\x2', '\x2', 
		'\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x18B', '\x33', '\x3', '\x2', '\x2', '\x2', '\x18C', 
		'\x18D', '\a', '\a', '\x2', '\x2', '\x18D', '\x18E', '\a', 'X', '\x2', 
		'\x2', '\x18E', '\x18F', '\x5', '\x1A', '\xE', '\x2', '\x18F', '\x190', 
		'\a', 'Y', '\x2', '\x2', '\x190', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x192', '\a', '\b', '\x2', '\x2', '\x192', '\x193', '\a', 'X', 
		'\x2', '\x2', '\x193', '\x194', '\x5', '\x1A', '\xE', '\x2', '\x194', 
		'\x195', '\a', 'Y', '\x2', '\x2', '\x195', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x197', '\a', '\t', '\x2', '\x2', '\x197', '\x198', '\a', 
		'X', '\x2', '\x2', '\x198', '\x199', '\x5', '\x1A', '\xE', '\x2', '\x199', 
		'\x19A', '\a', 'Y', '\x2', '\x2', '\x19A', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x19B', '\x19C', '\a', '\n', '\x2', '\x2', '\x19C', '\x19D', '\a', 
		'X', '\x2', '\x2', '\x19D', '\x19E', '\x5', '\x1A', '\xE', '\x2', '\x19E', 
		'\x19F', '\a', 'Y', '\x2', '\x2', '\x19F', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\x1A1', '\a', '\v', '\x2', '\x2', '\x1A1', '\x1A2', '\a', 'X', 
		'\x2', '\x2', '\x1A2', '\x1A3', '\x5', '\x1A', '\xE', '\x2', '\x1A3', 
		'\x1A4', '\a', 'Y', '\x2', '\x2', '\x1A4', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x1A6', '\a', '\f', '\x2', '\x2', '\x1A6', '\x1A7', '\a', 'X', 
		'\x2', '\x2', '\x1A7', '\x1A8', '\x5', '\x1A', '\xE', '\x2', '\x1A8', 
		'\x1A9', '\a', 'Y', '\x2', '\x2', '\x1A9', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x1AA', '\x1AB', '\a', '\r', '\x2', '\x2', '\x1AB', '\x1AC', '\a', 'X', 
		'\x2', '\x2', '\x1AC', '\x1AD', '\x5', '\x1A', '\xE', '\x2', '\x1AD', 
		'\x1AE', '\a', 'Y', '\x2', '\x2', '\x1AE', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x1AF', '\x1B0', '\a', '\xE', '\x2', '\x2', '\x1B0', '\x1B1', 
		'\a', 'X', '\x2', '\x2', '\x1B1', '\x1B2', '\x5', '\x1A', '\xE', '\x2', 
		'\x1B2', '\x1B3', '\a', 'Y', '\x2', '\x2', '\x1B3', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x1B4', '\x1B5', '\a', '\xF', '\x2', '\x2', '\x1B5', '\x1B6', 
		'\a', 'X', '\x2', '\x2', '\x1B6', '\x1B7', '\x5', '\x1A', '\xE', '\x2', 
		'\x1B7', '\x1B8', '\a', 'Y', '\x2', '\x2', '\x1B8', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x1B9', '\x1BA', '\a', '\x10', '\x2', '\x2', '\x1BA', '\x1BB', 
		'\a', 'X', '\x2', '\x2', '\x1BB', '\x1BC', '\x5', '\x1A', '\xE', '\x2', 
		'\x1BC', '\x1BD', '\a', 'P', '\x2', '\x2', '\x1BD', '\x1BE', '\x5', '\x1A', 
		'\xE', '\x2', '\x1BE', '\x1BF', '\a', 'P', '\x2', '\x2', '\x1BF', '\x1C0', 
		'\x5', '\x1A', '\xE', '\x2', '\x1C0', '\x1C1', '\a', 'Y', '\x2', '\x2', 
		'\x1C1', 'G', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\a', '\x11', 
		'\x2', '\x2', '\x1C3', '\x1C4', '\a', 'X', '\x2', '\x2', '\x1C4', '\x1C5', 
		'\x5', '\x1A', '\xE', '\x2', '\x1C5', '\x1C6', '\a', 'P', '\x2', '\x2', 
		'\x1C6', '\x1C7', '\x5', '\x1A', '\xE', '\x2', '\x1C7', '\x1C8', '\a', 
		'Y', '\x2', '\x2', '\x1C8', 'I', '\x3', '\x2', '\x2', '\x2', '\x1C9', 
		'\x1CA', '\a', '\x12', '\x2', '\x2', '\x1CA', '\x1CB', '\a', 'X', '\x2', 
		'\x2', '\x1CB', '\x1CC', '\x5', '\x1A', '\xE', '\x2', '\x1CC', '\x1CD', 
		'\a', 'P', '\x2', '\x2', '\x1CD', '\x1CE', '\x5', '\x1A', '\xE', '\x2', 
		'\x1CE', '\x1CF', '\a', 'Y', '\x2', '\x2', '\x1CF', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x1D0', '\x1D1', '\a', '\x13', '\x2', '\x2', '\x1D1', '\x1D2', 
		'\a', 'X', '\x2', '\x2', '\x1D2', '\x1D3', '\x5', '\x1A', '\xE', '\x2', 
		'\x1D3', '\x1D4', '\a', 'Y', '\x2', '\x2', '\x1D4', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x1D5', '\x1D6', '\a', '\x14', '\x2', '\x2', '\x1D6', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\a', '\x15', '\x2', '\x2', 
		'\x1D8', '\x1D9', '\a', 'X', '\x2', '\x2', '\x1D9', '\x1DA', '\x5', '\x1A', 
		'\xE', '\x2', '\x1DA', '\x1DB', '\a', 'Y', '\x2', '\x2', '\x1DB', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', '\a', '\x16', '\x2', '\x2', 
		'\x1DD', '\x1DE', '\a', 'X', '\x2', '\x2', '\x1DE', '\x1DF', '\x5', '\x1A', 
		'\xE', '\x2', '\x1DF', '\x1E0', '\a', 'Y', '\x2', '\x2', '\x1E0', 'S', 
		'\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\a', '\x17', '\x2', '\x2', 
		'\x1E2', '\x1E3', '\a', 'X', '\x2', '\x2', '\x1E3', '\x1E4', '\x5', '\x1A', 
		'\xE', '\x2', '\x1E4', '\x1E5', '\a', 'Y', '\x2', '\x2', '\x1E5', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\a', '\x18', '\x2', '\x2', 
		'\x1E7', '\x1E8', '\a', 'X', '\x2', '\x2', '\x1E8', '\x1E9', '\x5', '\x1A', 
		'\xE', '\x2', '\x1E9', '\x1EA', '\a', 'P', '\x2', '\x2', '\x1EA', '\x1EB', 
		'\x5', '\x1A', '\xE', '\x2', '\x1EB', '\x1EC', '\a', 'Y', '\x2', '\x2', 
		'\x1EC', 'W', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\a', '\x19', 
		'\x2', '\x2', '\x1EE', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', 
		'\a', '\x1A', '\x2', '\x2', '\x1F0', '\x1F1', '\a', '`', '\x2', '\x2', 
		'\x1F1', '\x1F2', '\a', 'X', '\x2', '\x2', '\x1F2', '\x1F3', '\x5', '\x1A', 
		'\xE', '\x2', '\x1F3', '\x1F4', '\a', 'Y', '\x2', '\x2', '\x1F4', '[', 
		'\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F7', '\a', '\x5', '\x2', '\x2', 
		'\x1F6', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\x3', 
		'\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F8', 
		'\x1F9', '\x5', '.', '\x18', '\x2', '\x1F9', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x1FA', '\x1FB', '\a', '\x6', '\x2', '\x2', '\x1FB', '\x1FC', 
		'\x5', '*', '\x16', '\x2', '\x1FC', '_', '\x3', '\x2', '\x2', '\x2', '\x1FD', 
		'\x1FE', '\a', '\x1B', '\x2', '\x2', '\x1FE', '\x1FF', '\x5', ',', '\x17', 
		'\x2', '\x1FF', '\x200', '\a', 'O', '\x2', '\x2', '\x200', '\x201', '\x5', 
		'\x1A', '\xE', '\x2', '\x201', '\x202', '\a', '\x1C', '\x2', '\x2', '\x202', 
		'\x205', '\x5', '\x1A', '\xE', '\x2', '\x203', '\x204', '\a', '\x1D', 
		'\x2', '\x2', '\x204', '\x206', '\x5', '\x1A', '\xE', '\x2', '\x205', 
		'\x203', '\x3', '\x2', '\x2', '\x2', '\x205', '\x206', '\x3', '\x2', '\x2', 
		'\x2', '\x206', '\x61', '\x3', '\x2', '\x2', '\x2', '\x207', '\x210', 
		'\a', '\x1E', '\x2', '\x2', '\x208', '\x20D', '\x5', ',', '\x17', '\x2', 
		'\x209', '\x20A', '\a', 'P', '\x2', '\x2', '\x20A', '\x20C', '\x5', ',', 
		'\x17', '\x2', '\x20B', '\x209', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20B', '\x3', '\x2', '\x2', 
		'\x2', '\x20D', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x211', 
		'\x3', '\x2', '\x2', '\x2', '\x20F', '\x20D', '\x3', '\x2', '\x2', '\x2', 
		'\x210', '\x208', '\x3', '\x2', '\x2', '\x2', '\x210', '\x211', '\x3', 
		'\x2', '\x2', '\x2', '\x211', '\x63', '\x3', '\x2', '\x2', '\x2', '\x212', 
		'\x213', '\a', '\x1F', '\x2', '\x2', '\x213', '\x215', '\x5', '\x1A', 
		'\xE', '\x2', '\x214', '\x216', '\a', ' ', '\x2', '\x2', '\x215', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\x215', '\x216', '\x3', '\x2', '\x2', '\x2', 
		'\x216', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x217', '\x219', '\x5', 
		'\n', '\x6', '\x2', '\x218', '\x217', '\x3', '\x2', '\x2', '\x2', '\x219', 
		'\x21A', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x218', '\x3', '\x2', '\x2', 
		'\x2', '\x21A', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21E', 
		'\x3', '\x2', '\x2', '\x2', '\x21C', '\x21E', '\x5', '\x6', '\x4', '\x2', 
		'\x21D', '\x218', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21C', '\x3', 
		'\x2', '\x2', '\x2', '\x21E', '\x65', '\x3', '\x2', '\x2', '\x2', '\x21F', 
		'\x220', '\a', '\x1F', '\x2', '\x2', '\x220', '\x221', '\x5', '\x1A', 
		'\xE', '\x2', '\x221', '\x228', '\a', ' ', '\x2', '\x2', '\x222', '\x224', 
		'\x5', '\n', '\x6', '\x2', '\x223', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'\x224', '\x225', '\x3', '\x2', '\x2', '\x2', '\x225', '\x223', '\x3', 
		'\x2', '\x2', '\x2', '\x225', '\x226', '\x3', '\x2', '\x2', '\x2', '\x226', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x227', '\x229', '\x5', '\x6', '\x4', 
		'\x2', '\x228', '\x223', '\x3', '\x2', '\x2', '\x2', '\x228', '\x227', 
		'\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\x3', '\x2', '\x2', '\x2', 
		'\x22A', '\x231', '\a', '!', '\x2', '\x2', '\x22B', '\x22D', '\x5', '\n', 
		'\x6', '\x2', '\x22C', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', 
		'\x3', '\x2', '\x2', '\x2', '\x22E', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'\x22E', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x232', '\x3', 
		'\x2', '\x2', '\x2', '\x230', '\x232', '\x5', '\x6', '\x4', '\x2', '\x231', 
		'\x22C', '\x3', '\x2', '\x2', '\x2', '\x231', '\x230', '\x3', '\x2', '\x2', 
		'\x2', '\x232', 'g', '\x3', '\x2', '\x2', '\x2', '\x233', '\x234', '\a', 
		'\"', '\x2', '\x2', '\x234', '\x235', '\a', '\x1C', '\x2', '\x2', '\x235', 
		'\x236', '\x5', '\x6', '\x4', '\x2', '\x236', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x238', '\a', '\"', '\x2', '\x2', '\x238', '\x239', '\a', 
		'#', '\x2', '\x2', '\x239', '\x23A', '\x5', '\x6', '\x4', '\x2', '\x23A', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x23C', '\a', '$', '\x2', '\x2', 
		'\x23C', '\x23D', '\x5', '\x1A', '\xE', '\x2', '\x23D', '\x23E', '\a', 
		'\"', '\x2', '\x2', '\x23E', '\x23F', '\a', '\x1C', '\x2', '\x2', '\x23F', 
		'\x244', '\x5', '\x6', '\x4', '\x2', '\x240', '\x241', '\a', 'P', '\x2', 
		'\x2', '\x241', '\x243', '\x5', '\x6', '\x4', '\x2', '\x242', '\x240', 
		'\x3', '\x2', '\x2', '\x2', '\x243', '\x246', '\x3', '\x2', '\x2', '\x2', 
		'\x244', '\x242', '\x3', '\x2', '\x2', '\x2', '\x244', '\x245', '\x3', 
		'\x2', '\x2', '\x2', '\x245', 'm', '\x3', '\x2', '\x2', '\x2', '\x246', 
		'\x244', '\x3', '\x2', '\x2', '\x2', '\x247', '\x248', '\a', '$', '\x2', 
		'\x2', '\x248', '\x249', '\x5', '\x1A', '\xE', '\x2', '\x249', '\x24A', 
		'\a', '\"', '\x2', '\x2', '\x24A', '\x24B', '\a', '#', '\x2', '\x2', '\x24B', 
		'\x250', '\x5', '\x6', '\x4', '\x2', '\x24C', '\x24D', '\a', 'P', '\x2', 
		'\x2', '\x24D', '\x24F', '\x5', '\x6', '\x4', '\x2', '\x24E', '\x24C', 
		'\x3', '\x2', '\x2', '\x2', '\x24F', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x250', '\x251', '\x3', 
		'\x2', '\x2', '\x2', '\x251', 'o', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x250', '\x3', '\x2', '\x2', '\x2', '\x253', '\x254', '\a', '&', '\x2', 
		'\x2', '\x254', 'q', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', '\a', 
		'\'', '\x2', '\x2', '\x256', '\x25D', '\x5', '\x32', '\x1A', '\x2', '\x257', 
		'\x259', '\a', 'P', '\x2', '\x2', '\x258', '\x25A', '\x5', '\x32', '\x1A', 
		'\x2', '\x259', '\x258', '\x3', '\x2', '\x2', '\x2', '\x259', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x25A', '\x25C', '\x3', '\x2', '\x2', '\x2', 
		'\x25B', '\x257', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25F', '\x3', 
		'\x2', '\x2', '\x2', '\x25D', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25D', 
		'\x25E', '\x3', '\x2', '\x2', '\x2', '\x25E', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x25F', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', 
		'\a', ')', '\x2', '\x2', '\x261', '\x262', '\x5', '*', '\x16', '\x2', 
		'\x262', 'u', '\x3', '\x2', '\x2', '\x2', '\x263', '\x264', '\a', '(', 
		'\x2', '\x2', '\x264', 'w', '\x3', '\x2', '\x2', '\x2', '\x265', '\x266', 
		'\a', '*', '\x2', '\x2', '\x266', 'y', '\x3', '\x2', '\x2', '\x2', '\x267', 
		'\x268', '\a', '+', '\x2', '\x2', '\x268', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x269', '\x26A', '\a', ',', '\x2', '\x2', '\x26A', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x26B', '\x26C', '\a', '-', '\x2', '\x2', '\x26C', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\a', '\x31', '\x2', '\x2', 
		'\x26E', '\x81', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x270', '\a', '.', 
		'\x2', '\x2', '\x270', '\x83', '\x3', '\x2', '\x2', '\x2', '\x271', '\x272', 
		'\a', '/', '\x2', '\x2', '\x272', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x273', '\x274', '\a', '\x30', '\x2', '\x2', '\x274', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x275', '\x276', '\a', '\x32', '\x2', '\x2', '\x276', 
		'\x27B', '\x5', ',', '\x17', '\x2', '\x277', '\x278', '\a', 'P', '\x2', 
		'\x2', '\x278', '\x27A', '\x5', ',', '\x17', '\x2', '\x279', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '\x27A', '\x27D', '\x3', '\x2', '\x2', '\x2', 
		'\x27B', '\x279', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x27C', '\x3', 
		'\x2', '\x2', '\x2', '\x27C', '\x89', '\x3', '\x2', '\x2', '\x2', '\x27D', 
		'\x27B', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\a', '\x32', '\x2', 
		'\x2', '\x27F', '\x280', '\a', 'T', '\x2', '\x2', '\x280', '\x281', '\a', 
		'[', '\x2', '\x2', '\x281', '\x282', '\a', 'P', '\x2', '\x2', '\x282', 
		'\x287', '\x5', ',', '\x17', '\x2', '\x283', '\x284', '\a', 'P', '\x2', 
		'\x2', '\x284', '\x286', '\x5', ',', '\x17', '\x2', '\x285', '\x283', 
		'\x3', '\x2', '\x2', '\x2', '\x286', '\x289', '\x3', '\x2', '\x2', '\x2', 
		'\x287', '\x285', '\x3', '\x2', '\x2', '\x2', '\x287', '\x288', '\x3', 
		'\x2', '\x2', '\x2', '\x288', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x289', 
		'\x287', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x28B', '\a', '\x33', '\x2', 
		'\x2', '\x28B', '\x28C', '\x5', '\x1A', '\xE', '\x2', '\x28C', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', '\a', '\x33', '\x2', '\x2', 
		'\x28E', '\x28F', '\a', '\x34', '\x2', '\x2', '\x28F', '\x290', '\a', 
		'X', '\x2', '\x2', '\x290', '\x291', '\x5', '\x1A', '\xE', '\x2', '\x291', 
		'\x292', '\a', 'Y', '\x2', '\x2', '\x292', '\x293', '\a', 'Q', '\x2', 
		'\x2', '\x293', '\x294', '\x5', '\x1A', '\xE', '\x2', '\x294', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x295', '\x296', '\a', '\x33', '\x2', '\x2', 
		'\x296', '\x297', '\a', 'T', '\x2', '\x2', '\x297', '\x298', '\t', '\x6', 
		'\x2', '\x2', '\x298', '\x299', '\a', 'P', '\x2', '\x2', '\x299', '\x29A', 
		'\x5', '\x1A', '\xE', '\x2', '\x29A', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x29B', '\x29C', '\a', '\x33', '\x2', '\x2', '\x29C', '\x29D', '\a', 
		'G', '\x2', '\x2', '\x29D', '\x29E', '\x5', '\x1A', '\xE', '\x2', '\x29E', 
		'\x29F', '\a', 'P', '\x2', '\x2', '\x29F', '\x2A0', '\x5', '\x1A', '\xE', 
		'\x2', '\x2A0', '\x93', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A2', 
		'\a', '\x35', '\x2', '\x2', '\x2A2', '\x2A3', '\a', 'X', '\x2', '\x2', 
		'\x2A3', '\x2A4', '\x5', '\x1A', '\xE', '\x2', '\x2A4', '\x2A5', '\a', 
		'P', '\x2', '\x2', '\x2A5', '\x2A8', '\x5', '\x1A', '\xE', '\x2', '\x2A6', 
		'\x2A7', '\a', 'P', '\x2', '\x2', '\x2A7', '\x2A9', '\x5', '\x1A', '\xE', 
		'\x2', '\x2A8', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', 
		'\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2A8', '\x3', '\x2', '\x2', '\x2', 
		'\x2AA', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2AC', '\x3', 
		'\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\a', 'Y', '\x2', '\x2', '\x2AD', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AF', '\a', '\x36', '\x2', 
		'\x2', '\x2AF', '\x2B0', '\a', 'X', '\x2', '\x2', '\x2B0', '\x2B1', '\x5', 
		'\x1A', '\xE', '\x2', '\x2B1', '\x2B2', '\a', 'P', '\x2', '\x2', '\x2B2', 
		'\x2B3', '\x5', '\x1A', '\xE', '\x2', '\x2B3', '\x2B4', '\a', 'Y', '\x2', 
		'\x2', '\x2B4', '\x97', '\x3', '\x2', '\x2', '\x2', '\x2B5', '\x2B6', 
		'\a', '\x37', '\x2', '\x2', '\x2B6', '\x2B7', '\x5', '\x1A', '\xE', '\x2', 
		'\x2B7', '\x99', '\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2B9', '\a', '\x38', 
		'\x2', '\x2', '\x2B9', '\x2BA', '\x5', '\x1A', '\xE', '\x2', '\x2BA', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', '\a', '\x39', '\x2', 
		'\x2', '\x2BC', '\x2BD', '\x5', '\x1A', '\xE', '\x2', '\x2BD', '\x2BE', 
		'\a', 'P', '\x2', '\x2', '\x2BE', '\x2BF', '\x5', '\x1A', '\xE', '\x2', 
		'\x2BF', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\a', ':', 
		'\x2', '\x2', '\x2C1', '\x2C2', '\t', '\a', '\x2', '\x2', '\x2C2', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C4', '\a', ';', '\x2', '\x2', 
		'\x2C4', '\x2C5', '\t', '\a', '\x2', '\x2', '\x2C5', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x2C6', '\x2C7', '\a', '<', '\x2', '\x2', '\x2C7', '\x2C8', 
		'\x5', '\x1A', '\xE', '\x2', '\x2C8', '\x2C9', '\a', 'P', '\x2', '\x2', 
		'\x2C9', '\x2CA', '\x5', '\x1A', '\xE', '\x2', '\x2CA', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x2CB', '\x2CC', '\a', '=', '\x2', '\x2', '\x2CC', 
		'\x2CD', '\x5', '\x1A', '\xE', '\x2', '\x2CD', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\x2CE', '\x2CF', '\a', '=', '\x2', '\x2', '\x2CF', '\x2D0', '\x5', 
		'\x1A', '\xE', '\x2', '\x2D0', '\x2D1', '\a', 'P', '\x2', '\x2', '\x2D1', 
		'\x2D2', '\x5', '\x1A', '\xE', '\x2', '\x2D2', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\x2D3', '\x2D4', '\a', '>', '\x2', '\x2', '\x2D4', '\x2D5', '\x5', 
		'\x1A', '\xE', '\x2', '\x2D5', '\x2D6', '\a', 'P', '\x2', '\x2', '\x2D6', 
		'\x2D7', '\x5', '\x1A', '\xE', '\x2', '\x2D7', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x2D8', '\x2D9', '\a', '@', '\x2', '\x2', '\x2D9', '\x2DA', '\x5', 
		'\x1A', '\xE', '\x2', '\x2DA', '\x2DB', '\a', 'P', '\x2', '\x2', '\x2DB', 
		'\x2DC', '\x5', '\x1A', '\xE', '\x2', '\x2DC', '\x2DD', '\a', 'P', '\x2', 
		'\x2', '\x2DD', '\x2DE', '\x5', '\x1A', '\xE', '\x2', '\x2DE', '\x2DF', 
		'\a', 'P', '\x2', '\x2', '\x2DF', '\x2E0', '\x5', '\x1A', '\xE', '\x2', 
		'\x2E0', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E2', '\a', '\x41', 
		'\x2', '\x2', '\x2E2', '\x2E3', '\x5', '\x1A', '\xE', '\x2', '\x2E3', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E5', '\a', '\x42', '\x2', 
		'\x2', '\x2E5', '\x2E6', '\t', '\b', '\x2', '\x2', '\x2E6', '\x2E7', '\a', 
		'P', '\x2', '\x2', '\x2E7', '\x2E8', '\a', 'T', '\x2', '\x2', '\x2E8', 
		'\x2E9', '\t', '\t', '\x2', '\x2', '\x2E9', '\x2EA', '\a', 'P', '\x2', 
		'\x2', '\x2EA', '\x2EB', '\x5', '\x1A', '\xE', '\x2', '\x2EB', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2ED', '\a', '\x43', '\x2', '\x2', 
		'\x2ED', '\x2EF', '\a', 'T', '\x2', '\x2', '\x2EE', '\x2F0', '\a', '[', 
		'\x2', '\x2', '\x2EF', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2F0', 
		'\x3', '\x2', '\x2', '\x2', '\x2F0', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		',', '\xB5', '\xBD', '\xC3', '\xC7', '\xF3', '\x10F', '\x112', '\x119', 
		'\x11C', '\x125', '\x12D', '\x135', '\x13C', '\x144', '\x147', '\x14F', 
		'\x155', '\x15F', '\x165', '\x16F', '\x179', '\x185', '\x18A', '\x1F6', 
		'\x205', '\x20D', '\x210', '\x215', '\x21A', '\x21D', '\x225', '\x228', 
		'\x22E', '\x231', '\x244', '\x250', '\x259', '\x25D', '\x27B', '\x287', 
		'\x2AA', '\x2EF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BASICLanguageParser
