//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Stephen\source\repos\BASICLanguageParser\BASICLanguageParser.Grammar\ColorBasic.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BASICLanguageParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class ColorBasicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, LET=13, DIM=14, ABS=15, ASC=16, SGN=17, INT=18, 
		SIN=19, RND=20, LEN=21, VAL=22, CHR=23, MID=24, LEFT=25, RIGHT=26, STR=27, 
		INKEY=28, JOYSTK=29, EOFTOKEN=30, PEEK=31, POINT=32, MEM=33, USR=34, FOR=35, 
		TO=36, STEP=37, NEXT=38, IF=39, THEN=40, ELSE=41, GO=42, SUB=43, ON=44, 
		OFF=45, RETURN=46, DATA=47, RESTORE=48, READ=49, NEW=50, END=51, STOP=52, 
		RUN=53, CONT=54, LIST=55, LLIST=56, CLEAR=57, INPUT=58, PRINT=59, TAB=60, 
		SET=61, RESET=62, CLS=63, EXEC=64, POKE=65, MOTOR=66, AUDIO=67, SOUND=68, 
		CLOAD=69, CSAVE=70, CLOADM=71, CSAVEM=72, SKIPF=73, OPEN=74, CLOSE=75, 
		DIGIT_SEQUENCE=76, SINGLE_DIGIT=77, DEVICE_KEYBOARD=78, DEVICE_CASSETTE=79, 
		DEVICE_PRINTER=80, DEVICE_RS232=81, OR=82, AND=83, NOT=84, EQ=85, ADDITION=86, 
		SUBTRACTION=87, MULTIPLICATION=88, DIVISION=89, VARIABLE_NUMBER=90, VARIABLE_STRING=91, 
		VARIABLE_NUMBER_ARRAY=92, VARIABLE_STRING_ARRAY=93, LETTER=94, DATUM=95, 
		STRINGLITERAL=96, NUMBER=97, COMMENT_BLOCK=98, SKIP_=99, EOL=100;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_statement = 2, RULE_expression = 3, 
		RULE_characterExpression = 4, RULE_relop = 5, RULE_neq = 6, RULE_gte = 7, 
		RULE_lte = 8, RULE_variableList = 9, RULE_absfunc = 10, RULE_ascfunc = 11, 
		RULE_sgnfunc = 12, RULE_intfunc = 13, RULE_sinfunc = 14, RULE_rndfunc = 15, 
		RULE_lenfunc = 16, RULE_valfunc = 17, RULE_chrfunc = 18, RULE_midfunc = 19, 
		RULE_leftfunc = 20, RULE_rightfunc = 21, RULE_strfunc = 22, RULE_inkeyfunc = 23, 
		RULE_joystkfunc = 24, RULE_eoffunc = 25, RULE_peekfunc = 26, RULE_pointfunc = 27, 
		RULE_memfunc = 28, RULE_usrfunc = 29, RULE_letstmt = 30, RULE_dimstmt = 31, 
		RULE_forstmt = 32, RULE_nextstmt = 33, RULE_ifstmt1 = 34, RULE_ifstmt2 = 35, 
		RULE_gotostmt = 36, RULE_gosubstmt = 37, RULE_ongotostmt = 38, RULE_ongosubstmt = 39, 
		RULE_returnstmt = 40, RULE_readstmt = 41, RULE_restorestmt = 42, RULE_newstmt = 43, 
		RULE_endstmt = 44, RULE_stopstmt = 45, RULE_runstmt = 46, RULE_clearstmt = 47, 
		RULE_contstmt = 48, RULE_liststmt = 49, RULE_lliststmt = 50, RULE_inputstmt1 = 51, 
		RULE_printstmt = 52, RULE_printtabstmt = 53, RULE_printhashstmt = 54, 
		RULE_printatstmt = 55, RULE_setstmt = 56, RULE_resetstmt = 57, RULE_clsstmt = 58, 
		RULE_execstmt = 59, RULE_pokestmt = 60, RULE_motorstmt = 61, RULE_audiostmt = 62, 
		RULE_soundstmt = 63, RULE_cloadstmt = 64, RULE_cloadmstmt = 65, RULE_csavestmt = 66, 
		RULE_csavemstmt = 67, RULE_skipfstmt = 68, RULE_openstmt = 69, RULE_closestmt = 70;
	public static readonly string[] ruleNames = {
		"prog", "line", "statement", "expression", "characterExpression", "relop", 
		"neq", "gte", "lte", "variableList", "absfunc", "ascfunc", "sgnfunc", 
		"intfunc", "sinfunc", "rndfunc", "lenfunc", "valfunc", "chrfunc", "midfunc", 
		"leftfunc", "rightfunc", "strfunc", "inkeyfunc", "joystkfunc", "eoffunc", 
		"peekfunc", "pointfunc", "memfunc", "usrfunc", "letstmt", "dimstmt", "forstmt", 
		"nextstmt", "ifstmt1", "ifstmt2", "gotostmt", "gosubstmt", "ongotostmt", 
		"ongosubstmt", "returnstmt", "readstmt", "restorestmt", "newstmt", "endstmt", 
		"stopstmt", "runstmt", "clearstmt", "contstmt", "liststmt", "lliststmt", 
		"inputstmt1", "printstmt", "printtabstmt", "printhashstmt", "printatstmt", 
		"setstmt", "resetstmt", "clsstmt", "execstmt", "pokestmt", "motorstmt", 
		"audiostmt", "soundstmt", "cloadstmt", "cloadmstmt", "csavestmt", "csavemstmt", 
		"skipfstmt", "openstmt", "closestmt"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'^'", "'('", "')'", "'>'", "'<'", "','", "';'", "'#'", "'@'", 
		"'I'", "'O'", "'LET'", "'DIM'", "'ABS'", "'ASC'", "'SGN'", "'INT'", "'SIN'", 
		"'RND'", "'LEN'", "'VAL'", "'CHR$'", "'MID$'", "'LEFT$'", "'RIGHT$'", 
		"'STR$'", "'INKEY$'", "'JOYSTK'", "'EOF'", "'PEEK'", "'POINT'", "'MEM'", 
		"'USR'", "'FOR'", "'TO'", "'STEP'", "'NEXT'", "'IF'", "'THEN'", "'ELSE'", 
		"'GO'", "'SUB'", "'ON'", "'OFF'", "'RETURN'", "'DATA'", "'RESTORE'", "'READ'", 
		"'NEW'", "'END'", "'STOP'", "'RUN'", "'CONT'", "'LIST'", "'LLIST'", "'CLEAR'", 
		"'INPUT'", "'PRINT'", "'TAB'", "'SET'", "'RESET'", "'CLS'", "'EXEC'", 
		"'POKE'", "'MOTOR'", "'AUDIO'", "'SOUND'", "'CLOAD'", "'CSAVE'", "'CLOADM'", 
		"'CSAVEM'", "'SKIPF'", "'OPEN'", "'CLOSE'", null, null, "'0'", "'-1'", 
		"'-2'", "'-3'", "'OR'", "'AND'", "'NOT'", "'='", "'+'", "'-'", "'*'", 
		"'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "LET", "DIM", "ABS", "ASC", "SGN", "INT", "SIN", "RND", "LEN", "VAL", 
		"CHR", "MID", "LEFT", "RIGHT", "STR", "INKEY", "JOYSTK", "EOFTOKEN", "PEEK", 
		"POINT", "MEM", "USR", "FOR", "TO", "STEP", "NEXT", "IF", "THEN", "ELSE", 
		"GO", "SUB", "ON", "OFF", "RETURN", "DATA", "RESTORE", "READ", "NEW", 
		"END", "STOP", "RUN", "CONT", "LIST", "LLIST", "CLEAR", "INPUT", "PRINT", 
		"TAB", "SET", "RESET", "CLS", "EXEC", "POKE", "MOTOR", "AUDIO", "SOUND", 
		"CLOAD", "CSAVE", "CLOADM", "CSAVEM", "SKIPF", "OPEN", "CLOSE", "DIGIT_SEQUENCE", 
		"SINGLE_DIGIT", "DEVICE_KEYBOARD", "DEVICE_CASSETTE", "DEVICE_PRINTER", 
		"DEVICE_RS232", "OR", "AND", "NOT", "EQ", "ADDITION", "SUBTRACTION", "MULTIPLICATION", 
		"DIVISION", "VARIABLE_NUMBER", "VARIABLE_STRING", "VARIABLE_NUMBER_ARRAY", 
		"VARIABLE_STRING_ARRAY", "LETTER", "DATUM", "STRINGLITERAL", "NUMBER", 
		"COMMENT_BLOCK", "SKIP_", "EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ColorBasic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ColorBasicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ColorBasicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ColorBasicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ColorBasicParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 142;
				line();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT_SEQUENCE );
			State = 147;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(ColorBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(ColorBasicParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ColorBasicParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT_BLOCK() { return GetTokens(ColorBasicParser.COMMENT_BLOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_BLOCK(int i) {
			return GetToken(ColorBasicParser.COMMENT_BLOCK, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(DIGIT_SEQUENCE);
			State = 152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case RETURN:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case VARIABLE_NUMBER:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING_ARRAY:
				{
				State = 150;
				statement();
				}
				break;
			case COMMENT_BLOCK:
				{
				State = 151;
				Match(COMMENT_BLOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 154;
				Match(T__0);
				State = 157;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LET:
				case DIM:
				case FOR:
				case NEXT:
				case IF:
				case GO:
				case RETURN:
				case RESTORE:
				case READ:
				case NEW:
				case END:
				case STOP:
				case RUN:
				case CONT:
				case LIST:
				case LLIST:
				case CLEAR:
				case INPUT:
				case PRINT:
				case SET:
				case RESET:
				case CLS:
				case EXEC:
				case POKE:
				case MOTOR:
				case AUDIO:
				case SOUND:
				case CLOAD:
				case CSAVE:
				case CSAVEM:
				case SKIPF:
				case OPEN:
				case CLOSE:
				case VARIABLE_NUMBER:
				case VARIABLE_STRING:
				case VARIABLE_NUMBER_ARRAY:
				case VARIABLE_STRING_ARRAY:
					{
					State = 155;
					statement();
					}
					break;
				case COMMENT_BLOCK:
					{
					State = 156;
					Match(COMMENT_BLOCK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 164;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==EOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LetstmtContext letstmt() {
			return GetRuleContext<LetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstmtContext returnstmt() {
			return GetRuleContext<ReturnstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestorestmtContext restorestmt() {
			return GetRuleContext<RestorestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintstmtContext printstmt() {
			return GetRuleContext<PrintstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NextstmtContext nextstmt() {
			return GetRuleContext<NextstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PokestmtContext pokestmt() {
			return GetRuleContext<PokestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ifstmt1Context ifstmt1() {
			return GetRuleContext<Ifstmt1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ifstmt2Context ifstmt2() {
			return GetRuleContext<Ifstmt2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForstmtContext forstmt() {
			return GetRuleContext<ForstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inputstmt1Context inputstmt1() {
			return GetRuleContext<Inputstmt1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimstmtContext dimstmt() {
			return GetRuleContext<DimstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotostmtContext gotostmt() {
			return GetRuleContext<GotostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GosubstmtContext gosubstmt() {
			return GetRuleContext<GosubstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadstmtContext readstmt() {
			return GetRuleContext<ReadstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrinttabstmtContext printtabstmt() {
			return GetRuleContext<PrinttabstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrinthashstmtContext printhashstmt() {
			return GetRuleContext<PrinthashstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintatstmtContext printatstmt() {
			return GetRuleContext<PrintatstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewstmtContext newstmt() {
			return GetRuleContext<NewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopstmtContext stopstmt() {
			return GetRuleContext<StopstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndstmtContext endstmt() {
			return GetRuleContext<EndstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RunstmtContext runstmt() {
			return GetRuleContext<RunstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClearstmtContext clearstmt() {
			return GetRuleContext<ClearstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContstmtContext contstmt() {
			return GetRuleContext<ContstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListstmtContext liststmt() {
			return GetRuleContext<ListstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LliststmtContext lliststmt() {
			return GetRuleContext<LliststmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetstmtContext setstmt() {
			return GetRuleContext<SetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetstmtContext resetstmt() {
			return GetRuleContext<ResetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClsstmtContext clsstmt() {
			return GetRuleContext<ClsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecstmtContext execstmt() {
			return GetRuleContext<ExecstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MotorstmtContext motorstmt() {
			return GetRuleContext<MotorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AudiostmtContext audiostmt() {
			return GetRuleContext<AudiostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SoundstmtContext soundstmt() {
			return GetRuleContext<SoundstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloadstmtContext cloadstmt() {
			return GetRuleContext<CloadstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloadmstmtContext cloadmstmt() {
			return GetRuleContext<CloadmstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CsavestmtContext csavestmt() {
			return GetRuleContext<CsavestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CsavemstmtContext csavemstmt() {
			return GetRuleContext<CsavemstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkipfstmtContext skipfstmt() {
			return GetRuleContext<SkipfstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenstmtContext openstmt() {
			return GetRuleContext<OpenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosestmtContext closestmt() {
			return GetRuleContext<ClosestmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				letstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167;
				returnstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 168;
				restorestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 169;
				printstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 170;
				nextstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 171;
				pokestmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 172;
				ifstmt1();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 173;
				ifstmt2();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 174;
				forstmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 175;
				inputstmt1();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 176;
				dimstmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 177;
				gotostmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 178;
				gosubstmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 179;
				readstmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 180;
				printstmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 181;
				printtabstmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 182;
				printhashstmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 183;
				printatstmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 184;
				newstmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 185;
				stopstmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 186;
				endstmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 187;
				runstmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 188;
				clearstmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 189;
				contstmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 190;
				liststmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 191;
				lliststmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 192;
				setstmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 193;
				resetstmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 194;
				clsstmt();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 195;
				execstmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 196;
				motorstmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 197;
				audiostmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 198;
				soundstmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 199;
				cloadstmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 200;
				cloadmstmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 201;
				csavestmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 202;
				csavemstmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 203;
				skipfstmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 204;
				openstmt();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 205;
				closestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITION() { return GetToken(ColorBasicParser.ADDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACTION() { return GetToken(ColorBasicParser.SUBTRACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY() { return GetToken(ColorBasicParser.VARIABLE_NUMBER_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER() { return GetToken(ColorBasicParser.VARIABLE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(ColorBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ColorBasicParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATION() { return GetToken(ColorBasicParser.MULTIPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(ColorBasicParser.DIVISION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADDITION:
			case SUBTRACTION:
				{
				{
				State = 209;
				_la = TokenStream.LA(1);
				if ( !(_la==ADDITION || _la==SUBTRACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 210;
				expression(0);
				}
				}
				break;
			case VARIABLE_NUMBER_ARRAY:
				{
				State = 211;
				Match(VARIABLE_NUMBER_ARRAY);
				}
				break;
			case VARIABLE_NUMBER:
				{
				State = 212;
				Match(VARIABLE_NUMBER);
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 213;
				Match(DIGIT_SEQUENCE);
				}
				break;
			case NUMBER:
				{
				State = 214;
				Match(NUMBER);
				}
				break;
			case T__2:
				{
				State = 215;
				Match(T__2);
				State = 216;
				expression(0);
				State = 217;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 232;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 230;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 221;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 222;
						_la = TokenStream.LA(1);
						if ( !(_la==MULTIPLICATION || _la==DIVISION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 223;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 224;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 225;
						_la = TokenStream.LA(1);
						if ( !(_la==ADDITION || _la==SUBTRACTION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 226;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 227;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						{
						State = 228;
						Match(T__1);
						State = 229;
						expression(0);
						}
						}
						break;
					}
					} 
				}
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CharacterExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING_ARRAY() { return GetToken(ColorBasicParser.VARIABLE_STRING_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING() { return GetToken(ColorBasicParser.VARIABLE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(ColorBasicParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext[] characterExpression() {
			return GetRuleContexts<CharacterExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext characterExpression(int i) {
			return GetRuleContext<CharacterExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITION() { return GetToken(ColorBasicParser.ADDITION, 0); }
		public CharacterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCharacterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCharacterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterExpressionContext characterExpression() {
		return characterExpression(0);
	}

	private CharacterExpressionContext characterExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CharacterExpressionContext _localctx = new CharacterExpressionContext(Context, _parentState);
		CharacterExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_characterExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_STRING_ARRAY:
				{
				State = 236;
				Match(VARIABLE_STRING_ARRAY);
				}
				break;
			case VARIABLE_STRING:
				{
				State = 237;
				Match(VARIABLE_STRING);
				}
				break;
			case STRINGLITERAL:
				{
				State = 238;
				Match(STRINGLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 246;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CharacterExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_characterExpression);
					State = 241;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 242;
					Match(ADDITION);
					State = 243;
					characterExpression(5);
					}
					} 
				}
				State = 248;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GteContext gte() {
			return GetRuleContext<GteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LteContext lte() {
			return GetRuleContext<LteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NeqContext neq() {
			return GetRuleContext<NeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 10, RULE_relop);
		try {
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				gte();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				lte();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 251;
				neq();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 252;
				Match(EQ);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 253;
				Match(T__4);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 254;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NeqContext : ParserRuleContext {
		public NeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterNeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitNeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NeqContext neq() {
		NeqContext _localctx = new NeqContext(Context, State);
		EnterRule(_localctx, 12, RULE_neq);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 257;
				Match(T__5);
				State = 258;
				Match(T__4);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				Match(T__4);
				State = 260;
				Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		public GteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterGte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitGte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GteContext gte() {
		GteContext _localctx = new GteContext(Context, State);
		EnterRule(_localctx, 14, RULE_gte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(T__4);
			State = 264;
			Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		public LteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LteContext lte() {
		LteContext _localctx = new LteContext(Context, State);
		EnterRule(_localctx, 16, RULE_lte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(T__5);
			State = 267;
			Match(EQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_NUMBER_ARRAY() { return GetTokens(ColorBasicParser.VARIABLE_NUMBER_ARRAY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY(int i) {
			return GetToken(ColorBasicParser.VARIABLE_NUMBER_ARRAY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_NUMBER() { return GetTokens(ColorBasicParser.VARIABLE_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER(int i) {
			return GetToken(ColorBasicParser.VARIABLE_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_STRING_ARRAY() { return GetTokens(ColorBasicParser.VARIABLE_STRING_ARRAY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING_ARRAY(int i) {
			return GetToken(ColorBasicParser.VARIABLE_STRING_ARRAY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_STRING() { return GetTokens(ColorBasicParser.VARIABLE_STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING(int i) {
			return GetToken(ColorBasicParser.VARIABLE_STRING, i);
		}
		public VariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListContext variableList() {
		VariableListContext _localctx = new VariableListContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (VARIABLE_NUMBER - 90)) | (1L << (VARIABLE_STRING - 90)) | (1L << (VARIABLE_NUMBER_ARRAY - 90)) | (1L << (VARIABLE_STRING_ARRAY - 90)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 270;
				Match(T__6);
				State = 271;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (VARIABLE_NUMBER - 90)) | (1L << (VARIABLE_STRING - 90)) | (1L << (VARIABLE_NUMBER_ARRAY - 90)) | (1L << (VARIABLE_STRING_ARRAY - 90)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(ColorBasicParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AbsfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterAbsfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitAbsfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsfuncContext absfunc() {
		AbsfuncContext _localctx = new AbsfuncContext(Context, State);
		EnterRule(_localctx, 20, RULE_absfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(ABS);
			State = 278;
			Match(T__2);
			State = 279;
			expression(0);
			State = 280;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AscfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(ColorBasicParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AscfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterAscfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitAscfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AscfuncContext ascfunc() {
		AscfuncContext _localctx = new AscfuncContext(Context, State);
		EnterRule(_localctx, 22, RULE_ascfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(ASC);
			State = 283;
			Match(T__2);
			State = 284;
			expression(0);
			State = 285;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SgnfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SGN() { return GetToken(ColorBasicParser.SGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SgnfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sgnfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSgnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSgnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSgnfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SgnfuncContext sgnfunc() {
		SgnfuncContext _localctx = new SgnfuncContext(Context, State);
		EnterRule(_localctx, 24, RULE_sgnfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(SGN);
			State = 288;
			Match(T__2);
			State = 289;
			expression(0);
			State = 290;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ColorBasicParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIntfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIntfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntfuncContext intfunc() {
		IntfuncContext _localctx = new IntfuncContext(Context, State);
		EnterRule(_localctx, 26, RULE_intfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(INT);
			State = 293;
			Match(T__2);
			State = 294;
			expression(0);
			State = 295;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(ColorBasicParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SinfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSinfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSinfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSinfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SinfuncContext sinfunc() {
		SinfuncContext _localctx = new SinfuncContext(Context, State);
		EnterRule(_localctx, 28, RULE_sinfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(SIN);
			State = 298;
			Match(T__2);
			State = 299;
			expression(0);
			State = 300;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RndfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RND() { return GetToken(ColorBasicParser.RND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RndfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rndfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRndfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRndfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRndfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RndfuncContext rndfunc() {
		RndfuncContext _localctx = new RndfuncContext(Context, State);
		EnterRule(_localctx, 30, RULE_rndfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(RND);
			State = 303;
			Match(T__2);
			State = 304;
			expression(0);
			State = 305;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LenfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(ColorBasicParser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LenfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lenfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLenfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLenfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLenfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LenfuncContext lenfunc() {
		LenfuncContext _localctx = new LenfuncContext(Context, State);
		EnterRule(_localctx, 32, RULE_lenfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(LEN);
			State = 308;
			Match(T__2);
			State = 309;
			expression(0);
			State = 310;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(ColorBasicParser.VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterValfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitValfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValfuncContext valfunc() {
		ValfuncContext _localctx = new ValfuncContext(Context, State);
		EnterRule(_localctx, 34, RULE_valfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(VAL);
			State = 313;
			Match(T__2);
			State = 314;
			expression(0);
			State = 315;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHR() { return GetToken(ColorBasicParser.CHR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ChrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chrfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterChrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitChrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChrfuncContext chrfunc() {
		ChrfuncContext _localctx = new ChrfuncContext(Context, State);
		EnterRule(_localctx, 36, RULE_chrfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(CHR);
			State = 318;
			Match(T__2);
			State = 319;
			expression(0);
			State = 320;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(ColorBasicParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MidfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterMidfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitMidfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidfuncContext midfunc() {
		MidfuncContext _localctx = new MidfuncContext(Context, State);
		EnterRule(_localctx, 38, RULE_midfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(MID);
			State = 323;
			Match(T__2);
			State = 324;
			expression(0);
			State = 325;
			Match(T__6);
			State = 326;
			expression(0);
			State = 327;
			Match(T__6);
			State = 328;
			expression(0);
			State = 329;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(ColorBasicParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LeftfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLeftfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLeftfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftfuncContext leftfunc() {
		LeftfuncContext _localctx = new LeftfuncContext(Context, State);
		EnterRule(_localctx, 40, RULE_leftfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(LEFT);
			State = 332;
			Match(T__2);
			State = 333;
			expression(0);
			State = 334;
			Match(T__6);
			State = 335;
			expression(0);
			State = 336;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(ColorBasicParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RightfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRightfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRightfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightfuncContext rightfunc() {
		RightfuncContext _localctx = new RightfuncContext(Context, State);
		EnterRule(_localctx, 42, RULE_rightfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(RIGHT);
			State = 339;
			Match(T__2);
			State = 340;
			expression(0);
			State = 341;
			Match(T__6);
			State = 342;
			expression(0);
			State = 343;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(ColorBasicParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterStrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitStrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrfuncContext strfunc() {
		StrfuncContext _localctx = new StrfuncContext(Context, State);
		EnterRule(_localctx, 44, RULE_strfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(STR);
			State = 346;
			Match(T__2);
			State = 347;
			expression(0);
			State = 348;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InkeyfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INKEY() { return GetToken(ColorBasicParser.INKEY, 0); }
		public InkeyfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inkeyfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterInkeyfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitInkeyfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInkeyfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InkeyfuncContext inkeyfunc() {
		InkeyfuncContext _localctx = new InkeyfuncContext(Context, State);
		EnterRule(_localctx, 46, RULE_inkeyfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(INKEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoystkfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOYSTK() { return GetToken(ColorBasicParser.JOYSTK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JoystkfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joystkfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterJoystkfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitJoystkfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoystkfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoystkfuncContext joystkfunc() {
		JoystkfuncContext _localctx = new JoystkfuncContext(Context, State);
		EnterRule(_localctx, 48, RULE_joystkfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(JOYSTK);
			State = 353;
			Match(T__2);
			State = 354;
			expression(0);
			State = 355;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EoffuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOFTOKEN() { return GetToken(ColorBasicParser.EOFTOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EoffuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eoffunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterEoffunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitEoffunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEoffunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EoffuncContext eoffunc() {
		EoffuncContext _localctx = new EoffuncContext(Context, State);
		EnterRule(_localctx, 50, RULE_eoffunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(EOFTOKEN);
			State = 358;
			Match(T__2);
			State = 359;
			expression(0);
			State = 360;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeekfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEEK() { return GetToken(ColorBasicParser.PEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PeekfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_peekfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPeekfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPeekfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeekfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeekfuncContext peekfunc() {
		PeekfuncContext _localctx = new PeekfuncContext(Context, State);
		EnterRule(_localctx, 52, RULE_peekfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(PEEK);
			State = 363;
			Match(T__2);
			State = 364;
			expression(0);
			State = 365;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(ColorBasicParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PointfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPointfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPointfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointfuncContext pointfunc() {
		PointfuncContext _localctx = new PointfuncContext(Context, State);
		EnterRule(_localctx, 54, RULE_pointfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(POINT);
			State = 368;
			Match(T__2);
			State = 369;
			expression(0);
			State = 370;
			Match(T__6);
			State = 371;
			expression(0);
			State = 372;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEM() { return GetToken(ColorBasicParser.MEM, 0); }
		public MemfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterMemfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitMemfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemfuncContext memfunc() {
		MemfuncContext _localctx = new MemfuncContext(Context, State);
		EnterRule(_localctx, 56, RULE_memfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(MEM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USR() { return GetToken(ColorBasicParser.USR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_DIGIT() { return GetToken(ColorBasicParser.SINGLE_DIGIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UsrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usrfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterUsrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitUsrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsrfuncContext usrfunc() {
		UsrfuncContext _localctx = new UsrfuncContext(Context, State);
		EnterRule(_localctx, 58, RULE_usrfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(USR);
			State = 377;
			Match(SINGLE_DIGIT);
			State = 378;
			Match(T__2);
			State = 379;
			expression(0);
			State = 380;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY() { return GetToken(ColorBasicParser.VARIABLE_NUMBER_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER() { return GetToken(ColorBasicParser.VARIABLE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ColorBasicParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext characterExpression() {
			return GetRuleContext<CharacterExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING_ARRAY() { return GetToken(ColorBasicParser.VARIABLE_STRING_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_STRING() { return GetToken(ColorBasicParser.VARIABLE_STRING, 0); }
		public LetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetstmtContext letstmt() {
		LetstmtContext _localctx = new LetstmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_letstmt);
		int _la;
		try {
			State = 394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LET) {
					{
					State = 382;
					Match(LET);
					}
				}

				State = 385;
				_la = TokenStream.LA(1);
				if ( !(_la==VARIABLE_NUMBER || _la==VARIABLE_NUMBER_ARRAY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 386;
				Match(EQ);
				State = 387;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LET) {
					{
					State = 388;
					Match(LET);
					}
				}

				State = 391;
				_la = TokenStream.LA(1);
				if ( !(_la==VARIABLE_STRING || _la==VARIABLE_STRING_ARRAY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 392;
				Match(EQ);
				State = 393;
				characterExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIM() { return GetToken(ColorBasicParser.DIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		public DimstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterDimstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitDimstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimstmtContext dimstmt() {
		DimstmtContext _localctx = new DimstmtContext(Context, State);
		EnterRule(_localctx, 62, RULE_dimstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(DIM);
			State = 397;
			variableList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ColorBasicParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ColorBasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ColorBasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER_ARRAY() { return GetToken(ColorBasicParser.VARIABLE_NUMBER_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NUMBER() { return GetToken(ColorBasicParser.VARIABLE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(ColorBasicParser.STEP, 0); }
		public ForstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterForstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitForstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstmtContext forstmt() {
		ForstmtContext _localctx = new ForstmtContext(Context, State);
		EnterRule(_localctx, 64, RULE_forstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(FOR);
			State = 400;
			_la = TokenStream.LA(1);
			if ( !(_la==VARIABLE_NUMBER || _la==VARIABLE_NUMBER_ARRAY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 401;
			Match(EQ);
			State = 402;
			expression(0);
			State = 403;
			Match(TO);
			State = 404;
			expression(0);
			State = 407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 405;
				Match(STEP);
				State = 406;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(ColorBasicParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		public NextstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterNextstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitNextstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextstmtContext nextstmt() {
		NextstmtContext _localctx = new NextstmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_nextstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			Match(NEXT);
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (VARIABLE_NUMBER - 90)) | (1L << (VARIABLE_STRING - 90)) | (1L << (VARIABLE_NUMBER_ARRAY - 90)) | (1L << (VARIABLE_STRING_ARRAY - 90)))) != 0)) {
				{
				State = 410;
				variableList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ifstmt1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ColorBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(ColorBasicParser.DIGIT_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ColorBasicParser.THEN, 0); }
		public Ifstmt1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIfstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIfstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ifstmt1Context ifstmt1() {
		Ifstmt1Context _localctx = new Ifstmt1Context(Context, State);
		EnterRule(_localctx, 68, RULE_ifstmt1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(IF);
			State = 414;
			expression(0);
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 415;
				Match(THEN);
				}
			}

			State = 420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case RETURN:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case VARIABLE_NUMBER:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING_ARRAY:
				{
				State = 418;
				statement();
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 419;
				Match(DIGIT_SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ifstmt2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ColorBasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ColorBasicParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ColorBasicParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(ColorBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(ColorBasicParser.DIGIT_SEQUENCE, i);
		}
		public Ifstmt2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterIfstmt2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitIfstmt2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ifstmt2Context ifstmt2() {
		Ifstmt2Context _localctx = new Ifstmt2Context(Context, State);
		EnterRule(_localctx, 70, RULE_ifstmt2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(IF);
			State = 423;
			expression(0);
			State = 424;
			Match(THEN);
			State = 427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case RETURN:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case VARIABLE_NUMBER:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING_ARRAY:
				{
				State = 425;
				statement();
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 426;
				Match(DIGIT_SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 429;
			Match(ELSE);
			State = 432;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
			case DIM:
			case FOR:
			case NEXT:
			case IF:
			case GO:
			case RETURN:
			case RESTORE:
			case READ:
			case NEW:
			case END:
			case STOP:
			case RUN:
			case CONT:
			case LIST:
			case LLIST:
			case CLEAR:
			case INPUT:
			case PRINT:
			case SET:
			case RESET:
			case CLS:
			case EXEC:
			case POKE:
			case MOTOR:
			case AUDIO:
			case SOUND:
			case CLOAD:
			case CSAVE:
			case CSAVEM:
			case SKIPF:
			case OPEN:
			case CLOSE:
			case VARIABLE_NUMBER:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING_ARRAY:
				{
				State = 430;
				statement();
				}
				break;
			case DIGIT_SEQUENCE:
				{
				State = 431;
				Match(DIGIT_SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ColorBasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(ColorBasicParser.DIGIT_SEQUENCE, 0); }
		public GotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotostmtContext gotostmt() {
		GotostmtContext _localctx = new GotostmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_gotostmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			Match(GO);
			State = 435;
			Match(TO);
			State = 436;
			Match(DIGIT_SEQUENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ColorBasicParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE() { return GetToken(ColorBasicParser.DIGIT_SEQUENCE, 0); }
		public GosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GosubstmtContext gosubstmt() {
		GosubstmtContext _localctx = new GosubstmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_gosubstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(GO);
			State = 439;
			Match(SUB);
			State = 440;
			Match(DIGIT_SEQUENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ColorBasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(ColorBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(ColorBasicParser.DIGIT_SEQUENCE, i);
		}
		public OngotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterOngotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitOngotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngotostmtContext ongotostmt() {
		OngotostmtContext _localctx = new OngotostmtContext(Context, State);
		EnterRule(_localctx, 76, RULE_ongotostmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(ON);
			State = 443;
			expression(0);
			State = 444;
			Match(GO);
			State = 445;
			Match(TO);
			State = 446;
			Match(DIGIT_SEQUENCE);
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 447;
				Match(T__6);
				State = 448;
				Match(DIGIT_SEQUENCE);
				}
				}
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(ColorBasicParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ColorBasicParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT_SEQUENCE() { return GetTokens(ColorBasicParser.DIGIT_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT_SEQUENCE(int i) {
			return GetToken(ColorBasicParser.DIGIT_SEQUENCE, i);
		}
		public OngosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterOngosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitOngosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngosubstmtContext ongosubstmt() {
		OngosubstmtContext _localctx = new OngosubstmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_ongosubstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			Match(ON);
			State = 455;
			expression(0);
			State = 456;
			Match(GO);
			State = 457;
			Match(SUB);
			State = 458;
			Match(DIGIT_SEQUENCE);
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 459;
				Match(T__6);
				State = 460;
				Match(DIGIT_SEQUENCE);
				}
				}
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ColorBasicParser.RETURN, 0); }
		public ReturnstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterReturnstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitReturnstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstmtContext returnstmt() {
		ReturnstmtContext _localctx = new ReturnstmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_returnstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(ColorBasicParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		public ReadstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterReadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitReadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadstmtContext readstmt() {
		ReadstmtContext _localctx = new ReadstmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_readstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(READ);
			State = 469;
			variableList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestorestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE() { return GetToken(ColorBasicParser.RESTORE, 0); }
		public RestorestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restorestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRestorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRestorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestorestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestorestmtContext restorestmt() {
		RestorestmtContext _localctx = new RestorestmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_restorestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			Match(RESTORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ColorBasicParser.NEW, 0); }
		public NewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterNewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitNewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewstmtContext newstmt() {
		NewstmtContext _localctx = new NewstmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_newstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(NEW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ColorBasicParser.END, 0); }
		public EndstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterEndstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitEndstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndstmtContext endstmt() {
		EndstmtContext _localctx = new EndstmtContext(Context, State);
		EnterRule(_localctx, 88, RULE_endstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(ColorBasicParser.STOP, 0); }
		public StopstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterStopstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitStopstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopstmtContext stopstmt() {
		StopstmtContext _localctx = new StopstmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_stopstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RunstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUN() { return GetToken(ColorBasicParser.RUN, 0); }
		public RunstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterRunstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitRunstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRunstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RunstmtContext runstmt() {
		RunstmtContext _localctx = new RunstmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_runstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(RUN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClearstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLEAR() { return GetToken(ColorBasicParser.CLEAR, 0); }
		public ClearstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clearstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterClearstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitClearstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClearstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClearstmtContext clearstmt() {
		ClearstmtContext _localctx = new ClearstmtContext(Context, State);
		EnterRule(_localctx, 94, RULE_clearstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			Match(CLEAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONT() { return GetToken(ColorBasicParser.CONT, 0); }
		public ContstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterContstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitContstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContstmtContext contstmt() {
		ContstmtContext _localctx = new ContstmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_contstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(CONT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(ColorBasicParser.LIST, 0); }
		public ListstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_liststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterListstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitListstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListstmtContext liststmt() {
		ListstmtContext _localctx = new ListstmtContext(Context, State);
		EnterRule(_localctx, 98, RULE_liststmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(LIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LliststmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLIST() { return GetToken(ColorBasicParser.LLIST, 0); }
		public LliststmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lliststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterLliststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitLliststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLliststmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LliststmtContext lliststmt() {
		LliststmtContext _localctx = new LliststmtContext(Context, State);
		EnterRule(_localctx, 100, RULE_lliststmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			Match(LLIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inputstmt1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(ColorBasicParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(ColorBasicParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_CASSETTE() { return GetToken(ColorBasicParser.DEVICE_CASSETTE, 0); }
		public Inputstmt1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputstmt1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterInputstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitInputstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputstmt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inputstmt1Context inputstmt1() {
		Inputstmt1Context _localctx = new Inputstmt1Context(Context, State);
		EnterRule(_localctx, 102, RULE_inputstmt1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(INPUT);
			State = 495;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
				{
				{
				State = 490;
				Match(STRINGLITERAL);
				State = 491;
				Match(T__7);
				}
				}
				break;
			case T__8:
				{
				{
				State = 492;
				Match(T__8);
				State = 493;
				Match(DEVICE_CASSETTE);
				State = 494;
				Match(T__6);
				}
				}
				break;
			case VARIABLE_NUMBER:
			case VARIABLE_STRING:
			case VARIABLE_NUMBER_ARRAY:
			case VARIABLE_STRING_ARRAY:
				break;
			default:
				break;
			}
			State = 497;
			variableList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ColorBasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterExpressionContext characterExpression() {
			return GetRuleContext<CharacterExpressionContext>(0);
		}
		public PrintstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPrintstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPrintstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintstmtContext printstmt() {
		PrintstmtContext _localctx = new PrintstmtContext(Context, State);
		EnterRule(_localctx, 104, RULE_printstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			Match(PRINT);
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (VARIABLE_STRING - 91)) | (1L << (VARIABLE_STRING_ARRAY - 91)) | (1L << (STRINGLITERAL - 91)))) != 0)) {
				{
				State = 500;
				characterExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrinttabstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ColorBasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(ColorBasicParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrinttabstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printtabstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPrinttabstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPrinttabstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrinttabstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrinttabstmtContext printtabstmt() {
		PrinttabstmtContext _localctx = new PrinttabstmtContext(Context, State);
		EnterRule(_localctx, 106, RULE_printtabstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			Match(PRINT);
			State = 504;
			Match(TAB);
			State = 505;
			Match(T__2);
			State = 506;
			expression(0);
			State = 507;
			Match(T__3);
			State = 508;
			Match(T__7);
			State = 509;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrinthashstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ColorBasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_CASSETTE() { return GetToken(ColorBasicParser.DEVICE_CASSETTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_PRINTER() { return GetToken(ColorBasicParser.DEVICE_PRINTER, 0); }
		public PrinthashstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printhashstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPrinthashstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPrinthashstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrinthashstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrinthashstmtContext printhashstmt() {
		PrinthashstmtContext _localctx = new PrinthashstmtContext(Context, State);
		EnterRule(_localctx, 108, RULE_printhashstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(PRINT);
			State = 512;
			Match(T__8);
			State = 513;
			_la = TokenStream.LA(1);
			if ( !(_la==DEVICE_CASSETTE || _la==DEVICE_PRINTER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 514;
			Match(T__6);
			State = 515;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintatstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ColorBasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrintatstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printatstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPrintatstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPrintatstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintatstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintatstmtContext printatstmt() {
		PrintatstmtContext _localctx = new PrintatstmtContext(Context, State);
		EnterRule(_localctx, 110, RULE_printatstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(PRINT);
			State = 518;
			Match(T__9);
			State = 519;
			expression(0);
			State = 520;
			Match(T__6);
			State = 521;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ColorBasicParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetstmtContext setstmt() {
		SetstmtContext _localctx = new SetstmtContext(Context, State);
		EnterRule(_localctx, 112, RULE_setstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			Match(SET);
			State = 524;
			Match(T__2);
			State = 525;
			expression(0);
			State = 526;
			Match(T__6);
			State = 527;
			expression(0);
			State = 530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 528;
				Match(T__6);
				State = 529;
				expression(0);
				}
				}
				State = 532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__6 );
			State = 534;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(ColorBasicParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ResetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterResetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitResetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetstmtContext resetstmt() {
		ResetstmtContext _localctx = new ResetstmtContext(Context, State);
		EnterRule(_localctx, 114, RULE_resetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			Match(RESET);
			State = 537;
			Match(T__2);
			State = 538;
			expression(0);
			State = 539;
			Match(T__6);
			State = 540;
			expression(0);
			State = 541;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLS() { return GetToken(ColorBasicParser.CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterClsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitClsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClsstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClsstmtContext clsstmt() {
		ClsstmtContext _localctx = new ClsstmtContext(Context, State);
		EnterRule(_localctx, 116, RULE_clsstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			Match(CLS);
			State = 544;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXEC() { return GetToken(ColorBasicParser.EXEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExecstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterExecstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitExecstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecstmtContext execstmt() {
		ExecstmtContext _localctx = new ExecstmtContext(Context, State);
		EnterRule(_localctx, 118, RULE_execstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			Match(EXEC);
			State = 547;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PokestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POKE() { return GetToken(ColorBasicParser.POKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PokestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pokestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterPokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitPokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPokestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PokestmtContext pokestmt() {
		PokestmtContext _localctx = new PokestmtContext(Context, State);
		EnterRule(_localctx, 120, RULE_pokestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			Match(POKE);
			State = 550;
			expression(0);
			State = 551;
			Match(T__6);
			State = 552;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MotorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOTOR() { return GetToken(ColorBasicParser.MOTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(ColorBasicParser.OFF, 0); }
		public MotorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_motorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterMotorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitMotorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMotorstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MotorstmtContext motorstmt() {
		MotorstmtContext _localctx = new MotorstmtContext(Context, State);
		EnterRule(_localctx, 122, RULE_motorstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(MOTOR);
			State = 555;
			_la = TokenStream.LA(1);
			if ( !(_la==ON || _la==OFF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AudiostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIO() { return GetToken(ColorBasicParser.AUDIO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(ColorBasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(ColorBasicParser.OFF, 0); }
		public AudiostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_audiostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterAudiostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitAudiostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAudiostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AudiostmtContext audiostmt() {
		AudiostmtContext _localctx = new AudiostmtContext(Context, State);
		EnterRule(_localctx, 124, RULE_audiostmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			Match(AUDIO);
			State = 558;
			_la = TokenStream.LA(1);
			if ( !(_la==ON || _la==OFF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoundstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUND() { return GetToken(ColorBasicParser.SOUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SoundstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soundstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSoundstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSoundstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoundstmtContext soundstmt() {
		SoundstmtContext _localctx = new SoundstmtContext(Context, State);
		EnterRule(_localctx, 126, RULE_soundstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			Match(SOUND);
			State = 561;
			expression(0);
			State = 562;
			Match(T__6);
			State = 563;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloadstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOAD() { return GetToken(ColorBasicParser.CLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CloadstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cloadstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCloadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCloadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloadstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloadstmtContext cloadstmt() {
		CloadstmtContext _localctx = new CloadstmtContext(Context, State);
		EnterRule(_localctx, 128, RULE_cloadstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(CLOAD);
			State = 566;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloadmstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOAD() { return GetToken(ColorBasicParser.CLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CloadmstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cloadmstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCloadmstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCloadmstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloadmstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloadmstmtContext cloadmstmt() {
		CloadmstmtContext _localctx = new CloadmstmtContext(Context, State);
		EnterRule(_localctx, 130, RULE_cloadmstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			Match(CLOAD);
			State = 569;
			expression(0);
			State = 570;
			Match(T__6);
			State = 571;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsavestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSAVE() { return GetToken(ColorBasicParser.CSAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CsavestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csavestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCsavestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCsavestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsavestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsavestmtContext csavestmt() {
		CsavestmtContext _localctx = new CsavestmtContext(Context, State);
		EnterRule(_localctx, 132, RULE_csavestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			Match(CSAVE);
			State = 574;
			expression(0);
			State = 575;
			Match(T__6);
			State = 576;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsavemstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSAVEM() { return GetToken(ColorBasicParser.CSAVEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CsavemstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csavemstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterCsavemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitCsavemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsavemstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsavemstmtContext csavemstmt() {
		CsavemstmtContext _localctx = new CsavemstmtContext(Context, State);
		EnterRule(_localctx, 134, RULE_csavemstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(CSAVEM);
			State = 579;
			expression(0);
			State = 580;
			Match(T__6);
			State = 581;
			expression(0);
			State = 582;
			Match(T__6);
			State = 583;
			expression(0);
			State = 584;
			Match(T__6);
			State = 585;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipfstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIPF() { return GetToken(ColorBasicParser.SKIPF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SkipfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipfstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterSkipfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitSkipfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipfstmtContext skipfstmt() {
		SkipfstmtContext _localctx = new SkipfstmtContext(Context, State);
		EnterRule(_localctx, 136, RULE_skipfstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			Match(SKIPF);
			State = 588;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(ColorBasicParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_KEYBOARD() { return GetToken(ColorBasicParser.DEVICE_KEYBOARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_CASSETTE() { return GetToken(ColorBasicParser.DEVICE_CASSETTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_PRINTER() { return GetToken(ColorBasicParser.DEVICE_PRINTER, 0); }
		public OpenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterOpenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitOpenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenstmtContext openstmt() {
		OpenstmtContext _localctx = new OpenstmtContext(Context, State);
		EnterRule(_localctx, 138, RULE_openstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			Match(OPEN);
			State = 591;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__11) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 592;
			Match(T__6);
			State = 593;
			Match(T__8);
			State = 594;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (DEVICE_KEYBOARD - 78)) | (1L << (DEVICE_CASSETTE - 78)) | (1L << (DEVICE_PRINTER - 78)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 595;
			Match(T__6);
			State = 596;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(ColorBasicParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_CASSETTE() { return GetToken(ColorBasicParser.DEVICE_CASSETTE, 0); }
		public ClosestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.EnterClosestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IColorBasicListener typedListener = listener as IColorBasicListener;
			if (typedListener != null) typedListener.ExitClosestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IColorBasicVisitor<TResult> typedVisitor = visitor as IColorBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosestmtContext closestmt() {
		ClosestmtContext _localctx = new ClosestmtContext(Context, State);
		EnterRule(_localctx, 140, RULE_closestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			Match(CLOSE);
			State = 599;
			Match(T__8);
			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEVICE_CASSETTE) {
				{
				State = 600;
				Match(DEVICE_CASSETTE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 4: return characterExpression_sempred((CharacterExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		}
		return true;
	}
	private bool characterExpression_sempred(CharacterExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x66', '\x25E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x3', '\x2', '\x6', '\x2', '\x92', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '\x93', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x9B', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\xA0', '\n', '\x3', '\a', '\x3', 
		'\xA2', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xA5', '\v', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\xD1', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\xDE', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', '\xE9', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', '\xEC', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\xF2', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', '\xF7', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '\xFA', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x102', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x108', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x113', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\x116', '\v', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x5', ' ', '\x182', 
		'\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x188', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x18D', 
		'\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x5', '\"', '\x19A', '\n', '\"', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x19E', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', 
		'\x1A3', '\n', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x1A7', '\n', 
		'$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', 
		'%', '\x1AE', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', 
		'\x1B3', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', '\x1C4', 
		'\n', '(', '\f', '(', '\xE', '(', '\x1C7', '\v', '(', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\a', 
		')', '\x1D0', '\n', ')', '\f', ')', '\xE', ')', '\x1D3', '\v', ')', '\x3', 
		'*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', 
		',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x5', '\x35', '\x1F2', '\n', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x1F8', '\n', 
		'\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x6', ':', '\x215', '\n', ':', '\r', ':', '\xE', ':', 
		'\x216', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', 
		'<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x5', 'H', '\x25C', '\n', 'H', '\x3', 'H', '\x2', '\x4', 
		'\b', '\n', 'I', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 
		'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', 
		'\x88', '\x8A', '\x8C', '\x8E', '\x2', '\f', '\x3', '\x3', '\x66', '\x66', 
		'\x3', '\x2', 'X', 'Y', '\x3', '\x2', 'Z', '[', '\x3', '\x2', '\\', '_', 
		'\x4', '\x2', '\\', '\\', '^', '^', '\x4', '\x2', ']', ']', '_', '_', 
		'\x3', '\x2', 'Q', 'R', '\x3', '\x2', '.', '/', '\x3', '\x2', '\r', '\xE', 
		'\x3', '\x2', 'P', 'R', '\x2', '\x263', '\x2', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x97', '\x3', '\x2', '\x2', '\x2', '\x6', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\xDD', '\x3', '\x2', '\x2', '\x2', '\n', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10', '\x109', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x14', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x121', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x126', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x135', '\x3', '\x2', '\x2', '\x2', '$', '\x13A', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x13F', '\x3', '\x2', '\x2', '\x2', '(', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		',', '\x154', '\x3', '\x2', '\x2', '\x2', '.', '\x15B', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x160', '\x3', '\x2', '\x2', '\x2', '\x32', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x38', '\x171', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x178', '\x3', '\x2', '\x2', '\x2', '<', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x42', '\x191', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x46', '\x19F', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x1A8', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x1B4', '\x3', '\x2', '\x2', '\x2', 'L', '\x1B8', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x1BC', '\x3', '\x2', '\x2', '\x2', 'P', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x1D4', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x1D6', '\x3', '\x2', '\x2', '\x2', 'V', '\x1D9', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x1DB', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1DD', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x1DF', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x1E1', '\x3', '\x2', '\x2', '\x2', '`', '\x1E3', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x64', '\x1E7', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x1E9', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x1EB', '\x3', '\x2', '\x2', '\x2', 'j', '\x1F5', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x1F9', '\x3', '\x2', '\x2', '\x2', 'n', '\x201', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x207', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x20D', '\x3', '\x2', '\x2', '\x2', 't', '\x21A', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x221', '\x3', '\x2', '\x2', '\x2', 'x', '\x224', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x227', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x22C', '\x3', '\x2', '\x2', '\x2', '~', '\x22F', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x232', '\x3', '\x2', '\x2', '\x2', '\x82', '\x237', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x88', '\x244', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x250', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x258', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x92', '\x5', '\x4', '\x3', '\x2', '\x91', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', '\x2', 
		'\x2', '\x3', '\x96', '\x3', '\x3', '\x2', '\x2', '\x2', '\x97', '\x9A', 
		'\a', 'N', '\x2', '\x2', '\x98', '\x9B', '\x5', '\x6', '\x4', '\x2', '\x99', 
		'\x9B', '\a', '\x64', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9F', '\a', '\x3', '\x2', '\x2', '\x9D', 
		'\xA0', '\x5', '\x6', '\x4', '\x2', '\x9E', '\xA0', '\a', '\x64', '\x2', 
		'\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\t', '\x2', '\x2', 
		'\x2', '\xA7', '\x5', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xD1', '\x5', 
		'>', ' ', '\x2', '\xA9', '\xD1', '\x5', 'R', '*', '\x2', '\xAA', '\xD1', 
		'\x5', 'V', ',', '\x2', '\xAB', '\xD1', '\x5', 'j', '\x36', '\x2', '\xAC', 
		'\xD1', '\x5', '\x44', '#', '\x2', '\xAD', '\xD1', '\x5', 'z', '>', '\x2', 
		'\xAE', '\xD1', '\x5', '\x46', '$', '\x2', '\xAF', '\xD1', '\x5', 'H', 
		'%', '\x2', '\xB0', '\xD1', '\x5', '\x42', '\"', '\x2', '\xB1', '\xD1', 
		'\x5', 'h', '\x35', '\x2', '\xB2', '\xD1', '\x5', '@', '!', '\x2', '\xB3', 
		'\xD1', '\x5', 'J', '&', '\x2', '\xB4', '\xD1', '\x5', 'L', '\'', '\x2', 
		'\xB5', '\xD1', '\x5', 'T', '+', '\x2', '\xB6', '\xD1', '\x5', 'j', '\x36', 
		'\x2', '\xB7', '\xD1', '\x5', 'l', '\x37', '\x2', '\xB8', '\xD1', '\x5', 
		'n', '\x38', '\x2', '\xB9', '\xD1', '\x5', 'p', '\x39', '\x2', '\xBA', 
		'\xD1', '\x5', 'X', '-', '\x2', '\xBB', '\xD1', '\x5', '\\', '/', '\x2', 
		'\xBC', '\xD1', '\x5', 'Z', '.', '\x2', '\xBD', '\xD1', '\x5', '^', '\x30', 
		'\x2', '\xBE', '\xD1', '\x5', '`', '\x31', '\x2', '\xBF', '\xD1', '\x5', 
		'\x62', '\x32', '\x2', '\xC0', '\xD1', '\x5', '\x64', '\x33', '\x2', '\xC1', 
		'\xD1', '\x5', '\x66', '\x34', '\x2', '\xC2', '\xD1', '\x5', 'r', ':', 
		'\x2', '\xC3', '\xD1', '\x5', 't', ';', '\x2', '\xC4', '\xD1', '\x5', 
		'v', '<', '\x2', '\xC5', '\xD1', '\x5', 'x', '=', '\x2', '\xC6', '\xD1', 
		'\x5', '|', '?', '\x2', '\xC7', '\xD1', '\x5', '~', '@', '\x2', '\xC8', 
		'\xD1', '\x5', '\x80', '\x41', '\x2', '\xC9', '\xD1', '\x5', '\x82', '\x42', 
		'\x2', '\xCA', '\xD1', '\x5', '\x84', '\x43', '\x2', '\xCB', '\xD1', '\x5', 
		'\x86', '\x44', '\x2', '\xCC', '\xD1', '\x5', '\x88', '\x45', '\x2', '\xCD', 
		'\xD1', '\x5', '\x8A', '\x46', '\x2', '\xCE', '\xD1', '\x5', '\x8C', 'G', 
		'\x2', '\xCF', '\xD1', '\x5', '\x8E', 'H', '\x2', '\xD0', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD3', '\b', '\x5', '\x1', '\x2', '\xD3', 
		'\xD4', '\t', '\x3', '\x2', '\x2', '\xD4', '\xDE', '\x5', '\b', '\x5', 
		'\x2', '\xD5', '\xDE', '\a', '^', '\x2', '\x2', '\xD6', '\xDE', '\a', 
		'\\', '\x2', '\x2', '\xD7', '\xDE', '\a', 'N', '\x2', '\x2', '\xD8', '\xDE', 
		'\a', '\x63', '\x2', '\x2', '\xD9', '\xDA', '\a', '\x5', '\x2', '\x2', 
		'\xDA', '\xDB', '\x5', '\b', '\x5', '\x2', '\xDB', '\xDC', '\a', '\x6', 
		'\x2', '\x2', '\xDC', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xEA', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xE0', '\f', '\v', '\x2', '\x2', '\xE0', '\xE1', '\t', '\x4', 
		'\x2', '\x2', '\xE1', '\xE9', '\x5', '\b', '\x5', '\f', '\xE2', '\xE3', 
		'\f', '\n', '\x2', '\x2', '\xE3', '\xE4', '\t', '\x3', '\x2', '\x2', '\xE4', 
		'\xE9', '\x5', '\b', '\x5', '\v', '\xE5', '\xE6', '\f', '\t', '\x2', '\x2', 
		'\xE6', '\xE7', '\a', '\x4', '\x2', '\x2', '\xE7', '\xE9', '\x5', '\b', 
		'\x5', '\x2', '\xE8', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xEE', '\b', '\x6', '\x1', '\x2', '\xEE', '\xF2', '\a', '_', 
		'\x2', '\x2', '\xEF', '\xF2', '\a', ']', '\x2', '\x2', '\xF0', '\xF2', 
		'\a', '\x62', '\x2', '\x2', '\xF1', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', 
		'\f', '\x6', '\x2', '\x2', '\xF4', '\xF5', '\a', 'X', '\x2', '\x2', '\xF5', 
		'\xF7', '\x5', '\n', '\x6', '\a', '\xF6', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\x102', '\x5', '\x10', '\t', '\x2', '\xFC', '\x102', '\x5', 
		'\x12', '\n', '\x2', '\xFD', '\x102', '\x5', '\xE', '\b', '\x2', '\xFE', 
		'\x102', '\a', 'W', '\x2', '\x2', '\xFF', '\x102', '\a', '\a', '\x2', 
		'\x2', '\x100', '\x102', '\a', '\b', '\x2', '\x2', '\x101', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x104', '\a', '\b', '\x2', '\x2', '\x104', '\x108', '\a', '\a', 
		'\x2', '\x2', '\x105', '\x106', '\a', '\a', '\x2', '\x2', '\x106', '\x108', 
		'\a', '\b', '\x2', '\x2', '\x107', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x105', '\x3', '\x2', '\x2', '\x2', '\x108', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x109', '\x10A', '\a', '\a', '\x2', '\x2', '\x10A', '\x10B', 
		'\a', 'W', '\x2', '\x2', '\x10B', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10D', '\a', '\b', '\x2', '\x2', '\x10D', '\x10E', '\a', 'W', 
		'\x2', '\x2', '\x10E', '\x13', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x114', 
		'\t', '\x5', '\x2', '\x2', '\x110', '\x111', '\a', '\t', '\x2', '\x2', 
		'\x111', '\x113', '\t', '\x5', '\x2', '\x2', '\x112', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x116', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x112', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x15', '\x3', '\x2', '\x2', '\x2', '\x116', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\a', '\x11', '\x2', '\x2', 
		'\x118', '\x119', '\a', '\x5', '\x2', '\x2', '\x119', '\x11A', '\x5', 
		'\b', '\x5', '\x2', '\x11A', '\x11B', '\a', '\x6', '\x2', '\x2', '\x11B', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\a', '\x12', '\x2', 
		'\x2', '\x11D', '\x11E', '\a', '\x5', '\x2', '\x2', '\x11E', '\x11F', 
		'\x5', '\b', '\x5', '\x2', '\x11F', '\x120', '\a', '\x6', '\x2', '\x2', 
		'\x120', '\x19', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\a', '\x13', 
		'\x2', '\x2', '\x122', '\x123', '\a', '\x5', '\x2', '\x2', '\x123', '\x124', 
		'\x5', '\b', '\x5', '\x2', '\x124', '\x125', '\a', '\x6', '\x2', '\x2', 
		'\x125', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\a', '\x14', 
		'\x2', '\x2', '\x127', '\x128', '\a', '\x5', '\x2', '\x2', '\x128', '\x129', 
		'\x5', '\b', '\x5', '\x2', '\x129', '\x12A', '\a', '\x6', '\x2', '\x2', 
		'\x12A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\a', '\x15', 
		'\x2', '\x2', '\x12C', '\x12D', '\a', '\x5', '\x2', '\x2', '\x12D', '\x12E', 
		'\x5', '\b', '\x5', '\x2', '\x12E', '\x12F', '\a', '\x6', '\x2', '\x2', 
		'\x12F', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\a', '\x16', 
		'\x2', '\x2', '\x131', '\x132', '\a', '\x5', '\x2', '\x2', '\x132', '\x133', 
		'\x5', '\b', '\x5', '\x2', '\x133', '\x134', '\a', '\x6', '\x2', '\x2', 
		'\x134', '!', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\a', '\x17', 
		'\x2', '\x2', '\x136', '\x137', '\a', '\x5', '\x2', '\x2', '\x137', '\x138', 
		'\x5', '\b', '\x5', '\x2', '\x138', '\x139', '\a', '\x6', '\x2', '\x2', 
		'\x139', '#', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\x18', 
		'\x2', '\x2', '\x13B', '\x13C', '\a', '\x5', '\x2', '\x2', '\x13C', '\x13D', 
		'\x5', '\b', '\x5', '\x2', '\x13D', '\x13E', '\a', '\x6', '\x2', '\x2', 
		'\x13E', '%', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\a', '\x19', 
		'\x2', '\x2', '\x140', '\x141', '\a', '\x5', '\x2', '\x2', '\x141', '\x142', 
		'\x5', '\b', '\x5', '\x2', '\x142', '\x143', '\a', '\x6', '\x2', '\x2', 
		'\x143', '\'', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\a', '\x1A', 
		'\x2', '\x2', '\x145', '\x146', '\a', '\x5', '\x2', '\x2', '\x146', '\x147', 
		'\x5', '\b', '\x5', '\x2', '\x147', '\x148', '\a', '\t', '\x2', '\x2', 
		'\x148', '\x149', '\x5', '\b', '\x5', '\x2', '\x149', '\x14A', '\a', '\t', 
		'\x2', '\x2', '\x14A', '\x14B', '\x5', '\b', '\x5', '\x2', '\x14B', '\x14C', 
		'\a', '\x6', '\x2', '\x2', '\x14C', ')', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14E', '\a', '\x1B', '\x2', '\x2', '\x14E', '\x14F', '\a', '\x5', '\x2', 
		'\x2', '\x14F', '\x150', '\x5', '\b', '\x5', '\x2', '\x150', '\x151', 
		'\a', '\t', '\x2', '\x2', '\x151', '\x152', '\x5', '\b', '\x5', '\x2', 
		'\x152', '\x153', '\a', '\x6', '\x2', '\x2', '\x153', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x154', '\x155', '\a', '\x1C', '\x2', '\x2', '\x155', '\x156', 
		'\a', '\x5', '\x2', '\x2', '\x156', '\x157', '\x5', '\b', '\x5', '\x2', 
		'\x157', '\x158', '\a', '\t', '\x2', '\x2', '\x158', '\x159', '\x5', '\b', 
		'\x5', '\x2', '\x159', '\x15A', '\a', '\x6', '\x2', '\x2', '\x15A', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\a', '\x1D', '\x2', '\x2', 
		'\x15C', '\x15D', '\a', '\x5', '\x2', '\x2', '\x15D', '\x15E', '\x5', 
		'\b', '\x5', '\x2', '\x15E', '\x15F', '\a', '\x6', '\x2', '\x2', '\x15F', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\a', '\x1E', '\x2', 
		'\x2', '\x161', '\x31', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', 
		'\a', '\x1F', '\x2', '\x2', '\x163', '\x164', '\a', '\x5', '\x2', '\x2', 
		'\x164', '\x165', '\x5', '\b', '\x5', '\x2', '\x165', '\x166', '\a', '\x6', 
		'\x2', '\x2', '\x166', '\x33', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', 
		'\a', ' ', '\x2', '\x2', '\x168', '\x169', '\a', '\x5', '\x2', '\x2', 
		'\x169', '\x16A', '\x5', '\b', '\x5', '\x2', '\x16A', '\x16B', '\a', '\x6', 
		'\x2', '\x2', '\x16B', '\x35', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', 
		'\a', '!', '\x2', '\x2', '\x16D', '\x16E', '\a', '\x5', '\x2', '\x2', 
		'\x16E', '\x16F', '\x5', '\b', '\x5', '\x2', '\x16F', '\x170', '\a', '\x6', 
		'\x2', '\x2', '\x170', '\x37', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', 
		'\a', '\"', '\x2', '\x2', '\x172', '\x173', '\a', '\x5', '\x2', '\x2', 
		'\x173', '\x174', '\x5', '\b', '\x5', '\x2', '\x174', '\x175', '\a', '\t', 
		'\x2', '\x2', '\x175', '\x176', '\x5', '\b', '\x5', '\x2', '\x176', '\x177', 
		'\a', '\x6', '\x2', '\x2', '\x177', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x179', '\a', '#', '\x2', '\x2', '\x179', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x17A', '\x17B', '\a', '$', '\x2', '\x2', '\x17B', '\x17C', 
		'\a', 'O', '\x2', '\x2', '\x17C', '\x17D', '\a', '\x5', '\x2', '\x2', 
		'\x17D', '\x17E', '\x5', '\b', '\x5', '\x2', '\x17E', '\x17F', '\a', '\x6', 
		'\x2', '\x2', '\x17F', '=', '\x3', '\x2', '\x2', '\x2', '\x180', '\x182', 
		'\a', '\xF', '\x2', '\x2', '\x181', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'\x181', '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x184', '\t', '\x6', '\x2', '\x2', '\x184', 
		'\x185', '\a', 'W', '\x2', '\x2', '\x185', '\x18D', '\x5', '\b', '\x5', 
		'\x2', '\x186', '\x188', '\a', '\xF', '\x2', '\x2', '\x187', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x189', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\t', 
		'\a', '\x2', '\x2', '\x18A', '\x18B', '\a', 'W', '\x2', '\x2', '\x18B', 
		'\x18D', '\x5', '\n', '\x6', '\x2', '\x18C', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x187', '\x3', '\x2', '\x2', '\x2', '\x18D', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x18E', '\x18F', '\a', '\x10', '\x2', '\x2', '\x18F', 
		'\x190', '\x5', '\x14', '\v', '\x2', '\x190', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x191', '\x192', '\a', '%', '\x2', '\x2', '\x192', '\x193', '\t', 
		'\x6', '\x2', '\x2', '\x193', '\x194', '\a', 'W', '\x2', '\x2', '\x194', 
		'\x195', '\x5', '\b', '\x5', '\x2', '\x195', '\x196', '\a', '&', '\x2', 
		'\x2', '\x196', '\x199', '\x5', '\b', '\x5', '\x2', '\x197', '\x198', 
		'\a', '\'', '\x2', '\x2', '\x198', '\x19A', '\x5', '\b', '\x5', '\x2', 
		'\x199', '\x197', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', '\x43', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x19D', '\a', '(', '\x2', '\x2', '\x19C', '\x19E', '\x5', '\x14', '\v', 
		'\x2', '\x19D', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x19F', '\x1A0', '\a', ')', '\x2', '\x2', '\x1A0', '\x1A2', '\x5', '\b', 
		'\x5', '\x2', '\x1A1', '\x1A3', '\a', '*', '\x2', '\x2', '\x1A2', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\x3', '\x2', '\x2', '\x2', 
		'\x1A3', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A7', '\x5', 
		'\x6', '\x4', '\x2', '\x1A5', '\x1A7', '\a', 'N', '\x2', '\x2', '\x1A6', 
		'\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x1A7', 'G', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\a', 
		')', '\x2', '\x2', '\x1A9', '\x1AA', '\x5', '\b', '\x5', '\x2', '\x1AA', 
		'\x1AD', '\a', '*', '\x2', '\x2', '\x1AB', '\x1AE', '\x5', '\x6', '\x4', 
		'\x2', '\x1AC', '\x1AE', '\a', 'N', '\x2', '\x2', '\x1AD', '\x1AB', '\x3', 
		'\x2', '\x2', '\x2', '\x1AD', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B2', '\a', '+', '\x2', 
		'\x2', '\x1B0', '\x1B3', '\x5', '\x6', '\x4', '\x2', '\x1B1', '\x1B3', 
		'\a', 'N', '\x2', '\x2', '\x1B2', '\x1B0', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B3', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x1B4', '\x1B5', '\a', ',', '\x2', '\x2', '\x1B5', '\x1B6', 
		'\a', '&', '\x2', '\x2', '\x1B6', '\x1B7', '\a', 'N', '\x2', '\x2', '\x1B7', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\a', ',', '\x2', '\x2', 
		'\x1B9', '\x1BA', '\a', '-', '\x2', '\x2', '\x1BA', '\x1BB', '\a', 'N', 
		'\x2', '\x2', '\x1BB', 'M', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', 
		'\a', '.', '\x2', '\x2', '\x1BD', '\x1BE', '\x5', '\b', '\x5', '\x2', 
		'\x1BE', '\x1BF', '\a', ',', '\x2', '\x2', '\x1BF', '\x1C0', '\a', '&', 
		'\x2', '\x2', '\x1C0', '\x1C5', '\a', 'N', '\x2', '\x2', '\x1C1', '\x1C2', 
		'\a', '\t', '\x2', '\x2', '\x1C2', '\x1C4', '\a', 'N', '\x2', '\x2', '\x1C3', 
		'\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C7', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C6', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x1C7', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\a', 
		'.', '\x2', '\x2', '\x1C9', '\x1CA', '\x5', '\b', '\x5', '\x2', '\x1CA', 
		'\x1CB', '\a', ',', '\x2', '\x2', '\x1CB', '\x1CC', '\a', '-', '\x2', 
		'\x2', '\x1CC', '\x1D1', '\a', 'N', '\x2', '\x2', '\x1CD', '\x1CE', '\a', 
		'\t', '\x2', '\x2', '\x1CE', '\x1D0', '\a', 'N', '\x2', '\x2', '\x1CF', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D3', '\x3', '\x2', '\x2', 
		'\x2', '\x1D1', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x1D3', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\a', 
		'\x30', '\x2', '\x2', '\x1D5', 'S', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x1D7', '\a', '\x33', '\x2', '\x2', '\x1D7', '\x1D8', '\x5', '\x14', 
		'\v', '\x2', '\x1D8', 'U', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\a', '\x32', '\x2', '\x2', '\x1DA', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1DC', '\a', '\x34', '\x2', '\x2', '\x1DC', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x1DD', '\x1DE', '\a', '\x35', '\x2', '\x2', '\x1DE', '[', 
		'\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\a', '\x36', '\x2', '\x2', 
		'\x1E0', ']', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\a', '\x37', 
		'\x2', '\x2', '\x1E2', '_', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', 
		'\a', ';', '\x2', '\x2', '\x1E4', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x1E5', '\x1E6', '\a', '\x38', '\x2', '\x2', '\x1E6', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\a', '\x39', '\x2', '\x2', '\x1E8', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\a', ':', '\x2', 
		'\x2', '\x1EA', 'g', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1F1', '\a', 
		'<', '\x2', '\x2', '\x1EC', '\x1ED', '\a', '\x62', '\x2', '\x2', '\x1ED', 
		'\x1F2', '\a', '\n', '\x2', '\x2', '\x1EE', '\x1EF', '\a', '\v', '\x2', 
		'\x2', '\x1EF', '\x1F0', '\a', 'Q', '\x2', '\x2', '\x1F0', '\x1F2', '\a', 
		'\t', '\x2', '\x2', '\x1F1', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\x3', '\x2', '\x2', 
		'\x2', '\x1F2', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', 
		'\x5', '\x14', '\v', '\x2', '\x1F4', 'i', '\x3', '\x2', '\x2', '\x2', 
		'\x1F5', '\x1F7', '\a', '=', '\x2', '\x2', '\x1F6', '\x1F8', '\x5', '\n', 
		'\x6', '\x2', '\x1F7', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x1F9', '\x1FA', '\a', '=', '\x2', '\x2', '\x1FA', '\x1FB', '\a', '>', 
		'\x2', '\x2', '\x1FB', '\x1FC', '\a', '\x5', '\x2', '\x2', '\x1FC', '\x1FD', 
		'\x5', '\b', '\x5', '\x2', '\x1FD', '\x1FE', '\a', '\x6', '\x2', '\x2', 
		'\x1FE', '\x1FF', '\a', '\n', '\x2', '\x2', '\x1FF', '\x200', '\x5', '\b', 
		'\x5', '\x2', '\x200', 'm', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', 
		'\a', '=', '\x2', '\x2', '\x202', '\x203', '\a', '\v', '\x2', '\x2', '\x203', 
		'\x204', '\t', '\b', '\x2', '\x2', '\x204', '\x205', '\a', '\t', '\x2', 
		'\x2', '\x205', '\x206', '\x5', '\b', '\x5', '\x2', '\x206', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x207', '\x208', '\a', '=', '\x2', '\x2', '\x208', 
		'\x209', '\a', '\f', '\x2', '\x2', '\x209', '\x20A', '\x5', '\b', '\x5', 
		'\x2', '\x20A', '\x20B', '\a', '\t', '\x2', '\x2', '\x20B', '\x20C', '\x5', 
		'\b', '\x5', '\x2', '\x20C', 'q', '\x3', '\x2', '\x2', '\x2', '\x20D', 
		'\x20E', '\a', '?', '\x2', '\x2', '\x20E', '\x20F', '\a', '\x5', '\x2', 
		'\x2', '\x20F', '\x210', '\x5', '\b', '\x5', '\x2', '\x210', '\x211', 
		'\a', '\t', '\x2', '\x2', '\x211', '\x214', '\x5', '\b', '\x5', '\x2', 
		'\x212', '\x213', '\a', '\t', '\x2', '\x2', '\x213', '\x215', '\x5', '\b', 
		'\x5', '\x2', '\x214', '\x212', '\x3', '\x2', '\x2', '\x2', '\x215', '\x216', 
		'\x3', '\x2', '\x2', '\x2', '\x216', '\x214', '\x3', '\x2', '\x2', '\x2', 
		'\x216', '\x217', '\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\x3', 
		'\x2', '\x2', '\x2', '\x218', '\x219', '\a', '\x6', '\x2', '\x2', '\x219', 
		's', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', '\a', '@', '\x2', '\x2', 
		'\x21B', '\x21C', '\a', '\x5', '\x2', '\x2', '\x21C', '\x21D', '\x5', 
		'\b', '\x5', '\x2', '\x21D', '\x21E', '\a', '\t', '\x2', '\x2', '\x21E', 
		'\x21F', '\x5', '\b', '\x5', '\x2', '\x21F', '\x220', '\a', '\x6', '\x2', 
		'\x2', '\x220', 'u', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\a', 
		'\x41', '\x2', '\x2', '\x222', '\x223', '\x5', '\b', '\x5', '\x2', '\x223', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\a', '\x42', '\x2', 
		'\x2', '\x225', '\x226', '\x5', '\b', '\x5', '\x2', '\x226', 'y', '\x3', 
		'\x2', '\x2', '\x2', '\x227', '\x228', '\a', '\x43', '\x2', '\x2', '\x228', 
		'\x229', '\x5', '\b', '\x5', '\x2', '\x229', '\x22A', '\a', '\t', '\x2', 
		'\x2', '\x22A', '\x22B', '\x5', '\b', '\x5', '\x2', '\x22B', '{', '\x3', 
		'\x2', '\x2', '\x2', '\x22C', '\x22D', '\a', '\x44', '\x2', '\x2', '\x22D', 
		'\x22E', '\t', '\t', '\x2', '\x2', '\x22E', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x22F', '\x230', '\a', '\x45', '\x2', '\x2', '\x230', '\x231', 
		'\t', '\t', '\x2', '\x2', '\x231', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x232', '\x233', '\a', '\x46', '\x2', '\x2', '\x233', '\x234', '\x5', 
		'\b', '\x5', '\x2', '\x234', '\x235', '\a', '\t', '\x2', '\x2', '\x235', 
		'\x236', '\x5', '\b', '\x5', '\x2', '\x236', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x238', '\a', 'G', '\x2', '\x2', '\x238', '\x239', '\x5', 
		'\b', '\x5', '\x2', '\x239', '\x83', '\x3', '\x2', '\x2', '\x2', '\x23A', 
		'\x23B', '\a', 'G', '\x2', '\x2', '\x23B', '\x23C', '\x5', '\b', '\x5', 
		'\x2', '\x23C', '\x23D', '\a', '\t', '\x2', '\x2', '\x23D', '\x23E', '\x5', 
		'\b', '\x5', '\x2', '\x23E', '\x85', '\x3', '\x2', '\x2', '\x2', '\x23F', 
		'\x240', '\a', 'H', '\x2', '\x2', '\x240', '\x241', '\x5', '\b', '\x5', 
		'\x2', '\x241', '\x242', '\a', '\t', '\x2', '\x2', '\x242', '\x243', '\x5', 
		'\b', '\x5', '\x2', '\x243', '\x87', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x245', '\a', 'J', '\x2', '\x2', '\x245', '\x246', '\x5', '\b', '\x5', 
		'\x2', '\x246', '\x247', '\a', '\t', '\x2', '\x2', '\x247', '\x248', '\x5', 
		'\b', '\x5', '\x2', '\x248', '\x249', '\a', '\t', '\x2', '\x2', '\x249', 
		'\x24A', '\x5', '\b', '\x5', '\x2', '\x24A', '\x24B', '\a', '\t', '\x2', 
		'\x2', '\x24B', '\x24C', '\x5', '\b', '\x5', '\x2', '\x24C', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x24D', '\x24E', '\a', 'K', '\x2', '\x2', '\x24E', 
		'\x24F', '\x5', '\b', '\x5', '\x2', '\x24F', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x250', '\x251', '\a', 'L', '\x2', '\x2', '\x251', '\x252', '\t', 
		'\n', '\x2', '\x2', '\x252', '\x253', '\a', '\t', '\x2', '\x2', '\x253', 
		'\x254', '\a', '\v', '\x2', '\x2', '\x254', '\x255', '\t', '\v', '\x2', 
		'\x2', '\x255', '\x256', '\a', '\t', '\x2', '\x2', '\x256', '\x257', '\x5', 
		'\b', '\x5', '\x2', '\x257', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x258', 
		'\x259', '\a', 'M', '\x2', '\x2', '\x259', '\x25B', '\a', '\v', '\x2', 
		'\x2', '\x25A', '\x25C', '\a', 'Q', '\x2', '\x2', '\x25B', '\x25A', '\x3', 
		'\x2', '\x2', '\x2', '\x25B', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25C', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x93', '\x9A', '\x9F', '\xA3', 
		'\xD0', '\xDD', '\xE8', '\xEA', '\xF1', '\xF8', '\x101', '\x107', '\x114', 
		'\x181', '\x187', '\x18C', '\x199', '\x19D', '\x1A2', '\x1A6', '\x1AD', 
		'\x1B2', '\x1C5', '\x1D1', '\x1F1', '\x1F7', '\x216', '\x25B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BASICLanguageParser
